
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;
import Errores.Excepcion;
import java.util.HashMap;
import abstracto.*;
import simbolo.*;
import instrucciones.*;
import expresiones.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\004\004\000\002" +
    "\004\003\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\004\000\002\004\005\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\010\010\000\002\010\006\000\002\024\003" +
    "\000\002\024\003\000\002\011\005\000\002\012\013\000" +
    "\002\012\015\000\002\012\011\000\002\013\005\000\002" +
    "\014\005\000\002\014\004\000\002\015\004\000\002\015" +
    "\003\000\002\015\003\000\002\016\004\000\002\016\003" +
    "\000\002\017\007\000\002\020\007\000\002\021\011\000" +
    "\002\022\015\000\002\023\012\000\002\005\007\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\005\000\002\006\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\004\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\004\000\002\030\006\000\002\031\004\000\002" +
    "\031\004\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\032\014" +
    "\000\002\032\016\000\002\033\005\000\002\033\003\000" +
    "\002\034\007\000\002\034\005\000\002\035\006\000\002" +
    "\035\011\000\002\036\010\000\002\036\013\000\002\037" +
    "\014\000\002\040\010\000\002\041\010\000\002\042\007" +
    "\000\002\043\004\000\002\043\003\000\002\044\006\000" +
    "\002\045\012\000\002\046\005\000\002\046\003\000\002" +
    "\047\005\000\002\050\005\000\002\051\007\000\002\052" +
    "\012\000\002\056\006\000\002\056\004\000\002\054\012" +
    "\000\002\054\011\000\002\053\005\000\002\053\003\000" +
    "\002\055\006\000\002\055\005\000\002\057\006\000\002" +
    "\060\006\000\002\061\006\000\002\062\010\000\002\063" +
    "\007\000\002\063\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014c\000\056\003\036\044\032\047\015\050\011\051" +
    "\056\052\005\053\025\056\061\057\006\060\030\062\020" +
    "\063\052\064\017\065\062\066\042\067\012\070\035\073" +
    "\053\077\060\100\043\101\016\106\051\001\002\000\004" +
    "\004\u014e\001\002\000\016\004\uffa2\007\uffa2\014\uffa2\034" +
    "\uffa2\036\uffa2\044\uffa2\001\002\000\004\044\uffe1\001\002" +
    "\000\062\002\ufff5\003\ufff5\010\ufff5\044\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\052\ufff5\053\ufff5\056\ufff5\057\ufff5\060\ufff5" +
    "\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070" +
    "\ufff5\073\ufff5\077\ufff5\100\ufff5\101\ufff5\106\ufff5\001\002" +
    "\000\060\002\000\003\036\044\032\047\015\050\011\051" +
    "\056\052\005\053\025\056\061\057\006\060\030\062\020" +
    "\063\052\064\017\065\062\066\042\067\012\070\035\073" +
    "\053\077\060\100\043\101\016\106\051\001\002\000\016" +
    "\004\uffa5\007\uffa5\014\uffa5\034\uffa5\036\uffa5\044\uffa5\001" +
    "\002\000\004\004\u014d\001\002\000\004\004\u014c\001\002" +
    "\000\004\004\u014b\001\002\000\016\004\uffa6\007\uffa6\014" +
    "\uffa6\034\uffa6\036\uffa6\044\uffa6\001\002\000\004\006\u0147" +
    "\001\002\000\004\006\u013b\001\002\000\034\006\113\020" +
    "\077\023\071\042\116\043\073\044\102\045\106\046\072" +
    "\054\100\055\114\102\107\103\112\104\101\001\002\000" +
    "\004\004\u0125\001\002\000\004\004\u0124\001\002\000\062" +
    "\002\ufffb\003\ufffb\010\ufffb\044\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\056\ufffb\057\ufffb\060\ufffb\062\ufffb" +
    "\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\073" +
    "\ufffb\077\ufffb\100\ufffb\101\ufffb\106\ufffb\001\002\000\004" +
    "\004\u0123\001\002\000\016\004\uffa4\007\uffa4\014\uffa4\034" +
    "\uffa4\036\uffa4\044\uffa4\001\002\000\062\002\ufffa\003\ufffa" +
    "\010\ufffa\044\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\056\ufffa\057\ufffa\060\ufffa\062\ufffa\063\ufffa\064\ufffa" +
    "\065\ufffa\066\ufffa\067\ufffa\070\ufffa\073\ufffa\077\ufffa\100" +
    "\ufffa\101\ufffa\106\ufffa\001\002\000\004\004\u0122\001\002" +
    "\000\004\006\u0117\001\002\000\062\002\ufff8\003\ufff8\010" +
    "\ufff8\044\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\062\ufff8\063\ufff8\064\ufff8\065" +
    "\ufff8\066\ufff8\067\ufff8\070\ufff8\073\ufff8\077\ufff8\100\ufff8" +
    "\101\ufff8\106\ufff8\001\002\000\016\006\177\012\u0101\014" +
    "\u0102\031\u0104\032\u0105\034\u0103\001\002\000\062\002\ufffe" +
    "\003\ufffe\010\ufffe\044\ufffe\047\ufffe\050\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\056\ufffe\057\ufffe\060\ufffe\062\ufffe\063\ufffe" +
    "\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\073\ufffe\077" +
    "\ufffe\100\ufffe\101\ufffe\106\ufffe\001\002\000\004\044\372" +
    "\001\002\000\036\004\370\006\113\020\077\023\071\042" +
    "\116\043\073\044\102\045\106\046\072\054\100\055\114" +
    "\102\107\103\112\104\101\001\002\000\004\004\366\001" +
    "\002\000\004\004\365\001\002\000\004\004\364\001\002" +
    "\000\062\002\uffec\003\uffec\010\uffec\044\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\056\uffec\057\uffec\060\uffec" +
    "\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070" +
    "\uffec\073\uffec\077\uffec\100\uffec\101\uffec\106\uffec\001\002" +
    "\000\004\004\363\001\002\000\004\044\343\001\002\000" +
    "\004\044\275\001\002\000\062\002\uffed\003\uffed\010\uffed" +
    "\044\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\056" +
    "\uffed\057\uffed\060\uffed\062\uffed\063\uffed\064\uffed\065\uffed" +
    "\066\uffed\067\uffed\070\uffed\073\uffed\077\uffed\100\uffed\101" +
    "\uffed\106\uffed\001\002\000\004\004\274\001\002\000\004" +
    "\004\273\001\002\000\004\004\272\001\002\000\004\044" +
    "\265\001\002\000\004\006\257\001\002\000\004\037\246" +
    "\001\002\000\004\004\245\001\002\000\004\002\244\001" +
    "\002\000\016\004\uffa3\007\uffa3\014\uffa3\034\uffa3\036\uffa3" +
    "\044\uffa3\001\002\000\062\002\ufff9\003\ufff9\010\ufff9\044" +
    "\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\056\ufff9" +
    "\057\ufff9\060\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066" +
    "\ufff9\067\ufff9\070\ufff9\073\ufff9\077\ufff9\100\ufff9\101\ufff9" +
    "\106\ufff9\001\002\000\004\011\232\001\002\000\004\044" +
    "\uffe2\001\002\000\004\011\063\001\002\000\056\003\036" +
    "\044\032\047\015\050\011\051\056\052\005\053\025\056" +
    "\061\057\006\060\030\062\020\063\052\064\017\065\062" +
    "\066\042\067\012\070\035\073\053\077\060\100\043\101" +
    "\016\106\051\001\002\000\060\003\036\010\066\044\032" +
    "\047\015\050\011\051\056\052\005\053\025\056\061\057" +
    "\006\060\030\062\020\063\052\064\017\065\062\066\042" +
    "\067\012\070\035\073\053\077\060\100\043\101\016\106" +
    "\051\001\002\000\062\002\uffff\003\uffff\010\uffff\044\uffff" +
    "\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\056\uffff\057" +
    "\uffff\060\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff" +
    "\067\uffff\070\uffff\073\uffff\077\uffff\100\uffff\101\uffff\106" +
    "\uffff\001\002\000\004\063\067\001\002\000\004\006\070" +
    "\001\002\000\034\006\113\020\077\023\071\042\116\043" +
    "\073\044\102\045\106\046\072\054\100\055\114\102\107" +
    "\103\112\104\101\001\002\000\034\006\113\020\077\023" +
    "\071\042\116\043\073\044\102\045\106\046\072\054\100" +
    "\055\114\102\107\103\112\104\101\001\002\000\056\004" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\013\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\033\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\071\uffc5\001\002\000\056\004\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\033" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\071\uffc8" +
    "\001\002\000\056\004\uffbc\007\uffbc\010\uffbc\011\uffbc\013" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\033\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\071\uffbc\001\002\000\042" +
    "\007\230\016\127\017\145\021\131\022\137\023\132\024" +
    "\136\025\142\026\135\027\133\033\144\035\143\036\141" +
    "\037\134\040\140\041\130\001\002\000\056\004\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\033\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\071\uffcb\001\002\000\034\006\113\020\077\023\071\042" +
    "\116\043\073\044\102\045\106\046\072\054\100\055\114" +
    "\102\107\103\112\104\101\001\002\000\056\004\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\013\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\033\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\071\uffc7\001\002\000\004\006\224\001\002\000\064\004" +
    "\uffca\006\177\007\uffca\010\uffca\011\uffca\012\175\013\uffca" +
    "\014\176\015\uffca\016\uffca\017\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\033\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\071\uffca\001\002\000" +
    "\056\004\uffcc\007\uffcc\010\uffcc\011\uffcc\013\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\033\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\071\uffcc\001\002\000\056\004\uffbf\007" +
    "\uffbf\010\uffbf\011\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\033\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\071\uffbf\001\002\000\004\004\174\001\002\000\056\004" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\013\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\033\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\071\uffc4\001\002\000\004\006\171\001\002\000" +
    "\056\004\uffbe\007\uffbe\010\uffbe\011\uffbe\013\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\033\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\071\uffbe\001\002\000\056\004\uffcd\007" +
    "\uffcd\010\uffcd\011\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\033\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\071\uffcd\001\002\000\004\006\166\001\002\000\046\006" +
    "\113\020\077\023\071\042\116\043\073\044\102\045\106" +
    "\046\072\047\015\050\011\051\056\052\005\053\025\054" +
    "\100\055\114\102\107\103\112\104\101\001\002\000\056" +
    "\004\uffc6\007\uffc6\010\uffc6\011\uffc6\013\uffc6\015\uffc6\016" +
    "\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\033\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\071\uffc6\001\002\000\056\004\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\013\uffbb\015\uffbb\016\uffbb\017\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb" +
    "\033\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\071" +
    "\uffbb\001\002\000\056\004\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\013\uffc9\015\uffc9\016\uffc9\017\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\033\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\071\uffc9\001\002\000" +
    "\056\004\uffbd\007\uffbd\010\uffbd\011\uffbd\013\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\033\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\071\uffbd\001\002\000\056\004\uffc1\007" +
    "\uffc1\010\uffc1\011\uffc1\013\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\033\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\071\uffc1\001\002\000\056\004\uffce\007\uffce\010\uffce\011" +
    "\uffce\013\uffce\015\uffce\016\uffce\017\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\033\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\071\uffce\001\002" +
    "\000\056\004\uffc0\007\uffc0\010\uffc0\011\uffc0\013\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\033\uffc0\035\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\071\uffc0\001\002\000\042\007\165" +
    "\016\127\017\145\021\131\022\137\023\132\024\136\025" +
    "\142\026\135\027\133\033\144\035\143\036\141\037\134" +
    "\040\140\041\130\001\002\000\004\007\125\001\002\000" +
    "\034\006\113\020\077\023\071\042\116\043\073\044\102" +
    "\045\106\046\072\054\100\055\114\102\107\103\112\104" +
    "\101\001\002\000\056\004\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\013\uffa9\015\uffa9\016\127\017\145\021\131\022\137\023" +
    "\132\024\136\025\142\026\135\027\133\033\144\035\143" +
    "\036\141\037\134\040\140\041\130\071\uffa9\001\002\000" +
    "\034\006\113\020\077\023\071\042\116\043\073\044\102" +
    "\045\106\046\072\054\100\055\114\102\107\103\112\104" +
    "\101\001\002\000\034\006\113\020\077\023\071\042\116" +
    "\043\073\044\102\045\106\046\072\054\100\055\114\102" +
    "\107\103\112\104\101\001\002\000\034\006\113\020\077" +
    "\023\071\042\116\043\073\044\102\045\106\046\072\054" +
    "\100\055\114\102\107\103\112\104\101\001\002\000\034" +
    "\006\113\020\077\023\071\042\116\043\073\044\102\045" +
    "\106\046\072\054\100\055\114\102\107\103\112\104\101" +
    "\001\002\000\034\006\113\020\077\023\071\042\116\043" +
    "\073\044\102\045\106\046\072\054\100\055\114\102\107" +
    "\103\112\104\101\001\002\000\034\006\113\020\077\023" +
    "\071\042\116\043\073\044\102\045\106\046\072\054\100" +
    "\055\114\102\107\103\112\104\101\001\002\000\034\006" +
    "\113\020\077\023\071\042\116\043\073\044\102\045\106" +
    "\046\072\054\100\055\114\102\107\103\112\104\101\001" +
    "\002\000\034\006\113\020\077\023\071\042\116\043\073" +
    "\044\102\045\106\046\072\054\100\055\114\102\107\103" +
    "\112\104\101\001\002\000\034\006\113\020\077\023\071" +
    "\042\116\043\073\044\102\045\106\046\072\054\100\055" +
    "\114\102\107\103\112\104\101\001\002\000\034\006\113" +
    "\020\077\023\071\042\116\043\073\044\102\045\106\046" +
    "\072\054\100\055\114\102\107\103\112\104\101\001\002" +
    "\000\034\006\113\020\077\023\071\042\116\043\073\044" +
    "\102\045\106\046\072\054\100\055\114\102\107\103\112" +
    "\104\101\001\002\000\034\006\113\020\077\023\071\042" +
    "\116\043\073\044\102\045\106\046\072\054\100\055\114" +
    "\102\107\103\112\104\101\001\002\000\034\006\113\020" +
    "\077\023\071\042\116\043\073\044\102\045\106\046\072" +
    "\054\100\055\114\102\107\103\112\104\101\001\002\000" +
    "\034\006\113\020\077\023\071\042\116\043\073\044\102" +
    "\045\106\046\072\054\100\055\114\102\107\103\112\104" +
    "\101\001\002\000\034\006\113\020\077\023\071\042\116" +
    "\043\073\044\102\045\106\046\072\054\100\055\114\102" +
    "\107\103\112\104\101\001\002\000\056\004\uffad\007\uffad" +
    "\010\uffad\011\uffad\013\uffad\015\uffad\016\127\017\uffad\021" +
    "\131\022\137\023\132\024\136\025\142\026\135\027\133" +
    "\033\144\035\143\036\141\037\134\040\140\041\130\071" +
    "\uffad\001\002\000\056\004\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\013\uffb2\015\uffb2\016\uffb2\017\uffb2\021\uffb2\022\137\023" +
    "\132\024\136\025\142\026\135\027\133\033\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\041\uffb2\071\uffb2\001\002\000" +
    "\056\004\uffb3\007\uffb3\010\uffb3\011\uffb3\013\uffb3\015\uffb3" +
    "\016\uffb3\017\uffb3\021\uffb3\022\137\023\132\024\136\025" +
    "\142\026\135\027\133\033\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\071\uffb3\001\002\000\056\004\uffb7\007" +
    "\uffb7\010\uffb7\011\uffb7\013\uffb7\015\uffb7\016\uffb7\017\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\133\033\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\071\uffb7\001\002\000\056\004\uffb1\007\uffb1\010\uffb1\011" +
    "\uffb1\013\uffb1\015\uffb1\016\uffb1\017\uffb1\021\uffb1\022\137" +
    "\023\132\024\136\025\142\026\135\027\133\033\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\071\uffb1\001\002" +
    "\000\056\004\uffaf\007\uffaf\010\uffaf\011\uffaf\013\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\021\uffaf\022\137\023\132\024\136" +
    "\025\142\026\135\027\133\033\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\071\uffaf\001\002\000\056\004\uffba" +
    "\007\uffba\010\uffba\011\uffba\013\uffba\015\uffba\016\uffba\017" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\136\025\142\026\135" +
    "\027\133\033\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\071\uffba\001\002\000\056\004\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\133\033\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\071\uffb8\001" +
    "\002\000\056\004\uffb6\007\uffb6\010\uffb6\011\uffb6\013\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\133\033\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\071\uffb6\001\002\000\056\004" +
    "\uffb0\007\uffb0\010\uffb0\011\uffb0\013\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\021\uffb0\022\137\023\132\024\136\025\142\026" +
    "\135\027\133\033\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\071\uffb0\001\002\000\056\004\uffb5\007\uffb5\010" +
    "\uffb5\011\uffb5\013\uffb5\015\uffb5\016\uffb5\017\uffb5\021\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\033" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\071\uffb5" +
    "\001\002\000\056\004\uffb9\007\uffb9\010\uffb9\011\uffb9\013" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\136\025\142\026\135\027\133\033\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\071\uffb9\001\002\000\056" +
    "\004\uffab\007\uffab\010\uffab\011\uffab\013\uffab\015\uffab\016" +
    "\uffab\017\uffab\021\uffab\022\137\023\132\024\136\025\142" +
    "\026\135\027\133\033\144\035\143\036\141\037\134\040" +
    "\140\041\130\071\uffab\001\002\000\056\004\uffae\007\uffae" +
    "\010\uffae\011\uffae\013\uffae\015\uffae\016\uffae\017\uffae\021" +
    "\uffae\022\137\023\132\024\136\025\142\026\135\027\133" +
    "\033\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\071" +
    "\uffae\001\002\000\056\004\uffac\007\uffac\010\uffac\011\uffac" +
    "\013\uffac\015\uffac\016\uffac\017\uffac\021\131\022\137\023" +
    "\132\024\136\025\142\026\135\027\133\033\144\035\143" +
    "\036\141\037\134\040\140\041\130\071\uffac\001\002\000" +
    "\056\004\uffc3\007\uffc3\010\uffc3\011\uffc3\013\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\033\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\071\uffc3\001\002\000\034\006\113\020" +
    "\077\023\071\042\116\043\073\044\102\045\106\046\072" +
    "\054\100\055\114\102\107\103\112\104\101\001\002\000" +
    "\042\007\170\016\127\017\145\021\131\022\137\023\132" +
    "\024\136\025\142\026\135\027\133\033\144\035\143\036" +
    "\141\037\134\040\140\041\130\001\002\000\056\004\uff80" +
    "\007\uff80\010\uff80\011\uff80\013\uff80\015\uff80\016\uff80\017" +
    "\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025\uff80\026\uff80" +
    "\027\uff80\033\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041" +
    "\uff80\071\uff80\001\002\000\034\006\113\020\077\023\071" +
    "\042\116\043\073\044\102\045\106\046\072\054\100\055" +
    "\114\102\107\103\112\104\101\001\002\000\042\007\173" +
    "\016\127\017\145\021\131\022\137\023\132\024\136\025" +
    "\142\026\135\027\133\033\144\035\143\036\141\037\134" +
    "\040\140\041\130\001\002\000\056\004\uff81\007\uff81\010" +
    "\uff81\011\uff81\013\uff81\015\uff81\016\uff81\017\uff81\021\uff81" +
    "\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\033" +
    "\uff81\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81\071\uff81" +
    "\001\002\000\056\004\uffc2\007\uffc2\010\uffc2\011\uffc2\013" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\033\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\071\uffc2\001\002\000\010" +
    "\044\213\076\215\105\214\001\002\000\034\006\113\020" +
    "\077\023\071\042\116\043\073\044\102\045\106\046\072" +
    "\054\100\055\114\102\107\103\112\104\101\001\002\000" +
    "\036\006\113\007\202\020\077\023\071\042\116\043\073" +
    "\044\102\045\106\046\072\054\100\055\114\102\107\103" +
    "\112\104\101\001\002\000\044\007\uff84\013\uff84\016\127" +
    "\017\145\021\131\022\137\023\132\024\136\025\142\026" +
    "\135\027\133\033\144\035\143\036\141\037\134\040\140" +
    "\041\130\001\002\000\006\007\204\013\203\001\002\000" +
    "\004\004\uff82\001\002\000\034\006\113\020\077\023\071" +
    "\042\116\043\073\044\102\045\106\046\072\054\100\055" +
    "\114\102\107\103\112\104\101\001\002\000\004\004\uff83" +
    "\001\002\000\044\007\uff85\013\uff85\016\127\017\145\021" +
    "\131\022\137\023\132\024\136\025\142\026\135\027\133" +
    "\033\144\035\143\036\141\037\134\040\140\041\130\001" +
    "\002\000\042\015\207\016\127\017\145\021\131\022\137" +
    "\023\132\024\136\025\142\026\135\027\133\033\144\035" +
    "\143\036\141\037\134\040\140\041\130\001\002\000\060" +
    "\004\uff9b\007\uff9b\010\uff9b\011\uff9b\013\uff9b\014\210\015" +
    "\uff9b\016\uff9b\017\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b" +
    "\025\uff9b\026\uff9b\027\uff9b\033\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\071\uff9b\001\002\000\034\006\113" +
    "\020\077\023\071\042\116\043\073\044\102\045\106\046" +
    "\072\054\100\055\114\102\107\103\112\104\101\001\002" +
    "\000\042\015\212\016\127\017\145\021\131\022\137\023" +
    "\132\024\136\025\142\026\135\027\133\033\144\035\143" +
    "\036\141\037\134\040\140\041\130\001\002\000\056\004" +
    "\uff9a\007\uff9a\010\uff9a\011\uff9a\013\uff9a\015\uff9a\016\uff9a" +
    "\017\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026" +
    "\uff9a\027\uff9a\033\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\071\uff9a\001\002\000\056\004\uff8c\007\uff8c\010" +
    "\uff8c\011\uff8c\013\uff8c\015\uff8c\016\uff8c\017\uff8c\021\uff8c" +
    "\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\033" +
    "\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\071\uff8c" +
    "\001\002\000\004\006\221\001\002\000\004\006\216\001" +
    "\002\000\034\006\113\020\077\023\071\042\116\043\073" +
    "\044\102\045\106\046\072\054\100\055\114\102\107\103" +
    "\112\104\101\001\002\000\042\007\220\016\127\017\145" +
    "\021\131\022\137\023\132\024\136\025\142\026\135\027" +
    "\133\033\144\035\143\036\141\037\134\040\140\041\130" +
    "\001\002\000\056\004\uff95\007\uff95\010\uff95\011\uff95\013" +
    "\uff95\015\uff95\016\uff95\017\uff95\021\uff95\022\uff95\023\uff95" +
    "\024\uff95\025\uff95\026\uff95\027\uff95\033\uff95\035\uff95\036" +
    "\uff95\037\uff95\040\uff95\041\uff95\071\uff95\001\002\000\034" +
    "\006\113\020\077\023\071\042\116\043\073\044\102\045" +
    "\106\046\072\054\100\055\114\102\107\103\112\104\101" +
    "\001\002\000\042\007\223\016\127\017\145\021\131\022" +
    "\137\023\132\024\136\025\142\026\135\027\133\033\144" +
    "\035\143\036\141\037\134\040\140\041\130\001\002\000" +
    "\056\004\uff7e\007\uff7e\010\uff7e\011\uff7e\013\uff7e\015\uff7e" +
    "\016\uff7e\017\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025" +
    "\uff7e\026\uff7e\027\uff7e\033\uff7e\035\uff7e\036\uff7e\037\uff7e" +
    "\040\uff7e\041\uff7e\071\uff7e\001\002\000\034\006\113\020" +
    "\077\023\071\042\116\043\073\044\102\045\106\046\072" +
    "\054\100\055\114\102\107\103\112\104\101\001\002\000" +
    "\042\007\226\016\127\017\145\021\131\022\137\023\132" +
    "\024\136\025\142\026\135\027\133\033\144\035\143\036" +
    "\141\037\134\040\140\041\130\001\002\000\056\004\uff7f" +
    "\007\uff7f\010\uff7f\011\uff7f\013\uff7f\015\uff7f\016\uff7f\017" +
    "\uff7f\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f" +
    "\027\uff7f\033\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041" +
    "\uff7f\071\uff7f\001\002\000\056\004\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\013\uffaa\015\uffaa\016\uffaa\017\uffaa\021\uffaa\022" +
    "\137\023\132\024\136\025\142\026\135\027\133\033\144" +
    "\035\143\036\141\037\134\040\140\041\130\071\uffaa\001" +
    "\002\000\004\004\uffd0\001\002\000\056\004\uffb4\007\uffb4" +
    "\010\uffb4\011\uffb4\013\uffb4\015\uffb4\016\uffb4\017\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\033\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\071" +
    "\uffb4\001\002\000\004\044\233\001\002\000\004\005\241" +
    "\001\002\000\006\010\uff92\044\uff92\001\002\000\006\010" +
    "\237\044\233\001\002\000\006\010\uff93\044\uff93\001\002" +
    "\000\004\044\240\001\002\000\004\004\uff94\001\002\000" +
    "\014\047\015\050\011\051\056\052\005\053\025\001\002" +
    "\000\004\004\243\001\002\000\006\010\uff91\044\uff91\001" +
    "\002\000\004\002\001\001\002\000\062\002\uffea\003\uffea" +
    "\010\uffea\044\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053" +
    "\uffea\056\uffea\057\uffea\060\uffea\062\uffea\063\uffea\064\uffea" +
    "\065\uffea\066\uffea\067\uffea\070\uffea\073\uffea\077\uffea\100" +
    "\uffea\101\uffea\106\uffea\001\002\000\014\047\015\050\011" +
    "\051\056\052\005\053\025\001\002\000\004\036\250\001" +
    "\002\000\004\044\251\001\002\000\004\034\252\001\002" +
    "\000\004\074\253\001\002\000\004\073\254\001\002\000" +
    "\004\006\255\001\002\000\004\007\256\001\002\000\004" +
    "\004\uff97\001\002\000\034\006\113\020\077\023\071\042" +
    "\116\043\073\044\102\045\106\046\072\054\100\055\114" +
    "\102\107\103\112\104\101\001\002\000\042\007\261\016" +
    "\127\017\145\021\131\022\137\023\132\024\136\025\142" +
    "\026\135\027\133\033\144\035\143\036\141\037\134\040" +
    "\140\041\130\001\002\000\004\011\262\001\002\000\056" +
    "\003\036\044\032\047\015\050\011\051\056\052\005\053" +
    "\025\056\061\057\006\060\030\062\020\063\052\064\017" +
    "\065\062\066\042\067\012\070\035\073\053\077\060\100" +
    "\043\101\016\106\051\001\002\000\060\003\036\010\264" +
    "\044\032\047\015\050\011\051\056\052\005\053\025\056" +
    "\061\057\006\060\030\062\020\063\052\064\017\065\062" +
    "\066\042\067\012\070\035\073\053\077\060\100\043\101" +
    "\016\106\051\001\002\000\062\002\uffd2\003\uffd2\010\uffd2" +
    "\044\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\056" +
    "\uffd2\057\uffd2\060\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2" +
    "\066\uffd2\067\uffd2\070\uffd2\073\uffd2\077\uffd2\100\uffd2\101" +
    "\uffd2\106\uffd2\001\002\000\004\006\266\001\002\000\036" +
    "\006\113\007\270\020\077\023\071\042\116\043\073\044" +
    "\102\045\106\046\072\054\100\055\114\102\107\103\112" +
    "\104\101\001\002\000\006\007\271\013\203\001\002\000" +
    "\004\004\uff7c\001\002\000\004\004\uff7d\001\002\000\062" +
    "\002\ufff4\003\ufff4\010\ufff4\044\ufff4\047\ufff4\050\ufff4\051" +
    "\ufff4\052\ufff4\053\ufff4\056\ufff4\057\ufff4\060\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\073" +
    "\ufff4\077\ufff4\100\ufff4\101\ufff4\106\ufff4\001\002\000\062" +
    "\002\ufff1\003\ufff1\010\ufff1\044\ufff1\047\ufff1\050\ufff1\051" +
    "\ufff1\052\ufff1\053\ufff1\056\ufff1\057\ufff1\060\ufff1\062\ufff1" +
    "\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\073" +
    "\ufff1\077\ufff1\100\ufff1\101\ufff1\106\ufff1\001\002\000\062" +
    "\002\ufff2\003\ufff2\010\ufff2\044\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\056\ufff2\057\ufff2\060\ufff2\062\ufff2" +
    "\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\073" +
    "\ufff2\077\ufff2\100\ufff2\101\ufff2\106\ufff2\001\002\000\004" +
    "\005\276\001\002\000\016\044\277\047\015\050\011\051" +
    "\056\052\005\053\025\001\002\000\004\034\331\001\002" +
    "\000\010\004\uffe3\014\301\034\302\001\002\000\004\015" +
    "\304\001\002\000\034\006\113\020\077\023\071\042\116" +
    "\043\073\044\102\045\106\046\072\054\100\055\114\102" +
    "\107\103\112\104\101\001\002\000\042\004\uffe4\016\127" +
    "\017\145\021\131\022\137\023\132\024\136\025\142\026" +
    "\135\027\133\033\144\035\143\036\141\037\134\040\140" +
    "\041\130\001\002\000\006\014\305\034\306\001\002\000" +
    "\004\015\315\001\002\000\004\014\307\001\002\000\034" +
    "\006\113\020\077\023\071\042\116\043\073\044\102\045" +
    "\106\046\072\054\100\055\114\102\107\103\112\104\101" +
    "\001\002\000\044\013\uff9e\015\uff9e\016\127\017\145\021" +
    "\131\022\137\023\132\024\136\025\142\026\135\027\133" +
    "\033\144\035\143\036\141\037\134\040\140\041\130\001" +
    "\002\000\006\013\312\015\313\001\002\000\034\006\113" +
    "\020\077\023\071\042\116\043\073\044\102\045\106\046" +
    "\072\054\100\055\114\102\107\103\112\104\101\001\002" +
    "\000\004\004\uffa1\001\002\000\044\013\uff9f\015\uff9f\016" +
    "\127\017\145\021\131\022\137\023\132\024\136\025\142" +
    "\026\135\027\133\033\144\035\143\036\141\037\134\040" +
    "\140\041\130\001\002\000\004\034\316\001\002\000\004" +
    "\014\317\001\002\000\004\014\321\001\002\000\006\013" +
    "\324\015\325\001\002\000\034\006\113\020\077\023\071" +
    "\042\116\043\073\044\102\045\106\046\072\054\100\055" +
    "\114\102\107\103\112\104\101\001\002\000\006\013\312" +
    "\015\323\001\002\000\006\013\uff9c\015\uff9c\001\002\000" +
    "\004\014\326\001\002\000\004\004\uffa0\001\002\000\034" +
    "\006\113\020\077\023\071\042\116\043\073\044\102\045" +
    "\106\046\072\054\100\055\114\102\107\103\112\104\101" +
    "\001\002\000\006\013\312\015\330\001\002\000\006\013" +
    "\uff9d\015\uff9d\001\002\000\004\011\332\001\002\000\004" +
    "\044\333\001\002\000\004\005\341\001\002\000\006\010" +
    "\337\013\336\001\002\000\006\010\uff8e\013\uff8e\001\002" +
    "\000\004\044\333\001\002\000\004\004\uff90\001\002\000" +
    "\006\010\uff8f\013\uff8f\001\002\000\034\006\113\020\077" +
    "\023\071\042\116\043\073\044\102\045\106\046\072\054" +
    "\100\055\114\102\107\103\112\104\101\001\002\000\044" +
    "\010\uff8d\013\uff8d\016\127\017\145\021\131\022\137\023" +
    "\132\024\136\025\142\026\135\027\133\033\144\035\143" +
    "\036\141\037\134\040\140\041\130\001\002\000\004\006" +
    "\344\001\002\000\016\007\346\047\015\050\011\051\056" +
    "\052\005\053\025\001\002\000\006\007\355\013\354\001" +
    "\002\000\004\011\351\001\002\000\004\044\350\001\002" +
    "\000\006\007\uff88\013\uff88\001\002\000\056\003\036\044" +
    "\032\047\015\050\011\051\056\052\005\053\025\056\061" +
    "\057\006\060\030\062\020\063\052\064\017\065\062\066" +
    "\042\067\012\070\035\073\053\077\060\100\043\101\016" +
    "\106\051\001\002\000\060\003\036\010\353\044\032\047" +
    "\015\050\011\051\056\052\005\053\025\056\061\057\006" +
    "\060\030\062\020\063\052\064\017\065\062\066\042\067" +
    "\012\070\035\073\053\077\060\100\043\101\016\106\051" +
    "\001\002\000\062\002\uff86\003\uff86\010\uff86\044\uff86\047" +
    "\uff86\050\uff86\051\uff86\052\uff86\053\uff86\056\uff86\057\uff86" +
    "\060\uff86\062\uff86\063\uff86\064\uff86\065\uff86\066\uff86\067" +
    "\uff86\070\uff86\073\uff86\077\uff86\100\uff86\101\uff86\106\uff86" +
    "\001\002\000\014\047\015\050\011\051\056\052\005\053" +
    "\025\001\002\000\004\011\356\001\002\000\056\003\036" +
    "\044\032\047\015\050\011\051\056\052\005\053\025\056" +
    "\061\057\006\060\030\062\020\063\052\064\017\065\062" +
    "\066\042\067\012\070\035\073\053\077\060\100\043\101" +
    "\016\106\051\001\002\000\060\003\036\010\360\044\032" +
    "\047\015\050\011\051\056\052\005\053\025\056\061\057" +
    "\006\060\030\062\020\063\052\064\017\065\062\066\042" +
    "\067\012\070\035\073\053\077\060\100\043\101\016\106" +
    "\051\001\002\000\062\002\uff87\003\uff87\010\uff87\044\uff87" +
    "\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87\056\uff87\057" +
    "\uff87\060\uff87\062\uff87\063\uff87\064\uff87\065\uff87\066\uff87" +
    "\067\uff87\070\uff87\073\uff87\077\uff87\100\uff87\101\uff87\106" +
    "\uff87\001\002\000\004\044\362\001\002\000\006\007\uff89" +
    "\013\uff89\001\002\000\062\002\uffe6\003\uffe6\010\uffe6\044" +
    "\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066" +
    "\uffe6\067\uffe6\070\uffe6\073\uffe6\077\uffe6\100\uffe6\101\uffe6" +
    "\106\uffe6\001\002\000\062\002\uffef\003\uffef\010\uffef\044" +
    "\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\056\uffef" +
    "\057\uffef\060\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066" +
    "\uffef\067\uffef\070\uffef\073\uffef\077\uffef\100\uffef\101\uffef" +
    "\106\uffef\001\002\000\062\002\ufffc\003\ufffc\010\ufffc\044" +
    "\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\056\ufffc" +
    "\057\ufffc\060\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066" +
    "\ufffc\067\ufffc\070\ufffc\073\ufffc\077\ufffc\100\ufffc\101\ufffc" +
    "\106\ufffc\001\002\000\062\002\uffe5\003\uffe5\010\uffe5\044" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\056\uffe5" +
    "\057\uffe5\060\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066" +
    "\uffe5\067\uffe5\070\uffe5\073\uffe5\077\uffe5\100\uffe5\101\uffe5" +
    "\106\uffe5\001\002\000\042\004\371\016\127\017\145\021" +
    "\131\022\137\023\132\024\136\025\142\026\135\027\133" +
    "\033\144\035\143\036\141\037\134\040\140\041\130\001" +
    "\002\000\062\002\uffe8\003\uffe8\010\uffe8\044\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\056\uffe8\057\uffe8\060" +
    "\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8" +
    "\070\uffe8\073\uffe8\077\uffe8\100\uffe8\101\uffe8\106\uffe8\001" +
    "\002\000\062\002\uffe9\003\uffe9\010\uffe9\044\uffe9\047\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\053\uffe9\056\uffe9\057\uffe9\060" +
    "\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9" +
    "\070\uffe9\073\uffe9\077\uffe9\100\uffe9\101\uffe9\106\uffe9\001" +
    "\002\000\004\006\373\001\002\000\014\047\015\050\011" +
    "\051\056\052\005\053\025\001\002\000\006\007\375\013" +
    "\354\001\002\000\004\011\376\001\002\000\056\003\036" +
    "\044\032\047\015\050\011\051\056\052\005\053\025\056" +
    "\061\057\006\060\030\062\020\063\052\064\017\065\062" +
    "\066\042\067\012\070\035\073\053\077\060\100\043\101" +
    "\016\106\051\001\002\000\060\003\036\010\u0100\044\032" +
    "\047\015\050\011\051\056\052\005\053\025\056\061\057" +
    "\006\060\030\062\020\063\052\064\017\065\062\066\042" +
    "\067\012\070\035\073\053\077\060\100\043\101\016\106" +
    "\051\001\002\000\062\002\uff8a\003\uff8a\010\uff8a\044\uff8a" +
    "\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\056\uff8a\057" +
    "\uff8a\060\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a" +
    "\067\uff8a\070\uff8a\073\uff8a\077\uff8a\100\uff8a\101\uff8a\106" +
    "\uff8a\001\002\000\006\044\u0110\075\u0111\001\002\000\034" +
    "\006\113\020\077\023\071\042\116\043\073\044\102\045" +
    "\106\046\072\054\100\055\114\102\107\103\112\104\101" +
    "\001\002\000\034\006\113\020\077\023\071\042\116\043" +
    "\073\044\102\045\106\046\072\054\100\055\114\102\107" +
    "\103\112\104\101\001\002\000\006\004\uffa8\007\uffa8\001" +
    "\002\000\006\004\uffa7\007\uffa7\001\002\000\042\004\uffe0" +
    "\016\127\017\145\021\131\022\137\023\132\024\136\025" +
    "\142\026\135\027\133\033\144\035\143\036\141\037\134" +
    "\040\140\041\130\001\002\000\042\015\u0108\016\127\017" +
    "\145\021\131\022\137\023\132\024\136\025\142\026\135" +
    "\027\133\033\144\035\143\036\141\037\134\040\140\041" +
    "\130\001\002\000\006\014\u0109\034\u010a\001\002\000\034" +
    "\006\113\020\077\023\071\042\116\043\073\044\102\045" +
    "\106\046\072\054\100\055\114\102\107\103\112\104\101" +
    "\001\002\000\034\006\113\020\077\023\071\042\116\043" +
    "\073\044\102\045\106\046\072\054\100\055\114\102\107" +
    "\103\112\104\101\001\002\000\042\004\uff99\016\127\017" +
    "\145\021\131\022\137\023\132\024\136\025\142\026\135" +
    "\027\133\033\144\035\143\036\141\037\134\040\140\041" +
    "\130\001\002\000\042\015\u010d\016\127\017\145\021\131" +
    "\022\137\023\132\024\136\025\142\026\135\027\133\033" +
    "\144\035\143\036\141\037\134\040\140\041\130\001\002" +
    "\000\004\034\u010e\001\002\000\034\006\113\020\077\023" +
    "\071\042\116\043\073\044\102\045\106\046\072\054\100" +
    "\055\114\102\107\103\112\104\101\001\002\000\042\004" +
    "\uff98\016\127\017\145\021\131\022\137\023\132\024\136" +
    "\025\142\026\135\027\133\033\144\035\143\036\141\037" +
    "\134\040\140\041\130\001\002\000\004\034\u0115\001\002" +
    "\000\004\006\u0112\001\002\000\034\006\113\020\077\023" +
    "\071\042\116\043\073\044\102\045\106\046\072\054\100" +
    "\055\114\102\107\103\112\104\101\001\002\000\042\007" +
    "\u0114\016\127\017\145\021\131\022\137\023\132\024\136" +
    "\025\142\026\135\027\133\033\144\035\143\036\141\037" +
    "\134\040\140\041\130\001\002\000\004\004\uff96\001\002" +
    "\000\034\006\113\020\077\023\071\042\116\043\073\044" +
    "\102\045\106\046\072\054\100\055\114\102\107\103\112" +
    "\104\101\001\002\000\042\004\uff8b\016\127\017\145\021" +
    "\131\022\137\023\132\024\136\025\142\026\135\027\133" +
    "\033\144\035\143\036\141\037\134\040\140\041\130\001" +
    "\002\000\034\006\113\020\077\023\071\042\116\043\073" +
    "\044\102\045\106\046\072\054\100\055\114\102\107\103" +
    "\112\104\101\001\002\000\042\007\u0119\016\127\017\145" +
    "\021\131\022\137\023\132\024\136\025\142\026\135\027" +
    "\133\033\144\035\143\036\141\037\134\040\140\041\130" +
    "\001\002\000\004\011\u011a\001\002\000\056\003\036\044" +
    "\032\047\015\050\011\051\056\052\005\053\025\056\061" +
    "\057\006\060\030\062\020\063\052\064\017\065\062\066" +
    "\042\067\012\070\035\073\053\077\060\100\043\101\016" +
    "\106\051\001\002\000\060\003\036\010\u011c\044\032\047" +
    "\015\050\011\051\056\052\005\053\025\056\061\057\006" +
    "\060\030\062\020\063\052\064\017\065\062\066\042\067" +
    "\012\070\035\073\053\077\060\100\043\101\016\106\051" +
    "\001\002\000\064\002\uffdd\003\uffdd\010\uffdd\044\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\056\uffdd\057\uffdd" +
    "\060\uffdd\061\u011d\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066" +
    "\uffdd\067\uffdd\070\uffdd\073\uffdd\077\uffdd\100\uffdd\101\uffdd" +
    "\106\uffdd\001\002\000\006\011\u011e\060\030\001\002\000" +
    "\056\003\036\044\032\047\015\050\011\051\056\052\005" +
    "\053\025\056\061\057\006\060\030\062\020\063\052\064" +
    "\017\065\062\066\042\067\012\070\035\073\053\077\060" +
    "\100\043\101\016\106\051\001\002\000\062\002\uffdf\003" +
    "\uffdf\010\uffdf\044\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf" +
    "\053\uffdf\056\uffdf\057\uffdf\060\uffdf\062\uffdf\063\uffdf\064" +
    "\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\073\uffdf\077\uffdf" +
    "\100\uffdf\101\uffdf\106\uffdf\001\002\000\060\003\036\010" +
    "\u0121\044\032\047\015\050\011\051\056\052\005\053\025" +
    "\056\061\057\006\060\030\062\020\063\052\064\017\065" +
    "\062\066\042\067\012\070\035\073\053\077\060\100\043" +
    "\101\016\106\051\001\002\000\062\002\uffde\003\uffde\010" +
    "\uffde\044\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde" +
    "\056\uffde\057\uffde\060\uffde\062\uffde\063\uffde\064\uffde\065" +
    "\uffde\066\uffde\067\uffde\070\uffde\073\uffde\077\uffde\100\uffde" +
    "\101\uffde\106\uffde\001\002\000\062\002\ufffd\003\ufffd\010" +
    "\ufffd\044\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\056\ufffd\057\ufffd\060\ufffd\062\ufffd\063\ufffd\064\ufffd\065" +
    "\ufffd\066\ufffd\067\ufffd\070\ufffd\073\ufffd\077\ufffd\100\ufffd" +
    "\101\ufffd\106\ufffd\001\002\000\062\002\ufff6\003\ufff6\010" +
    "\ufff6\044\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6" +
    "\056\ufff6\057\ufff6\060\ufff6\062\ufff6\063\ufff6\064\ufff6\065" +
    "\ufff6\066\ufff6\067\ufff6\070\ufff6\073\ufff6\077\ufff6\100\ufff6" +
    "\101\ufff6\106\ufff6\001\002\000\062\002\uffeb\003\uffeb\010" +
    "\uffeb\044\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb" +
    "\056\uffeb\057\uffeb\060\uffeb\062\uffeb\063\uffeb\064\uffeb\065" +
    "\uffeb\066\uffeb\067\uffeb\070\uffeb\073\uffeb\077\uffeb\100\uffeb" +
    "\101\uffeb\106\uffeb\001\002\000\062\002\ufff0\003\ufff0\010" +
    "\ufff0\044\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\056\ufff0\057\ufff0\060\ufff0\062\ufff0\063\ufff0\064\ufff0\065" +
    "\ufff0\066\ufff0\067\ufff0\070\ufff0\073\ufff0\077\ufff0\100\ufff0" +
    "\101\ufff0\106\ufff0\001\002\000\042\011\u0127\016\127\017" +
    "\145\021\131\022\137\023\132\024\136\025\142\026\135" +
    "\027\133\033\144\035\143\036\141\037\134\040\140\041" +
    "\130\001\002\000\040\006\113\010\u012c\020\077\023\071" +
    "\042\116\043\073\044\102\045\106\046\072\054\100\055" +
    "\114\072\u012f\102\107\103\112\104\101\001\002\000\062" +
    "\002\uffdc\003\uffdc\010\uffdc\044\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\056\uffdc\057\uffdc\060\uffdc\062\uffdc" +
    "\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\073" +
    "\uffdc\077\uffdc\100\uffdc\101\uffdc\106\uffdc\001\002\000\040" +
    "\006\113\010\uffd8\020\077\023\071\042\116\043\073\044" +
    "\102\045\106\046\072\054\100\055\114\072\u012f\102\107" +
    "\103\112\104\101\001\002\000\042\016\127\017\145\021" +
    "\131\022\137\023\132\024\136\025\142\026\135\027\133" +
    "\033\144\035\143\036\141\037\134\040\140\041\130\071" +
    "\u0135\001\002\000\040\006\uffd5\010\uffd5\020\uffd5\023\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\054\uffd5\055" +
    "\uffd5\072\uffd5\102\uffd5\103\uffd5\104\uffd5\001\002\000\062" +
    "\002\uffda\003\uffda\010\uffda\044\uffda\047\uffda\050\uffda\051" +
    "\uffda\052\uffda\053\uffda\056\uffda\057\uffda\060\uffda\062\uffda" +
    "\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda\073" +
    "\uffda\077\uffda\100\uffda\101\uffda\106\uffda\001\002\000\004" +
    "\010\u0134\001\002\000\004\010\uffd7\001\002\000\004\071" +
    "\u0130\001\002\000\004\011\u0131\001\002\000\056\003\036" +
    "\044\032\047\015\050\011\051\056\052\005\053\025\056" +
    "\061\057\006\060\030\062\020\063\052\064\017\065\062" +
    "\066\042\067\012\070\035\073\053\077\060\100\043\101" +
    "\016\106\051\001\002\000\060\003\036\010\u0133\044\032" +
    "\047\015\050\011\051\056\052\005\053\025\056\061\057" +
    "\006\060\030\062\020\063\052\064\017\065\062\066\042" +
    "\067\012\070\035\073\053\077\060\100\043\101\016\106" +
    "\051\001\002\000\004\010\uffd3\001\002\000\062\002\uffdb" +
    "\003\uffdb\010\uffdb\044\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\056\uffdb\057\uffdb\060\uffdb\062\uffdb\063\uffdb" +
    "\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\073\uffdb\077" +
    "\uffdb\100\uffdb\101\uffdb\106\uffdb\001\002\000\004\011\u0136" +
    "\001\002\000\056\003\036\044\032\047\015\050\011\051" +
    "\056\052\005\053\025\056\061\057\006\060\030\062\020" +
    "\063\052\064\017\065\062\066\042\067\012\070\035\073" +
    "\053\077\060\100\043\101\016\106\051\001\002\000\060" +
    "\003\036\010\u0138\044\032\047\015\050\011\051\056\052" +
    "\005\053\025\056\061\057\006\060\030\062\020\063\052" +
    "\064\017\065\062\066\042\067\012\070\035\073\053\077" +
    "\060\100\043\101\016\106\051\001\002\000\040\006\uffd4" +
    "\010\uffd4\020\uffd4\023\uffd4\042\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\046\uffd4\054\uffd4\055\uffd4\072\uffd4\102\uffd4\103\uffd4" +
    "\104\uffd4\001\002\000\040\006\uffd6\010\uffd6\020\uffd6\023" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\054\uffd6" +
    "\055\uffd6\072\uffd6\102\uffd6\103\uffd6\104\uffd6\001\002\000" +
    "\004\010\uffd9\001\002\000\004\044\u013c\001\002\000\004" +
    "\034\u0103\001\002\000\004\004\u013e\001\002\000\034\006" +
    "\113\020\077\023\071\042\116\043\073\044\102\045\106" +
    "\046\072\054\100\055\114\102\107\103\112\104\101\001" +
    "\002\000\042\004\u0140\016\127\017\145\021\131\022\137" +
    "\023\132\024\136\025\142\026\135\027\133\033\144\035" +
    "\143\036\141\037\134\040\140\041\130\001\002\000\004" +
    "\044\u0141\001\002\000\006\031\u0104\032\u0105\001\002\000" +
    "\004\007\u0143\001\002\000\004\011\u0144\001\002\000\056" +
    "\003\036\044\032\047\015\050\011\051\056\052\005\053" +
    "\025\056\061\057\006\060\030\062\020\063\052\064\017" +
    "\065\062\066\042\067\012\070\035\073\053\077\060\100" +
    "\043\101\016\106\051\001\002\000\060\003\036\010\u0146" +
    "\044\032\047\015\050\011\051\056\052\005\053\025\056" +
    "\061\057\006\060\030\062\020\063\052\064\017\065\062" +
    "\066\042\067\012\070\035\073\053\077\060\100\043\101" +
    "\016\106\051\001\002\000\062\002\uffd1\003\uffd1\010\uffd1" +
    "\044\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1" +
    "\066\uffd1\067\uffd1\070\uffd1\073\uffd1\077\uffd1\100\uffd1\101" +
    "\uffd1\106\uffd1\001\002\000\034\006\113\020\077\023\071" +
    "\042\116\043\073\044\102\045\106\046\072\054\100\055" +
    "\114\102\107\103\112\104\101\001\002\000\042\007\u0149" +
    "\016\127\017\145\021\131\022\137\023\132\024\136\025" +
    "\142\026\135\027\133\033\144\035\143\036\141\037\134" +
    "\040\140\041\130\001\002\000\004\004\u014a\001\002\000" +
    "\062\002\uffcf\003\uffcf\010\uffcf\044\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\056\uffcf\057\uffcf\060\uffcf\062" +
    "\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf" +
    "\073\uffcf\077\uffcf\100\uffcf\101\uffcf\106\uffcf\001\002\000" +
    "\062\002\ufff3\003\ufff3\010\ufff3\044\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\052\ufff3\053\ufff3\056\ufff3\057\ufff3\060\ufff3\062" +
    "\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3" +
    "\073\ufff3\077\ufff3\100\ufff3\101\ufff3\106\ufff3\001\002\000" +
    "\062\002\uffee\003\uffee\010\uffee\044\uffee\047\uffee\050\uffee" +
    "\051\uffee\052\uffee\053\uffee\056\uffee\057\uffee\060\uffee\062" +
    "\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee" +
    "\073\uffee\077\uffee\100\uffee\101\uffee\106\uffee\001\002\000" +
    "\062\002\uffe7\003\uffe7\010\uffe7\044\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\056\uffe7\057\uffe7\060\uffe7\062" +
    "\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7" +
    "\073\uffe7\077\uffe7\100\uffe7\101\uffe7\106\uffe7\001\002\000" +
    "\062\002\ufff7\003\ufff7\010\ufff7\044\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\056\ufff7\057\ufff7\060\ufff7\062" +
    "\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7" +
    "\073\ufff7\077\ufff7\100\ufff7\101\ufff7\106\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014c\000\064\002\054\003\007\004\032\005\006\007" +
    "\033\010\026\011\036\012\022\013\025\021\056\022\030" +
    "\023\003\024\043\031\023\032\047\036\013\037\045\040" +
    "\046\042\020\045\037\051\012\052\044\054\040\055\021" +
    "\063\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\004\064\005\006" +
    "\007\033\010\026\011\036\012\022\013\025\021\056\022" +
    "\030\023\003\024\043\031\023\032\047\036\013\037\045" +
    "\040\046\042\020\045\037\051\012\052\044\054\040\055" +
    "\021\063\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\u0125\025\120" +
    "\026\110\027\102\030\075\035\117\041\121\050\103\055" +
    "\104\057\116\060\073\061\114\062\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\366\025\120" +
    "\026\110\027\102\030\075\035\117\041\121\050\103\055" +
    "\104\057\116\060\073\061\114\062\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\063\004\032\005\006\007" +
    "\033\010\026\011\036\012\022\013\025\021\056\022\030" +
    "\023\003\024\043\031\023\032\047\036\013\037\045\040" +
    "\046\042\020\045\037\051\012\052\044\054\040\055\021" +
    "\063\053\001\001\000\060\004\064\005\006\007\033\010" +
    "\026\011\036\012\022\013\025\021\056\022\030\023\003" +
    "\024\043\031\023\032\047\036\013\037\045\040\046\042" +
    "\020\045\037\051\012\052\044\054\040\055\021\063\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\074\025\120\026\110\027\102\030\075" +
    "\035\117\041\121\050\103\055\104\057\116\060\073\061" +
    "\114\062\107\001\001\000\034\006\230\025\120\026\110" +
    "\027\102\030\075\035\117\041\121\050\103\055\104\057" +
    "\116\060\073\061\114\062\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\226\025\120\026\110\027\102" +
    "\030\075\035\117\041\121\050\103\055\104\057\116\060" +
    "\073\061\114\062\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\006\122\007\123\025\120\026\110\027\102\030\075" +
    "\035\117\041\121\050\103\055\104\057\116\060\073\061" +
    "\114\062\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\125\025\120\026\110\027\102\030" +
    "\075\035\117\041\121\050\103\055\104\057\116\060\073" +
    "\061\114\062\107\001\001\000\002\001\001\000\034\006" +
    "\163\025\120\026\110\027\102\030\075\035\117\041\121" +
    "\050\103\055\104\057\116\060\073\061\114\062\107\001" +
    "\001\000\034\006\162\025\120\026\110\027\102\030\075" +
    "\035\117\041\121\050\103\055\104\057\116\060\073\061" +
    "\114\062\107\001\001\000\034\006\161\025\120\026\110" +
    "\027\102\030\075\035\117\041\121\050\103\055\104\057" +
    "\116\060\073\061\114\062\107\001\001\000\034\006\160" +
    "\025\120\026\110\027\102\030\075\035\117\041\121\050" +
    "\103\055\104\057\116\060\073\061\114\062\107\001\001" +
    "\000\034\006\157\025\120\026\110\027\102\030\075\035" +
    "\117\041\121\050\103\055\104\057\116\060\073\061\114" +
    "\062\107\001\001\000\034\006\156\025\120\026\110\027" +
    "\102\030\075\035\117\041\121\050\103\055\104\057\116" +
    "\060\073\061\114\062\107\001\001\000\034\006\155\025" +
    "\120\026\110\027\102\030\075\035\117\041\121\050\103" +
    "\055\104\057\116\060\073\061\114\062\107\001\001\000" +
    "\034\006\154\025\120\026\110\027\102\030\075\035\117" +
    "\041\121\050\103\055\104\057\116\060\073\061\114\062" +
    "\107\001\001\000\034\006\153\025\120\026\110\027\102" +
    "\030\075\035\117\041\121\050\103\055\104\057\116\060" +
    "\073\061\114\062\107\001\001\000\034\006\152\025\120" +
    "\026\110\027\102\030\075\035\117\041\121\050\103\055" +
    "\104\057\116\060\073\061\114\062\107\001\001\000\034" +
    "\006\151\025\120\026\110\027\102\030\075\035\117\041" +
    "\121\050\103\055\104\057\116\060\073\061\114\062\107" +
    "\001\001\000\034\006\150\025\120\026\110\027\102\030" +
    "\075\035\117\041\121\050\103\055\104\057\116\060\073" +
    "\061\114\062\107\001\001\000\034\006\147\025\120\026" +
    "\110\027\102\030\075\035\117\041\121\050\103\055\104" +
    "\057\116\060\073\061\114\062\107\001\001\000\034\006" +
    "\146\025\120\026\110\027\102\030\075\035\117\041\121" +
    "\050\103\055\104\057\116\060\073\061\114\062\107\001" +
    "\001\000\034\006\145\025\120\026\110\027\102\030\075" +
    "\035\117\041\121\050\103\055\104\057\116\060\073\061" +
    "\114\062\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\166\025\120\026\110\027" +
    "\102\030\075\035\117\041\121\050\103\055\104\057\116" +
    "\060\073\061\114\062\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\171\025\120\026\110\027\102" +
    "\030\075\035\117\041\121\050\103\055\104\057\116\060" +
    "\073\061\114\062\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\205\025\120\026\110\027\102\030\075\035\117\041\121" +
    "\050\103\055\104\057\116\060\073\061\114\062\107\001" +
    "\001\000\036\006\177\025\120\026\110\027\102\030\075" +
    "\035\117\041\121\050\103\053\200\055\104\057\116\060" +
    "\073\061\114\062\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\006\204\025\120\026" +
    "\110\027\102\030\075\035\117\041\121\050\103\055\104" +
    "\057\116\060\073\061\114\062\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\210\025\120\026\110\027\102\030\075\035" +
    "\117\041\121\050\103\055\104\057\116\060\073\061\114" +
    "\062\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\216\025\120\026\110\027\102\030\075\035\117\041" +
    "\121\050\103\055\104\057\116\060\073\061\114\062\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\221\025\120\026\110\027\102\030\075\035\117\041\121" +
    "\050\103\055\104\057\116\060\073\061\114\062\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\006\224" +
    "\025\120\026\110\027\102\030\075\035\117\041\121\050" +
    "\103\055\104\057\116\060\073\061\114\062\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\234\044\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\257\025\120\026\110\027\102\030\075\035\117\041\121" +
    "\050\103\055\104\057\116\060\073\061\114\062\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\262" +
    "\004\032\005\006\007\033\010\026\011\036\012\022\013" +
    "\025\021\056\022\030\023\003\024\043\031\023\032\047" +
    "\036\013\037\045\040\046\042\020\045\037\051\012\052" +
    "\044\054\040\055\021\063\053\001\001\000\060\004\064" +
    "\005\006\007\033\010\026\011\036\012\022\013\025\021" +
    "\056\022\030\023\003\024\043\031\023\032\047\036\013" +
    "\037\045\040\046\042\020\045\037\051\012\052\044\054" +
    "\040\055\021\063\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\006\177\025\120\026\110\027\102\030" +
    "\075\035\117\041\121\050\103\053\266\055\104\057\116" +
    "\060\073\061\114\062\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\302\025\120\026\110\027\102\030" +
    "\075\035\117\041\121\050\103\055\104\057\116\060\073" +
    "\061\114\062\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\006\307" +
    "\025\120\026\110\027\102\030\075\033\310\035\117\041" +
    "\121\050\103\055\104\057\116\060\073\061\114\062\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\313\025\120\026\110\027\102\030\075\035\117\041\121" +
    "\050\103\055\104\057\116\060\073\061\114\062\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\317\001\001\000\002\001" +
    "\001\000\036\006\307\025\120\026\110\027\102\030\075" +
    "\033\321\035\117\041\121\050\103\055\104\057\116\060" +
    "\073\061\114\062\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\006" +
    "\307\025\120\026\110\027\102\030\075\033\326\035\117" +
    "\041\121\050\103\055\104\057\116\060\073\061\114\062" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\046\333\047\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\341\025\120\026\110\027\102\030\075\035\117\041\121" +
    "\050\103\055\104\057\116\060\073\061\114\062\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\346" +
    "\056\344\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\003\351\004\032" +
    "\005\006\007\033\010\026\011\036\012\022\013\025\021" +
    "\056\022\030\023\003\024\043\031\023\032\047\036\013" +
    "\037\045\040\046\042\020\045\037\051\012\052\044\054" +
    "\040\055\021\063\053\001\001\000\060\004\064\005\006" +
    "\007\033\010\026\011\036\012\022\013\025\021\056\022" +
    "\030\023\003\024\043\031\023\032\047\036\013\037\045" +
    "\040\046\042\020\045\037\051\012\052\044\054\040\055" +
    "\021\063\053\001\001\000\002\001\001\000\004\007\360" +
    "\001\001\000\002\001\001\000\062\003\356\004\032\005" +
    "\006\007\033\010\026\011\036\012\022\013\025\021\056" +
    "\022\030\023\003\024\043\031\023\032\047\036\013\037" +
    "\045\040\046\042\020\045\037\051\012\052\044\054\040" +
    "\055\021\063\053\001\001\000\060\004\064\005\006\007" +
    "\033\010\026\011\036\012\022\013\025\021\056\022\030" +
    "\023\003\024\043\031\023\032\047\036\013\037\045\040" +
    "\046\042\020\045\037\051\012\052\044\054\040\055\021" +
    "\063\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\346" +
    "\056\373\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\376\004\032\005\006\007\033\010\026\011\036" +
    "\012\022\013\025\021\056\022\030\023\003\024\043\031" +
    "\023\032\047\036\013\037\045\040\046\042\020\045\037" +
    "\051\012\052\044\054\040\055\021\063\053\001\001\000" +
    "\060\004\064\005\006\007\033\010\026\011\036\012\022" +
    "\013\025\021\056\022\030\023\003\024\043\031\023\032" +
    "\047\036\013\037\045\040\046\042\020\045\037\051\012" +
    "\052\044\054\040\055\021\063\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\u0106\025\120\026\110" +
    "\027\102\030\075\035\117\041\121\050\103\055\104\057" +
    "\116\060\073\061\114\062\107\001\001\000\034\006\u0105" +
    "\025\120\026\110\027\102\030\075\035\117\041\121\050" +
    "\103\055\104\057\116\060\073\061\114\062\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\u010b\025\120" +
    "\026\110\027\102\030\075\035\117\041\121\050\103\055" +
    "\104\057\116\060\073\061\114\062\107\001\001\000\034" +
    "\006\u010a\025\120\026\110\027\102\030\075\035\117\041" +
    "\121\050\103\055\104\057\116\060\073\061\114\062\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\006\u010e\025\120\026\110\027\102\030\075" +
    "\035\117\041\121\050\103\055\104\057\116\060\073\061" +
    "\114\062\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\u0112\025\120\026\110\027" +
    "\102\030\075\035\117\041\121\050\103\055\104\057\116" +
    "\060\073\061\114\062\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\u0115\025\120\026\110\027\102" +
    "\030\075\035\117\041\121\050\103\055\104\057\116\060" +
    "\073\061\114\062\107\001\001\000\002\001\001\000\034" +
    "\006\u0117\025\120\026\110\027\102\030\075\035\117\041" +
    "\121\050\103\055\104\057\116\060\073\061\114\062\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\u011a\004\032\005\006\007\033\010\026\011\036\012\022" +
    "\013\025\021\056\022\030\023\003\024\043\031\023\032" +
    "\047\036\013\037\045\040\046\042\020\045\037\051\012" +
    "\052\044\054\040\055\021\063\053\001\001\000\060\004" +
    "\064\005\006\007\033\010\026\011\036\012\022\013\025" +
    "\021\056\022\030\023\003\024\043\031\023\032\047\036" +
    "\013\037\045\040\046\042\020\045\037\051\012\052\044" +
    "\054\040\055\021\063\053\001\001\000\002\001\001\000" +
    "\004\012\u011e\001\001\000\062\003\u011f\004\032\005\006" +
    "\007\033\010\026\011\036\012\022\013\025\021\056\022" +
    "\030\023\003\024\043\031\023\032\047\036\013\037\045" +
    "\040\046\042\020\045\037\051\012\052\044\054\040\055" +
    "\021\063\053\001\001\000\002\001\001\000\060\004\064" +
    "\005\006\007\033\010\026\011\036\012\022\013\025\021" +
    "\056\022\030\023\003\024\043\031\023\032\047\036\013" +
    "\037\045\040\046\042\020\045\037\051\012\052\044\054" +
    "\040\055\021\063\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u0127\001\001\000\044\006\u0129\015\u012c" +
    "\016\u0128\017\u012a\020\u012d\025\120\026\110\027\102\030" +
    "\075\035\117\041\121\050\103\055\104\057\116\060\073" +
    "\061\114\062\107\001\001\000\002\001\001\000\040\006" +
    "\u0129\017\u0138\020\u0139\025\120\026\110\027\102\030\075" +
    "\035\117\041\121\050\103\055\104\057\116\060\073\061" +
    "\114\062\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\003\u0131\004\032" +
    "\005\006\007\033\010\026\011\036\012\022\013\025\021" +
    "\056\022\030\023\003\024\043\031\023\032\047\036\013" +
    "\037\045\040\046\042\020\045\037\051\012\052\044\054" +
    "\040\055\021\063\053\001\001\000\060\004\064\005\006" +
    "\007\033\010\026\011\036\012\022\013\025\021\056\022" +
    "\030\023\003\024\043\031\023\032\047\036\013\037\045" +
    "\040\046\042\020\045\037\051\012\052\044\054\040\055" +
    "\021\063\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\u0136\004\032\005\006\007" +
    "\033\010\026\011\036\012\022\013\025\021\056\022\030" +
    "\023\003\024\043\031\023\032\047\036\013\037\045\040" +
    "\046\042\020\045\037\051\012\052\044\054\040\055\021" +
    "\063\053\001\001\000\060\004\064\005\006\007\033\010" +
    "\026\011\036\012\022\013\025\021\056\022\030\023\003" +
    "\024\043\031\023\032\047\036\013\037\045\040\046\042" +
    "\020\045\037\051\012\052\044\054\040\055\021\063\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\u013c\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\u013e\025\120\026\110\027\102\030" +
    "\075\035\117\041\121\050\103\055\104\057\116\060\073" +
    "\061\114\062\107\001\001\000\002\001\001\000\004\031" +
    "\u0141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u0144\004\032\005\006\007\033\010" +
    "\026\011\036\012\022\013\025\021\056\022\030\023\003" +
    "\024\043\031\023\032\047\036\013\037\045\040\046\042" +
    "\020\045\037\051\012\052\044\054\040\055\021\063\053" +
    "\001\001\000\060\004\064\005\006\007\033\010\026\011" +
    "\036\012\022\013\025\021\056\022\030\023\003\024\043" +
    "\031\023\032\047\036\013\037\045\040\046\042\020\045" +
    "\037\051\012\052\044\054\040\055\021\063\053\001\001" +
    "\000\002\001\001\000\034\006\u0147\025\120\026\110\027" +
    "\102\030\075\035\117\041\121\050\103\055\104\057\116" +
    "\060\073\061\114\062\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

    //clases, objetos, variables, listas, etc.


    // salida consola
    public List<String> salidas = new ArrayList<String>();

    // errores
    public ArrayList<Excepcion> Errores = new ArrayList();

    // Método al que se llama automáticamente ante algún error sintáctico.
    public void syntax_error(Symbol s){ 
        Errores.add(new Excepcion("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left, s.right));
        } 

    // Método al que se llama automáticamente ante algún error sintáctico, en el que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sintactico irrecuperable en la Linea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }

    public ArrayList<Excepcion> getErrores(){
        return Errores;
    }

    //========================




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= declaracion_id PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= asignacion_id PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= sentencia_match 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= sentencia_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= sentencia_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= sentencia_do_while PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= inc_dec PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= imprimir 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= declaracion_vector PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= asignacion_vl PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= declaracion_listas PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= append PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= struct PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= instanciar_struct PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= asignacion_struct PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= funcion 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= metodo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= llamada PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= start_with PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= RETURN expresion PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= RETURN PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= CONTINUE PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= BREAK PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Break(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= error PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_id ::= mutabilidad ID DOS_PT tipo_datos IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(a,b,c,d,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_id",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_id ::= mutabilidad ID DOS_PT tipo_datos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(a,b,c,null,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_id",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mutabilidad ::= VAR 
            {
              String RESULT =null;
		 RESULT = "var"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mutabilidad",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mutabilidad ::= CONST 
            {
              String RESULT =null;
		 RESULT = "const"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mutabilidad",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // asignacion_id ::= ID IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AsignacionVariables(a,b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_id",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia_if ::= IF PAR_IZQ expresion PAR_DER LLAV_IZQ instrucciones LLAV_DER ELSE sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new SentenciaIfElseIf(a,b,c,null,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_if",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia_if ::= IF PAR_IZQ expresion PAR_DER LLAV_IZQ instrucciones LLAV_DER ELSE LLAV_IZQ instrucciones LLAV_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new SentenciaIfElse(a,b,c,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_if",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia_if ::= IF PAR_IZQ expresion PAR_DER LLAV_IZQ instrucciones LLAV_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new SentenciaIf(a,b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_if",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia_match ::= MATCH expresion entornos 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_match",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // entornos ::= LLAV_IZQ cases_default LLAV_DER 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entornos",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // entornos ::= LLAV_IZQ LLAV_DER 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entornos",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cases_default ::= cases default 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases_default",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cases_default ::= cases 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases_default",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cases_default ::= default 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases_default",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cases ::= cases case 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cases ::= case 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // case ::= expresion CASE LLAV_IZQ instrucciones LLAV_DER 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("case",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // default ::= DEFAULT CASE LLAV_IZQ instrucciones LLAV_DER 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("default",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia_while ::= WHILE PAR_IZQ expresion PAR_DER LLAV_IZQ instrucciones LLAV_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new SentenciaWhile(a,b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_while",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia_for ::= FOR PAR_IZQ asignacion_id PT_COMA expresion PT_COMA inc_dec PAR_DER LLAV_IZQ instrucciones LLAV_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new For(a,b,c,d,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_for",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia_do_while ::= DO LLAV_IZQ instrucciones LLAV_DER WHILE PAR_IZQ expresion PAR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new SentenciaDoWhile(a,b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // imprimir ::= PRINTLN PAR_IZQ expresion PAR_DER PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Print(a,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= aritmeticos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= relacionales 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= logicos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= casteo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AccesoVariables(a,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(Double.parseDouble(a), new Tipo(tipoDato.DECIMAL),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= llamada PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= acceso_vl 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= remove 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= acceso_struct 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= find 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= round 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= length 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= toString 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // aritmeticos ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.SUMA,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // aritmeticos ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.RESTA,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // aritmeticos ::= expresion POR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.MULTIPLICACION,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // aritmeticos ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.DIVISION,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // aritmeticos ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.MODULO,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // aritmeticos ::= expresion POTENCIA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.POTENCIA,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // aritmeticos ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a   , OperadoresAritmeticos.NEGACION,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // relacionales ::= expresion IGUALIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.EQUALS,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // relacionales ::= expresion DISTINTO expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.NOT_EQUALS,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // relacionales ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.GREATER_THAN,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // relacionales ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.LESS_THAN,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // relacionales ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.GREATER_THAN_OR_EQUALS,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // relacionales ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.LESS_THAN_OR_EQUALS,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // logicos ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.OR, b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicos",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // logicos ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.AND, b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicos",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // logicos ::= expresion XOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.XOR, b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicos",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // logicos ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.NOT, null,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicos",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // casteo ::= PAR_IZQ tipo_datos PAR_DER expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Casteos(a,b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casteo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // inc_dec ::= ID INC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new IncDec(a, b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inc_dec",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // inc_dec ::= ID DEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new IncDec(a, b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inc_dec",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipo_datos ::= INT 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.ENTERO);   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipo_datos ::= DOUBLE 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.DECIMAL);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipo_datos ::= BOOL 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipo_datos ::= STRING 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.CADENA);   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipo_datos ::= CHAR 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declaracion_vector ::= mutabilidad ID DOS_PT tipo_datos COR_IZQ COR_DER IGUAL COR_IZQ lista_valores COR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new DeclaracionVector1D(a, b, c, d, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_vector",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declaracion_vector ::= mutabilidad ID DOS_PT tipo_datos COR_IZQ COR_DER COR_IZQ COR_DER IGUAL COR_IZQ lista_valores2 COR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<LinkedList<Instruccion>> d = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new DeclaracionVector2D(a, b, c, d, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_vector",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // lista_valores ::= lista_valores COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_valores",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lista_valores ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_valores",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lista_valores2 ::= lista_valores2 COMA COR_IZQ lista_valores COR_DER 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 a.add(b); RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_valores2",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_valores2 ::= COR_IZQ lista_valores COR_DER 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new LinkedList<LinkedList<Instruccion>>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_valores2",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // acceso_vl ::= ID COR_IZQ expresion COR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new AccesoVector(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("acceso_vl",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // acceso_vl ::= ID COR_IZQ expresion COR_DER COR_IZQ expresion COR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new AccesoVector2D(a,b,c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("acceso_vl",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // asignacion_vl ::= ID COR_IZQ expresion COR_DER IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AsignacionVector1D(a,b,c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_vl",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // asignacion_vl ::= ID COR_IZQ expresion COR_DER COR_IZQ expresion COR_DER IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AsignacionVector2D(a,b,c,d,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_vl",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declaracion_listas ::= LIST MENOR tipo_datos MAYOR ID IGUAL NEW LIST PAR_IZQ PAR_DER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_listas",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // append ::= ID PUNTO APPEND PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("append",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // remove ::= ID PUNTO REMOVE PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("remove",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // struct ::= STRUCT LLAV_IZQ lista_structs LLAV_DER ID 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("struct",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // lista_structs ::= lista_structs campos 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_structs",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // lista_structs ::= campos 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_structs",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // campos ::= ID DOS_PT tipo_datos PT_COMA 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("campos",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // instanciar_struct ::= mutabilidad ID DOS_PT ID IGUAL LLAV_IZQ valores_struct LLAV_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciar_struct",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // valores_struct ::= valores_struct COMA valor_struc 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_struct",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // valores_struct ::= valor_struc 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_struct",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // valor_struc ::= ID DOS_PT expresion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_struc",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // acceso_struct ::= ID PUNTO ID 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("acceso_struct",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // asignacion_struct ::= ID PUNTO ID IGUAL expresion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_struct",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // funcion ::= tipo_datos ID PAR_IZQ parametros PAR_DER LLAV_IZQ instrucciones LLAV_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametros ::= parametros COMA tipo_datos ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; var l2 = new HashMap<String, Object>(); l2.put("id",c); l2.put("tipo",b); RESULT.add(l2); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parametros ::= tipo_datos ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>(); var l = new HashMap<String, Object>(); l.put("id",b); l.put("tipo",a); RESULT.add(l); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // metodo ::= VOID ID PAR_IZQ parametros PAR_DER LLAV_IZQ instrucciones LLAV_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Metodo(a,b,c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // metodo ::= VOID ID PAR_IZQ PAR_DER LLAV_IZQ instrucciones LLAV_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Metodo(a,new LinkedList<HashMap>(),b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parametros_llamada ::= parametros_llamada COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_llamada",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parametros_llamada ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_llamada",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // llamada ::= ID PAR_IZQ parametros_llamada PAR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Llamada(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // llamada ::= ID PAR_IZQ PAR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Llamada(a,new LinkedList(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // round ::= ROUND PAR_IZQ expresion PAR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Round(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("round",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // length ::= LENGTH PAR_IZQ expresion PAR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Length(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("length",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // toString ::= TOSTRING PAR_IZQ expresion PAR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ToString(a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("toString",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // find ::= ID PUNTO FIND PAR_IZQ expresion PAR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Find(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("find",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // start_with ::= START_WITH ID PAR_IZQ parametros_llamada PAR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Start_W(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("start_with",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // start_with ::= START_WITH ID PAR_IZQ PAR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Start_W(a,new LinkedList(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("start_with",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
