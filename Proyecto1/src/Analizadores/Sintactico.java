
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;
import Errores.Excepcion;
import java.util.HashMap;
import abstracto.*;
import simbolo.*;
import instrucciones.*;
import expresiones.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\004\004\000\002" +
    "\004\003\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\004\000\002\004\005\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\010\010\000\002\010\006\000\002\024\003\000" +
    "\002\024\003\000\002\011\005\000\002\012\013\000\002" +
    "\012\015\000\002\012\011\000\002\013\005\000\002\014" +
    "\005\000\002\014\004\000\002\015\004\000\002\015\003" +
    "\000\002\015\003\000\002\016\004\000\002\016\003\000" +
    "\002\017\007\000\002\020\007\000\002\021\011\000\002" +
    "\022\015\000\002\023\012\000\002\005\007\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\004\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\004\000\002\030\006" +
    "\000\002\031\004\000\002\031\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\032\014\000\002\032\016\000\002\033" +
    "\005\000\002\033\003\000\002\034\007\000\002\034\005" +
    "\000\002\035\006\000\002\035\011\000\002\036\010\000" +
    "\002\036\013\000\002\037\014\000\002\040\010\000\002" +
    "\041\010\000\002\042\007\000\002\043\004\000\002\043" +
    "\003\000\002\044\006\000\002\045\012\000\002\046\005" +
    "\000\002\046\003\000\002\047\005\000\002\050\005\000" +
    "\002\051\007\000\002\052\012\000\002\056\006\000\002" +
    "\056\004\000\002\054\012\000\002\054\011\000\002\053" +
    "\005\000\002\053\003\000\002\055\006\000\002\055\005" +
    "\000\002\057\006\000\002\060\006\000\002\061\006\000" +
    "\002\062\010\000\002\063\007\000\002\063\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0136\000\064\003\040\044\035\047\016\050\012\051" +
    "\061\052\005\053\026\056\065\057\006\060\032\062\021" +
    "\063\055\064\020\065\070\066\044\067\013\070\037\073" +
    "\056\077\064\100\046\101\017\102\067\103\066\104\045" +
    "\106\054\001\002\000\004\004\u0138\001\002\000\016\004" +
    "\uffa7\007\uffa7\014\uffa7\034\uffa7\036\uffa7\044\uffa7\001\002" +
    "\000\004\044\uffde\001\002\000\070\002\ufff5\003\ufff5\010" +
    "\ufff5\044\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5" +
    "\056\ufff5\057\ufff5\060\ufff5\062\ufff5\063\ufff5\064\ufff5\065" +
    "\ufff5\066\ufff5\067\ufff5\070\ufff5\073\ufff5\077\ufff5\100\ufff5" +
    "\101\ufff5\102\ufff5\103\ufff5\104\ufff5\106\ufff5\001\002\000" +
    "\070\002\uffe8\003\uffe8\010\uffe8\044\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\056\uffe8\057\uffe8\060\uffe8\062" +
    "\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8" +
    "\073\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\104" +
    "\uffe8\106\uffe8\001\002\000\066\002\000\003\040\044\035" +
    "\047\016\050\012\051\061\052\005\053\026\056\065\057" +
    "\006\060\032\062\021\063\055\064\020\065\070\066\044" +
    "\067\013\070\037\073\056\077\064\100\046\101\017\102" +
    "\067\103\066\104\045\106\054\001\002\000\016\004\uffaa" +
    "\007\uffaa\014\uffaa\034\uffaa\036\uffaa\044\uffaa\001\002\000" +
    "\004\004\u0137\001\002\000\004\004\u0136\001\002\000\004" +
    "\004\u0135\001\002\000\016\004\uffab\007\uffab\014\uffab\034" +
    "\uffab\036\uffab\044\uffab\001\002\000\004\006\u0131\001\002" +
    "\000\004\006\u0125\001\002\000\026\006\104\020\114\023" +
    "\101\042\105\043\100\044\112\045\115\046\077\054\106" +
    "\055\111\001\002\000\004\004\u010f\001\002\000\004\004" +
    "\u010e\001\002\000\070\002\ufffb\003\ufffb\010\ufffb\044\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\056\ufffb\057" +
    "\ufffb\060\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb" +
    "\067\ufffb\070\ufffb\073\ufffb\077\ufffb\100\ufffb\101\ufffb\102" +
    "\ufffb\103\ufffb\104\ufffb\106\ufffb\001\002\000\004\004\u010d" +
    "\001\002\000\016\004\uffa9\007\uffa9\014\uffa9\034\uffa9\036" +
    "\uffa9\044\uffa9\001\002\000\070\002\ufffa\003\ufffa\010\ufffa" +
    "\044\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\056" +
    "\ufffa\057\ufffa\060\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa" +
    "\066\ufffa\067\ufffa\070\ufffa\073\ufffa\077\ufffa\100\ufffa\101" +
    "\ufffa\102\ufffa\103\ufffa\104\ufffa\106\ufffa\001\002\000\070" +
    "\002\uffe9\003\uffe9\010\uffe9\044\uffe9\047\uffe9\050\uffe9\051" +
    "\uffe9\052\uffe9\053\uffe9\056\uffe9\057\uffe9\060\uffe9\062\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\073" +
    "\uffe9\077\uffe9\100\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9" +
    "\106\uffe9\001\002\000\004\004\u010c\001\002\000\004\006" +
    "\u0101\001\002\000\070\002\ufff8\003\ufff8\010\ufff8\044\ufff8" +
    "\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\056\ufff8\057" +
    "\ufff8\060\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8" +
    "\067\ufff8\070\ufff8\073\ufff8\077\ufff8\100\ufff8\101\ufff8\102" +
    "\ufff8\103\ufff8\104\ufff8\106\ufff8\001\002\000\070\002\ufffe" +
    "\003\ufffe\010\ufffe\044\ufffe\047\ufffe\050\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\056\ufffe\057\ufffe\060\ufffe\062\ufffe\063\ufffe" +
    "\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\073\ufffe\077" +
    "\ufffe\100\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\106\ufffe" +
    "\001\002\000\016\006\354\012\347\014\350\031\352\032" +
    "\353\034\351\001\002\000\004\044\340\001\002\000\030" +
    "\004\335\006\104\020\114\023\101\042\105\043\100\044" +
    "\112\045\115\046\077\054\106\055\111\001\002\000\004" +
    "\004\334\001\002\000\004\004\333\001\002\000\004\004" +
    "\332\001\002\000\070\002\uffec\003\uffec\010\uffec\044\uffec" +
    "\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\056\uffec\057" +
    "\uffec\060\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec" +
    "\067\uffec\070\uffec\073\uffec\077\uffec\100\uffec\101\uffec\102" +
    "\uffec\103\uffec\104\uffec\106\uffec\001\002\000\004\004\331" +
    "\001\002\000\004\006\326\001\002\000\004\044\306\001" +
    "\002\000\004\044\240\001\002\000\070\002\uffed\003\uffed" +
    "\010\uffed\044\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\056\uffed\057\uffed\060\uffed\062\uffed\063\uffed\064\uffed" +
    "\065\uffed\066\uffed\067\uffed\070\uffed\073\uffed\077\uffed\100" +
    "\uffed\101\uffed\102\uffed\103\uffed\104\uffed\106\uffed\001\002" +
    "\000\004\004\237\001\002\000\004\004\236\001\002\000" +
    "\004\004\235\001\002\000\004\044\225\001\002\000\004" +
    "\006\217\001\002\000\004\037\206\001\002\000\004\004" +
    "\205\001\002\000\004\002\204\001\002\000\016\004\uffa8" +
    "\007\uffa8\014\uffa8\034\uffa8\036\uffa8\044\uffa8\001\002\000" +
    "\070\002\uffea\003\uffea\010\uffea\044\uffea\047\uffea\050\uffea" +
    "\051\uffea\052\uffea\053\uffea\056\uffea\057\uffea\060\uffea\062" +
    "\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea\070\uffea" +
    "\073\uffea\077\uffea\100\uffea\101\uffea\102\uffea\103\uffea\104" +
    "\uffea\106\uffea\001\002\000\070\002\ufff9\003\ufff9\010\ufff9" +
    "\044\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\056" +
    "\ufff9\057\ufff9\060\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9" +
    "\066\ufff9\067\ufff9\070\ufff9\073\ufff9\077\ufff9\100\ufff9\101" +
    "\ufff9\102\ufff9\103\ufff9\104\ufff9\106\ufff9\001\002\000\004" +
    "\011\172\001\002\000\004\044\uffdf\001\002\000\004\006" +
    "\167\001\002\000\004\006\164\001\002\000\004\011\071" +
    "\001\002\000\064\003\040\044\035\047\016\050\012\051" +
    "\061\052\005\053\026\056\065\057\006\060\032\062\021" +
    "\063\055\064\020\065\070\066\044\067\013\070\037\073" +
    "\056\077\064\100\046\101\017\102\067\103\066\104\045" +
    "\106\054\001\002\000\066\003\040\010\074\044\035\047" +
    "\016\050\012\051\061\052\005\053\026\056\065\057\006" +
    "\060\032\062\021\063\055\064\020\065\070\066\044\067" +
    "\013\070\037\073\056\077\064\100\046\101\017\102\067" +
    "\103\066\104\045\106\054\001\002\000\070\002\uffff\003" +
    "\uffff\010\uffff\044\uffff\047\uffff\050\uffff\051\uffff\052\uffff" +
    "\053\uffff\056\uffff\057\uffff\060\uffff\062\uffff\063\uffff\064" +
    "\uffff\065\uffff\066\uffff\067\uffff\070\uffff\073\uffff\077\uffff" +
    "\100\uffff\101\uffff\102\uffff\103\uffff\104\uffff\106\uffff\001" +
    "\002\000\004\063\075\001\002\000\004\006\076\001\002" +
    "\000\026\006\104\020\114\023\101\042\105\043\100\044" +
    "\112\045\115\046\077\054\106\055\111\001\002\000\056" +
    "\004\uffc2\007\uffc2\010\uffc2\011\uffc2\013\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\033\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\071\uffc2\001\002\000\056\004\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\013\uffc5\015\uffc5\016\uffc5\017\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\033\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\071" +
    "\uffc5\001\002\000\026\006\104\020\114\023\101\042\105" +
    "\043\100\044\112\045\115\046\077\054\106\055\111\001" +
    "\002\000\056\004\uffc8\007\uffc8\010\uffc8\011\uffc8\013\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\033\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\071\uffc8\001\002\000\056\004" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\013\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\033\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\071\uffc9\001\002\000\040\006\104\020\114\023" +
    "\101\042\105\043\100\044\112\045\115\046\077\047\016" +
    "\050\012\051\061\052\005\053\026\054\106\055\111\001" +
    "\002\000\056\004\uffc6\007\uffc6\010\uffc6\011\uffc6\013\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\033\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\071\uffc6\001\002\000\056\004" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\013\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\033\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\071\uffc4\001\002\000\056\004\uffcb\007\uffcb\010" +
    "\uffcb\011\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\033" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\071\uffcb" +
    "\001\002\000\042\007\155\016\120\017\135\021\121\022" +
    "\127\023\122\024\126\025\131\026\125\027\123\033\134" +
    "\035\133\036\132\037\124\040\130\041\117\001\002\000" +
    "\056\004\uffc3\007\uffc3\010\uffc3\011\uffc3\013\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\033\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\071\uffc3\001\002\000\056\004\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\013\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\033\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\071\uffc7\001\002\000\056\004\uffca\007\uffca\010\uffca\011" +
    "\uffca\013\uffca\015\uffca\016\uffca\017\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\033\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\071\uffca\001\002" +
    "\000\026\006\104\020\114\023\101\042\105\043\100\044" +
    "\112\045\115\046\077\054\106\055\111\001\002\000\056" +
    "\004\uffc1\007\uffc1\010\uffc1\011\uffc1\013\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\033\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\071\uffc1\001\002\000\056\004\uffaf\007\uffaf" +
    "\010\uffaf\011\uffaf\013\uffaf\015\uffaf\016\uffaf\017\uffaf\021" +
    "\uffaf\022\127\023\122\024\126\025\131\026\125\027\123" +
    "\033\134\035\133\036\132\037\124\040\130\041\117\071" +
    "\uffaf\001\002\000\026\006\104\020\114\023\101\042\105" +
    "\043\100\044\112\045\115\046\077\054\106\055\111\001" +
    "\002\000\026\006\104\020\114\023\101\042\105\043\100" +
    "\044\112\045\115\046\077\054\106\055\111\001\002\000" +
    "\026\006\104\020\114\023\101\042\105\043\100\044\112" +
    "\045\115\046\077\054\106\055\111\001\002\000\026\006" +
    "\104\020\114\023\101\042\105\043\100\044\112\045\115" +
    "\046\077\054\106\055\111\001\002\000\026\006\104\020" +
    "\114\023\101\042\105\043\100\044\112\045\115\046\077" +
    "\054\106\055\111\001\002\000\026\006\104\020\114\023" +
    "\101\042\105\043\100\044\112\045\115\046\077\054\106" +
    "\055\111\001\002\000\026\006\104\020\114\023\101\042" +
    "\105\043\100\044\112\045\115\046\077\054\106\055\111" +
    "\001\002\000\026\006\104\020\114\023\101\042\105\043" +
    "\100\044\112\045\115\046\077\054\106\055\111\001\002" +
    "\000\026\006\104\020\114\023\101\042\105\043\100\044" +
    "\112\045\115\046\077\054\106\055\111\001\002\000\026" +
    "\006\104\020\114\023\101\042\105\043\100\044\112\045" +
    "\115\046\077\054\106\055\111\001\002\000\026\006\104" +
    "\020\114\023\101\042\105\043\100\044\112\045\115\046" +
    "\077\054\106\055\111\001\002\000\026\006\104\020\114" +
    "\023\101\042\105\043\100\044\112\045\115\046\077\054" +
    "\106\055\111\001\002\000\026\006\104\020\114\023\101" +
    "\042\105\043\100\044\112\045\115\046\077\054\106\055" +
    "\111\001\002\000\026\006\104\020\114\023\101\042\105" +
    "\043\100\044\112\045\115\046\077\054\106\055\111\001" +
    "\002\000\026\006\104\020\114\023\101\042\105\043\100" +
    "\044\112\045\115\046\077\054\106\055\111\001\002\000" +
    "\056\004\uffb2\007\uffb2\010\uffb2\011\uffb2\013\uffb2\015\uffb2" +
    "\016\120\017\uffb2\021\121\022\127\023\122\024\126\025" +
    "\131\026\125\027\123\033\134\035\133\036\132\037\124" +
    "\040\130\041\117\071\uffb2\001\002\000\056\004\uffb7\007" +
    "\uffb7\010\uffb7\011\uffb7\013\uffb7\015\uffb7\016\uffb7\017\uffb7" +
    "\021\uffb7\022\127\023\122\024\126\025\131\026\125\027" +
    "\123\033\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\071\uffb7\001\002\000\056\004\uffb8\007\uffb8\010\uffb8\011" +
    "\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\021\uffb8\022\127" +
    "\023\122\024\126\025\131\026\125\027\123\033\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\071\uffb8\001\002" +
    "\000\056\004\uffb6\007\uffb6\010\uffb6\011\uffb6\013\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\021\uffb6\022\127\023\122\024\126" +
    "\025\131\026\125\027\123\033\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\071\uffb6\001\002\000\056\004\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\013\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\123\033\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\071\uffbc\001\002\000\056\004\uffb4\007\uffb4\010\uffb4" +
    "\011\uffb4\013\uffb4\015\uffb4\016\uffb4\017\uffb4\021\uffb4\022" +
    "\127\023\122\024\126\025\131\026\125\027\123\033\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\071\uffb4\001" +
    "\002\000\056\004\uffbf\007\uffbf\010\uffbf\011\uffbf\013\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf\024" +
    "\126\025\131\026\125\027\123\033\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\071\uffbf\001\002\000\056\004" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\013\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\123\033\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\071\uffbd\001\002\000\056\004\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\013\uffbb\015\uffbb\016\uffbb\017\uffbb\021\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\123\033" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\071\uffbb" +
    "\001\002\000\056\004\uffb5\007\uffb5\010\uffb5\011\uffb5\013" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\021\uffb5\022\127\023\122" +
    "\024\126\025\131\026\125\027\123\033\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\071\uffb5\001\002\000\056" +
    "\004\uffba\007\uffba\010\uffba\011\uffba\013\uffba\015\uffba\016" +
    "\uffba\017\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\033\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\071\uffba\001\002\000\056\004\uffbe\007\uffbe" +
    "\010\uffbe\011\uffbe\013\uffbe\015\uffbe\016\uffbe\017\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\126\025\131\026\125\027\123" +
    "\033\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\071" +
    "\uffbe\001\002\000\056\004\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\013\uffb0\015\uffb0\016\uffb0\017\uffb0\021\uffb0\022\127\023" +
    "\122\024\126\025\131\026\125\027\123\033\134\035\133" +
    "\036\132\037\124\040\130\041\117\071\uffb0\001\002\000" +
    "\056\004\uffb1\007\uffb1\010\uffb1\011\uffb1\013\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\021\121\022\127\023\122\024\126\025" +
    "\131\026\125\027\123\033\134\035\133\036\132\037\124" +
    "\040\130\041\117\071\uffb1\001\002\000\056\004\uffb3\007" +
    "\uffb3\010\uffb3\011\uffb3\013\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\021\uffb3\022\127\023\122\024\126\025\131\026\125\027" +
    "\123\033\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3" +
    "\071\uffb3\001\002\000\004\004\uffcd\001\002\000\042\007" +
    "\162\016\120\017\135\021\121\022\127\023\122\024\126" +
    "\025\131\026\125\027\123\033\134\035\133\036\132\037" +
    "\124\040\130\041\117\001\002\000\004\007\160\001\002" +
    "\000\026\006\104\020\114\023\101\042\105\043\100\044" +
    "\112\045\115\046\077\054\106\055\111\001\002\000\056" +
    "\004\uffae\007\uffae\010\uffae\011\uffae\013\uffae\015\uffae\016" +
    "\120\017\135\021\121\022\127\023\122\024\126\025\131" +
    "\026\125\027\123\033\134\035\133\036\132\037\124\040" +
    "\130\041\117\071\uffae\001\002\000\056\004\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\013\uffc0\015\uffc0\016\uffc0\017\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\033\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\071" +
    "\uffc0\001\002\000\056\004\uffb9\007\uffb9\010\uffb9\011\uffb9" +
    "\013\uffb9\015\uffb9\016\uffb9\017\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\033\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\071\uffb9\001\002\000" +
    "\026\006\104\020\114\023\101\042\105\043\100\044\112" +
    "\045\115\046\077\054\106\055\111\001\002\000\042\007" +
    "\166\016\120\017\135\021\121\022\127\023\122\024\126" +
    "\025\131\026\125\027\123\033\134\035\133\036\132\037" +
    "\124\040\130\041\117\001\002\000\070\002\uff86\003\uff86" +
    "\010\uff86\044\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053" +
    "\uff86\056\uff86\057\uff86\060\uff86\062\uff86\063\uff86\064\uff86" +
    "\065\uff86\066\uff86\067\uff86\070\uff86\073\uff86\077\uff86\100" +
    "\uff86\101\uff86\102\uff86\103\uff86\104\uff86\106\uff86\001\002" +
    "\000\026\006\104\020\114\023\101\042\105\043\100\044" +
    "\112\045\115\046\077\054\106\055\111\001\002\000\042" +
    "\007\171\016\120\017\135\021\121\022\127\023\122\024" +
    "\126\025\131\026\125\027\123\033\134\035\133\036\132" +
    "\037\124\040\130\041\117\001\002\000\070\002\uff85\003" +
    "\uff85\010\uff85\044\uff85\047\uff85\050\uff85\051\uff85\052\uff85" +
    "\053\uff85\056\uff85\057\uff85\060\uff85\062\uff85\063\uff85\064" +
    "\uff85\065\uff85\066\uff85\067\uff85\070\uff85\073\uff85\077\uff85" +
    "\100\uff85\101\uff85\102\uff85\103\uff85\104\uff85\106\uff85\001" +
    "\002\000\004\044\173\001\002\000\004\005\201\001\002" +
    "\000\006\010\uff97\044\uff97\001\002\000\006\010\176\044" +
    "\173\001\002\000\004\044\200\001\002\000\006\010\uff98" +
    "\044\uff98\001\002\000\004\004\uff99\001\002\000\014\047" +
    "\016\050\012\051\061\052\005\053\026\001\002\000\004" +
    "\004\203\001\002\000\006\010\uff96\044\uff96\001\002\000" +
    "\004\002\001\001\002\000\070\002\uffe7\003\uffe7\010\uffe7" +
    "\044\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\070\uffe7\073\uffe7\077\uffe7\100\uffe7\101" +
    "\uffe7\102\uffe7\103\uffe7\104\uffe7\106\uffe7\001\002\000\014" +
    "\047\016\050\012\051\061\052\005\053\026\001\002\000" +
    "\004\036\210\001\002\000\004\044\211\001\002\000\004" +
    "\034\212\001\002\000\004\074\213\001\002\000\004\073" +
    "\214\001\002\000\004\006\215\001\002\000\004\007\216" +
    "\001\002\000\004\004\uff9c\001\002\000\026\006\104\020" +
    "\114\023\101\042\105\043\100\044\112\045\115\046\077" +
    "\054\106\055\111\001\002\000\042\007\221\016\120\017" +
    "\135\021\121\022\127\023\122\024\126\025\131\026\125" +
    "\027\123\033\134\035\133\036\132\037\124\040\130\041" +
    "\117\001\002\000\004\011\222\001\002\000\064\003\040" +
    "\044\035\047\016\050\012\051\061\052\005\053\026\056" +
    "\065\057\006\060\032\062\021\063\055\064\020\065\070" +
    "\066\044\067\013\070\037\073\056\077\064\100\046\101" +
    "\017\102\067\103\066\104\045\106\054\001\002\000\066" +
    "\003\040\010\224\044\035\047\016\050\012\051\061\052" +
    "\005\053\026\056\065\057\006\060\032\062\021\063\055" +
    "\064\020\065\070\066\044\067\013\070\037\073\056\077" +
    "\064\100\046\101\017\102\067\103\066\104\045\106\054" +
    "\001\002\000\070\002\uffcf\003\uffcf\010\uffcf\044\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\056\uffcf\057\uffcf" +
    "\060\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067" +
    "\uffcf\070\uffcf\073\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf" +
    "\103\uffcf\104\uffcf\106\uffcf\001\002\000\004\006\226\001" +
    "\002\000\030\006\104\007\230\020\114\023\101\042\105" +
    "\043\100\044\112\045\115\046\077\054\106\055\111\001" +
    "\002\000\006\007\233\013\232\001\002\000\004\004\uff81" +
    "\001\002\000\044\007\uff89\013\uff89\016\120\017\135\021" +
    "\121\022\127\023\122\024\126\025\131\026\125\027\123" +
    "\033\134\035\133\036\132\037\124\040\130\041\117\001" +
    "\002\000\026\006\104\020\114\023\101\042\105\043\100" +
    "\044\112\045\115\046\077\054\106\055\111\001\002\000" +
    "\004\004\uff82\001\002\000\044\007\uff8a\013\uff8a\016\120" +
    "\017\135\021\121\022\127\023\122\024\126\025\131\026" +
    "\125\027\123\033\134\035\133\036\132\037\124\040\130" +
    "\041\117\001\002\000\070\002\ufff4\003\ufff4\010\ufff4\044" +
    "\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\056\ufff4" +
    "\057\ufff4\060\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066" +
    "\ufff4\067\ufff4\070\ufff4\073\ufff4\077\ufff4\100\ufff4\101\ufff4" +
    "\102\ufff4\103\ufff4\104\ufff4\106\ufff4\001\002\000\070\002" +
    "\ufff1\003\ufff1\010\ufff1\044\ufff1\047\ufff1\050\ufff1\051\ufff1" +
    "\052\ufff1\053\ufff1\056\ufff1\057\ufff1\060\ufff1\062\ufff1\063" +
    "\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\073\ufff1" +
    "\077\ufff1\100\ufff1\101\ufff1\102\ufff1\103\ufff1\104\ufff1\106" +
    "\ufff1\001\002\000\070\002\ufff2\003\ufff2\010\ufff2\044\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\056\ufff2\057" +
    "\ufff2\060\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2" +
    "\067\ufff2\070\ufff2\073\ufff2\077\ufff2\100\ufff2\101\ufff2\102" +
    "\ufff2\103\ufff2\104\ufff2\106\ufff2\001\002\000\004\005\241" +
    "\001\002\000\016\044\242\047\016\050\012\051\061\052" +
    "\005\053\026\001\002\000\004\034\274\001\002\000\010" +
    "\004\uffe0\014\244\034\245\001\002\000\004\015\247\001" +
    "\002\000\026\006\104\020\114\023\101\042\105\043\100" +
    "\044\112\045\115\046\077\054\106\055\111\001\002\000" +
    "\042\004\uffe1\016\120\017\135\021\121\022\127\023\122" +
    "\024\126\025\131\026\125\027\123\033\134\035\133\036" +
    "\132\037\124\040\130\041\117\001\002\000\006\014\250" +
    "\034\251\001\002\000\004\015\260\001\002\000\004\014" +
    "\252\001\002\000\026\006\104\020\114\023\101\042\105" +
    "\043\100\044\112\045\115\046\077\054\106\055\111\001" +
    "\002\000\006\013\255\015\256\001\002\000\044\013\uffa3" +
    "\015\uffa3\016\120\017\135\021\121\022\127\023\122\024" +
    "\126\025\131\026\125\027\123\033\134\035\133\036\132" +
    "\037\124\040\130\041\117\001\002\000\026\006\104\020" +
    "\114\023\101\042\105\043\100\044\112\045\115\046\077" +
    "\054\106\055\111\001\002\000\004\004\uffa6\001\002\000" +
    "\044\013\uffa4\015\uffa4\016\120\017\135\021\121\022\127" +
    "\023\122\024\126\025\131\026\125\027\123\033\134\035" +
    "\133\036\132\037\124\040\130\041\117\001\002\000\004" +
    "\034\261\001\002\000\004\014\262\001\002\000\004\014" +
    "\264\001\002\000\006\013\267\015\270\001\002\000\026" +
    "\006\104\020\114\023\101\042\105\043\100\044\112\045" +
    "\115\046\077\054\106\055\111\001\002\000\006\013\255" +
    "\015\266\001\002\000\006\013\uffa1\015\uffa1\001\002\000" +
    "\004\014\271\001\002\000\004\004\uffa5\001\002\000\026" +
    "\006\104\020\114\023\101\042\105\043\100\044\112\045" +
    "\115\046\077\054\106\055\111\001\002\000\006\013\255" +
    "\015\273\001\002\000\006\013\uffa2\015\uffa2\001\002\000" +
    "\004\011\275\001\002\000\004\044\276\001\002\000\004" +
    "\005\304\001\002\000\006\010\302\013\301\001\002\000" +
    "\006\010\uff93\013\uff93\001\002\000\004\044\276\001\002" +
    "\000\004\004\uff95\001\002\000\006\010\uff94\013\uff94\001" +
    "\002\000\026\006\104\020\114\023\101\042\105\043\100" +
    "\044\112\045\115\046\077\054\106\055\111\001\002\000" +
    "\044\010\uff92\013\uff92\016\120\017\135\021\121\022\127" +
    "\023\122\024\126\025\131\026\125\027\123\033\134\035" +
    "\133\036\132\037\124\040\130\041\117\001\002\000\004" +
    "\006\307\001\002\000\016\007\311\047\016\050\012\051" +
    "\061\052\005\053\026\001\002\000\006\007\320\013\317" +
    "\001\002\000\004\011\314\001\002\000\004\044\313\001" +
    "\002\000\006\007\uff8d\013\uff8d\001\002\000\064\003\040" +
    "\044\035\047\016\050\012\051\061\052\005\053\026\056" +
    "\065\057\006\060\032\062\021\063\055\064\020\065\070" +
    "\066\044\067\013\070\037\073\056\077\064\100\046\101" +
    "\017\102\067\103\066\104\045\106\054\001\002\000\066" +
    "\003\040\010\316\044\035\047\016\050\012\051\061\052" +
    "\005\053\026\056\065\057\006\060\032\062\021\063\055" +
    "\064\020\065\070\066\044\067\013\070\037\073\056\077" +
    "\064\100\046\101\017\102\067\103\066\104\045\106\054" +
    "\001\002\000\070\002\uff8b\003\uff8b\010\uff8b\044\uff8b\047" +
    "\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\056\uff8b\057\uff8b" +
    "\060\uff8b\062\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067" +
    "\uff8b\070\uff8b\073\uff8b\077\uff8b\100\uff8b\101\uff8b\102\uff8b" +
    "\103\uff8b\104\uff8b\106\uff8b\001\002\000\014\047\016\050" +
    "\012\051\061\052\005\053\026\001\002\000\004\011\321" +
    "\001\002\000\064\003\040\044\035\047\016\050\012\051" +
    "\061\052\005\053\026\056\065\057\006\060\032\062\021" +
    "\063\055\064\020\065\070\066\044\067\013\070\037\073" +
    "\056\077\064\100\046\101\017\102\067\103\066\104\045" +
    "\106\054\001\002\000\066\003\040\010\323\044\035\047" +
    "\016\050\012\051\061\052\005\053\026\056\065\057\006" +
    "\060\032\062\021\063\055\064\020\065\070\066\044\067" +
    "\013\070\037\073\056\077\064\100\046\101\017\102\067" +
    "\103\066\104\045\106\054\001\002\000\070\002\uff8c\003" +
    "\uff8c\010\uff8c\044\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c" +
    "\053\uff8c\056\uff8c\057\uff8c\060\uff8c\062\uff8c\063\uff8c\064" +
    "\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\073\uff8c\077\uff8c" +
    "\100\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\106\uff8c\001" +
    "\002\000\004\044\325\001\002\000\006\007\uff8e\013\uff8e" +
    "\001\002\000\026\006\104\020\114\023\101\042\105\043" +
    "\100\044\112\045\115\046\077\054\106\055\111\001\002" +
    "\000\042\007\330\016\120\017\135\021\121\022\127\023" +
    "\122\024\126\025\131\026\125\027\123\033\134\035\133" +
    "\036\132\037\124\040\130\041\117\001\002\000\070\002" +
    "\uff84\003\uff84\010\uff84\044\uff84\047\uff84\050\uff84\051\uff84" +
    "\052\uff84\053\uff84\056\uff84\057\uff84\060\uff84\062\uff84\063" +
    "\uff84\064\uff84\065\uff84\066\uff84\067\uff84\070\uff84\073\uff84" +
    "\077\uff84\100\uff84\101\uff84\102\uff84\103\uff84\104\uff84\106" +
    "\uff84\001\002\000\070\002\uffe3\003\uffe3\010\uffe3\044\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\056\uffe3\057" +
    "\uffe3\060\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3" +
    "\067\uffe3\070\uffe3\073\uffe3\077\uffe3\100\uffe3\101\uffe3\102" +
    "\uffe3\103\uffe3\104\uffe3\106\uffe3\001\002\000\070\002\uffef" +
    "\003\uffef\010\uffef\044\uffef\047\uffef\050\uffef\051\uffef\052" +
    "\uffef\053\uffef\056\uffef\057\uffef\060\uffef\062\uffef\063\uffef" +
    "\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\073\uffef\077" +
    "\uffef\100\uffef\101\uffef\102\uffef\103\uffef\104\uffef\106\uffef" +
    "\001\002\000\070\002\ufffc\003\ufffc\010\ufffc\044\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\056\ufffc\057\ufffc" +
    "\060\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067" +
    "\ufffc\070\ufffc\073\ufffc\077\ufffc\100\ufffc\101\ufffc\102\ufffc" +
    "\103\ufffc\104\ufffc\106\ufffc\001\002\000\070\002\uffe2\003" +
    "\uffe2\010\uffe2\044\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\053\uffe2\056\uffe2\057\uffe2\060\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\073\uffe2\077\uffe2" +
    "\100\uffe2\101\uffe2\102\uffe2\103\uffe2\104\uffe2\106\uffe2\001" +
    "\002\000\070\002\uffe5\003\uffe5\010\uffe5\044\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\053\uffe5\056\uffe5\057\uffe5\060" +
    "\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5" +
    "\070\uffe5\073\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\103" +
    "\uffe5\104\uffe5\106\uffe5\001\002\000\042\004\337\016\120" +
    "\017\135\021\121\022\127\023\122\024\126\025\131\026" +
    "\125\027\123\033\134\035\133\036\132\037\124\040\130" +
    "\041\117\001\002\000\070\002\uffe6\003\uffe6\010\uffe6\044" +
    "\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066" +
    "\uffe6\067\uffe6\070\uffe6\073\uffe6\077\uffe6\100\uffe6\101\uffe6" +
    "\102\uffe6\103\uffe6\104\uffe6\106\uffe6\001\002\000\004\006" +
    "\341\001\002\000\014\047\016\050\012\051\061\052\005" +
    "\053\026\001\002\000\006\007\343\013\317\001\002\000" +
    "\004\011\344\001\002\000\064\003\040\044\035\047\016" +
    "\050\012\051\061\052\005\053\026\056\065\057\006\060" +
    "\032\062\021\063\055\064\020\065\070\066\044\067\013" +
    "\070\037\073\056\077\064\100\046\101\017\102\067\103" +
    "\066\104\045\106\054\001\002\000\066\003\040\010\346" +
    "\044\035\047\016\050\012\051\061\052\005\053\026\056" +
    "\065\057\006\060\032\062\021\063\055\064\020\065\070" +
    "\066\044\067\013\070\037\073\056\077\064\100\046\101" +
    "\017\102\067\103\066\104\045\106\054\001\002\000\070" +
    "\002\uff8f\003\uff8f\010\uff8f\044\uff8f\047\uff8f\050\uff8f\051" +
    "\uff8f\052\uff8f\053\uff8f\056\uff8f\057\uff8f\060\uff8f\062\uff8f" +
    "\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\073" +
    "\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f\104\uff8f" +
    "\106\uff8f\001\002\000\006\044\372\075\373\001\002\000" +
    "\026\006\104\020\114\023\101\042\105\043\100\044\112" +
    "\045\115\046\077\054\106\055\111\001\002\000\026\006" +
    "\104\020\114\023\101\042\105\043\100\044\112\045\115" +
    "\046\077\054\106\055\111\001\002\000\006\004\uffad\007" +
    "\uffad\001\002\000\006\004\uffac\007\uffac\001\002\000\030" +
    "\006\104\007\356\020\114\023\101\042\105\043\100\044" +
    "\112\045\115\046\077\054\106\055\111\001\002\000\006" +
    "\007\357\013\232\001\002\000\004\004\uff87\001\002\000" +
    "\004\004\uff88\001\002\000\042\004\uffdd\016\120\017\135" +
    "\021\121\022\127\023\122\024\126\025\131\026\125\027" +
    "\123\033\134\035\133\036\132\037\124\040\130\041\117" +
    "\001\002\000\042\015\362\016\120\017\135\021\121\022" +
    "\127\023\122\024\126\025\131\026\125\027\123\033\134" +
    "\035\133\036\132\037\124\040\130\041\117\001\002\000" +
    "\006\014\363\034\364\001\002\000\026\006\104\020\114" +
    "\023\101\042\105\043\100\044\112\045\115\046\077\054" +
    "\106\055\111\001\002\000\026\006\104\020\114\023\101" +
    "\042\105\043\100\044\112\045\115\046\077\054\106\055" +
    "\111\001\002\000\042\004\uff9e\016\120\017\135\021\121" +
    "\022\127\023\122\024\126\025\131\026\125\027\123\033" +
    "\134\035\133\036\132\037\124\040\130\041\117\001\002" +
    "\000\042\015\367\016\120\017\135\021\121\022\127\023" +
    "\122\024\126\025\131\026\125\027\123\033\134\035\133" +
    "\036\132\037\124\040\130\041\117\001\002\000\004\034" +
    "\370\001\002\000\026\006\104\020\114\023\101\042\105" +
    "\043\100\044\112\045\115\046\077\054\106\055\111\001" +
    "\002\000\042\004\uff9d\016\120\017\135\021\121\022\127" +
    "\023\122\024\126\025\131\026\125\027\123\033\134\035" +
    "\133\036\132\037\124\040\130\041\117\001\002\000\004" +
    "\034\377\001\002\000\004\006\374\001\002\000\026\006" +
    "\104\020\114\023\101\042\105\043\100\044\112\045\115" +
    "\046\077\054\106\055\111\001\002\000\042\007\376\016" +
    "\120\017\135\021\121\022\127\023\122\024\126\025\131" +
    "\026\125\027\123\033\134\035\133\036\132\037\124\040" +
    "\130\041\117\001\002\000\004\004\uff9b\001\002\000\026" +
    "\006\104\020\114\023\101\042\105\043\100\044\112\045" +
    "\115\046\077\054\106\055\111\001\002\000\042\004\uff90" +
    "\016\120\017\135\021\121\022\127\023\122\024\126\025" +
    "\131\026\125\027\123\033\134\035\133\036\132\037\124" +
    "\040\130\041\117\001\002\000\026\006\104\020\114\023" +
    "\101\042\105\043\100\044\112\045\115\046\077\054\106" +
    "\055\111\001\002\000\042\007\u0103\016\120\017\135\021" +
    "\121\022\127\023\122\024\126\025\131\026\125\027\123" +
    "\033\134\035\133\036\132\037\124\040\130\041\117\001" +
    "\002\000\004\011\u0104\001\002\000\064\003\040\044\035" +
    "\047\016\050\012\051\061\052\005\053\026\056\065\057" +
    "\006\060\032\062\021\063\055\064\020\065\070\066\044" +
    "\067\013\070\037\073\056\077\064\100\046\101\017\102" +
    "\067\103\066\104\045\106\054\001\002\000\066\003\040" +
    "\010\u0106\044\035\047\016\050\012\051\061\052\005\053" +
    "\026\056\065\057\006\060\032\062\021\063\055\064\020" +
    "\065\070\066\044\067\013\070\037\073\056\077\064\100" +
    "\046\101\017\102\067\103\066\104\045\106\054\001\002" +
    "\000\072\002\uffda\003\uffda\010\uffda\044\uffda\047\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\056\uffda\057\uffda\060\uffda" +
    "\061\u0107\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067" +
    "\uffda\070\uffda\073\uffda\077\uffda\100\uffda\101\uffda\102\uffda" +
    "\103\uffda\104\uffda\106\uffda\001\002\000\006\011\u0108\060" +
    "\032\001\002\000\064\003\040\044\035\047\016\050\012" +
    "\051\061\052\005\053\026\056\065\057\006\060\032\062" +
    "\021\063\055\064\020\065\070\066\044\067\013\070\037" +
    "\073\056\077\064\100\046\101\017\102\067\103\066\104" +
    "\045\106\054\001\002\000\070\002\uffdc\003\uffdc\010\uffdc" +
    "\044\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\056" +
    "\uffdc\057\uffdc\060\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc" +
    "\066\uffdc\067\uffdc\070\uffdc\073\uffdc\077\uffdc\100\uffdc\101" +
    "\uffdc\102\uffdc\103\uffdc\104\uffdc\106\uffdc\001\002\000\066" +
    "\003\040\010\u010b\044\035\047\016\050\012\051\061\052" +
    "\005\053\026\056\065\057\006\060\032\062\021\063\055" +
    "\064\020\065\070\066\044\067\013\070\037\073\056\077" +
    "\064\100\046\101\017\102\067\103\066\104\045\106\054" +
    "\001\002\000\070\002\uffdb\003\uffdb\010\uffdb\044\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067" +
    "\uffdb\070\uffdb\073\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb" +
    "\103\uffdb\104\uffdb\106\uffdb\001\002\000\070\002\ufffd\003" +
    "\ufffd\010\ufffd\044\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\056\ufffd\057\ufffd\060\ufffd\062\ufffd\063\ufffd\064" +
    "\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\073\ufffd\077\ufffd" +
    "\100\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd\106\ufffd\001" +
    "\002\000\070\002\ufff6\003\ufff6\010\ufff6\044\ufff6\047\ufff6" +
    "\050\ufff6\051\ufff6\052\ufff6\053\ufff6\056\ufff6\057\ufff6\060" +
    "\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6" +
    "\070\ufff6\073\ufff6\077\ufff6\100\ufff6\101\ufff6\102\ufff6\103" +
    "\ufff6\104\ufff6\106\ufff6\001\002\000\070\002\uffeb\003\uffeb" +
    "\010\uffeb\044\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\062\uffeb\063\uffeb\064\uffeb" +
    "\065\uffeb\066\uffeb\067\uffeb\070\uffeb\073\uffeb\077\uffeb\100" +
    "\uffeb\101\uffeb\102\uffeb\103\uffeb\104\uffeb\106\uffeb\001\002" +
    "\000\070\002\ufff0\003\ufff0\010\ufff0\044\ufff0\047\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\053\ufff0\056\ufff0\057\ufff0\060\ufff0" +
    "\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070" +
    "\ufff0\073\ufff0\077\ufff0\100\ufff0\101\ufff0\102\ufff0\103\ufff0" +
    "\104\ufff0\106\ufff0\001\002\000\042\011\u0111\016\120\017" +
    "\135\021\121\022\127\023\122\024\126\025\131\026\125" +
    "\027\123\033\134\035\133\036\132\037\124\040\130\041" +
    "\117\001\002\000\032\006\104\010\u0116\020\114\023\101" +
    "\042\105\043\100\044\112\045\115\046\077\054\106\055" +
    "\111\072\u0119\001\002\000\070\002\uffd9\003\uffd9\010\uffd9" +
    "\044\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\056" +
    "\uffd9\057\uffd9\060\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9" +
    "\066\uffd9\067\uffd9\070\uffd9\073\uffd9\077\uffd9\100\uffd9\101" +
    "\uffd9\102\uffd9\103\uffd9\104\uffd9\106\uffd9\001\002\000\032" +
    "\006\104\010\uffd5\020\114\023\101\042\105\043\100\044" +
    "\112\045\115\046\077\054\106\055\111\072\u0119\001\002" +
    "\000\042\016\120\017\135\021\121\022\127\023\122\024" +
    "\126\025\131\026\125\027\123\033\134\035\133\036\132" +
    "\037\124\040\130\041\117\071\u011f\001\002\000\032\006" +
    "\uffd2\010\uffd2\020\uffd2\023\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\046\uffd2\054\uffd2\055\uffd2\072\uffd2\001\002\000" +
    "\070\002\uffd7\003\uffd7\010\uffd7\044\uffd7\047\uffd7\050\uffd7" +
    "\051\uffd7\052\uffd7\053\uffd7\056\uffd7\057\uffd7\060\uffd7\062" +
    "\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7" +
    "\073\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103\uffd7\104" +
    "\uffd7\106\uffd7\001\002\000\004\010\u011e\001\002\000\004" +
    "\010\uffd4\001\002\000\004\071\u011a\001\002\000\004\011" +
    "\u011b\001\002\000\064\003\040\044\035\047\016\050\012" +
    "\051\061\052\005\053\026\056\065\057\006\060\032\062" +
    "\021\063\055\064\020\065\070\066\044\067\013\070\037" +
    "\073\056\077\064\100\046\101\017\102\067\103\066\104" +
    "\045\106\054\001\002\000\066\003\040\010\u011d\044\035" +
    "\047\016\050\012\051\061\052\005\053\026\056\065\057" +
    "\006\060\032\062\021\063\055\064\020\065\070\066\044" +
    "\067\013\070\037\073\056\077\064\100\046\101\017\102" +
    "\067\103\066\104\045\106\054\001\002\000\004\010\uffd0" +
    "\001\002\000\070\002\uffd8\003\uffd8\010\uffd8\044\uffd8\047" +
    "\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\056\uffd8\057\uffd8" +
    "\060\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067" +
    "\uffd8\070\uffd8\073\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8" +
    "\103\uffd8\104\uffd8\106\uffd8\001\002\000\004\011\u0120\001" +
    "\002\000\064\003\040\044\035\047\016\050\012\051\061" +
    "\052\005\053\026\056\065\057\006\060\032\062\021\063" +
    "\055\064\020\065\070\066\044\067\013\070\037\073\056" +
    "\077\064\100\046\101\017\102\067\103\066\104\045\106" +
    "\054\001\002\000\066\003\040\010\u0122\044\035\047\016" +
    "\050\012\051\061\052\005\053\026\056\065\057\006\060" +
    "\032\062\021\063\055\064\020\065\070\066\044\067\013" +
    "\070\037\073\056\077\064\100\046\101\017\102\067\103" +
    "\066\104\045\106\054\001\002\000\032\006\uffd1\010\uffd1" +
    "\020\uffd1\023\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\054\uffd1\055\uffd1\072\uffd1\001\002\000\032\006\uffd3" +
    "\010\uffd3\020\uffd3\023\uffd3\042\uffd3\043\uffd3\044\uffd3\045" +
    "\uffd3\046\uffd3\054\uffd3\055\uffd3\072\uffd3\001\002\000\004" +
    "\010\uffd6\001\002\000\004\044\u0126\001\002\000\004\034" +
    "\351\001\002\000\004\004\u0128\001\002\000\026\006\104" +
    "\020\114\023\101\042\105\043\100\044\112\045\115\046" +
    "\077\054\106\055\111\001\002\000\042\004\u012a\016\120" +
    "\017\135\021\121\022\127\023\122\024\126\025\131\026" +
    "\125\027\123\033\134\035\133\036\132\037\124\040\130" +
    "\041\117\001\002\000\004\044\u012b\001\002\000\006\031" +
    "\352\032\353\001\002\000\004\007\u012d\001\002\000\004" +
    "\011\u012e\001\002\000\064\003\040\044\035\047\016\050" +
    "\012\051\061\052\005\053\026\056\065\057\006\060\032" +
    "\062\021\063\055\064\020\065\070\066\044\067\013\070" +
    "\037\073\056\077\064\100\046\101\017\102\067\103\066" +
    "\104\045\106\054\001\002\000\066\003\040\010\u0130\044" +
    "\035\047\016\050\012\051\061\052\005\053\026\056\065" +
    "\057\006\060\032\062\021\063\055\064\020\065\070\066" +
    "\044\067\013\070\037\073\056\077\064\100\046\101\017" +
    "\102\067\103\066\104\045\106\054\001\002\000\070\002" +
    "\uffce\003\uffce\010\uffce\044\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\056\uffce\057\uffce\060\uffce\062\uffce\063" +
    "\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\073\uffce" +
    "\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce\106" +
    "\uffce\001\002\000\026\006\104\020\114\023\101\042\105" +
    "\043\100\044\112\045\115\046\077\054\106\055\111\001" +
    "\002\000\042\007\u0133\016\120\017\135\021\121\022\127" +
    "\023\122\024\126\025\131\026\125\027\123\033\134\035" +
    "\133\036\132\037\124\040\130\041\117\001\002\000\004" +
    "\004\u0134\001\002\000\070\002\uffcc\003\uffcc\010\uffcc\044" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\056\uffcc" +
    "\057\uffcc\060\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066" +
    "\uffcc\067\uffcc\070\uffcc\073\uffcc\077\uffcc\100\uffcc\101\uffcc" +
    "\102\uffcc\103\uffcc\104\uffcc\106\uffcc\001\002\000\070\002" +
    "\ufff3\003\ufff3\010\ufff3\044\ufff3\047\ufff3\050\ufff3\051\ufff3" +
    "\052\ufff3\053\ufff3\056\ufff3\057\ufff3\060\ufff3\062\ufff3\063" +
    "\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\073\ufff3" +
    "\077\ufff3\100\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3\106" +
    "\ufff3\001\002\000\070\002\uffee\003\uffee\010\uffee\044\uffee" +
    "\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\056\uffee\057" +
    "\uffee\060\uffee\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee" +
    "\067\uffee\070\uffee\073\uffee\077\uffee\100\uffee\101\uffee\102" +
    "\uffee\103\uffee\104\uffee\106\uffee\001\002\000\070\002\uffe4" +
    "\003\uffe4\010\uffe4\044\uffe4\047\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\056\uffe4\057\uffe4\060\uffe4\062\uffe4\063\uffe4" +
    "\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\073\uffe4\077" +
    "\uffe4\100\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4\106\uffe4" +
    "\001\002\000\070\002\ufff7\003\ufff7\010\ufff7\044\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\056\ufff7\057\ufff7" +
    "\060\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067" +
    "\ufff7\070\ufff7\073\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7" +
    "\103\ufff7\104\ufff7\106\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0136\000\072\002\057\003\010\004\033\005\006\007" +
    "\035\010\030\011\040\012\023\013\026\021\062\022\032" +
    "\023\003\024\046\031\024\032\052\036\014\037\050\040" +
    "\051\042\021\045\041\051\013\052\047\054\042\055\022" +
    "\057\061\060\027\061\007\063\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\004\072\005\006\007\035\010" +
    "\030\011\040\012\023\013\026\021\062\022\032\023\003" +
    "\024\046\031\024\032\052\036\014\037\050\040\051\042" +
    "\021\045\041\051\013\052\047\054\042\055\022\057\061" +
    "\060\027\061\007\063\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\u010f\025\106\026\112\027\102\030\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\335\025\106\026\112\027\102\030\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\003\071\004" +
    "\033\005\006\007\035\010\030\011\040\012\023\013\026" +
    "\021\062\022\032\023\003\024\046\031\024\032\052\036" +
    "\014\037\050\040\051\042\021\045\041\051\013\052\047" +
    "\054\042\055\022\057\061\060\027\061\007\063\056\001" +
    "\001\000\066\004\072\005\006\007\035\010\030\011\040" +
    "\012\023\013\026\021\062\022\032\023\003\024\046\031" +
    "\024\032\052\036\014\037\050\040\051\042\021\045\041" +
    "\051\013\052\047\054\042\055\022\057\061\060\027\061" +
    "\007\063\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\107\025\106\026\112\027" +
    "\102\030\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\006\162\025\106\026\112\027\102\030\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\155" +
    "\007\156\025\106\026\112\027\102\030\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\115\025\106\026\112\027\102\030\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\153\025\106\026\112\027\102\030\101\001\001\000\014" +
    "\006\152\025\106\026\112\027\102\030\101\001\001\000" +
    "\014\006\151\025\106\026\112\027\102\030\101\001\001" +
    "\000\014\006\150\025\106\026\112\027\102\030\101\001" +
    "\001\000\014\006\147\025\106\026\112\027\102\030\101" +
    "\001\001\000\014\006\146\025\106\026\112\027\102\030" +
    "\101\001\001\000\014\006\145\025\106\026\112\027\102" +
    "\030\101\001\001\000\014\006\144\025\106\026\112\027" +
    "\102\030\101\001\001\000\014\006\143\025\106\026\112" +
    "\027\102\030\101\001\001\000\014\006\142\025\106\026" +
    "\112\027\102\030\101\001\001\000\014\006\141\025\106" +
    "\026\112\027\102\030\101\001\001\000\014\006\140\025" +
    "\106\026\112\027\102\030\101\001\001\000\014\006\137" +
    "\025\106\026\112\027\102\030\101\001\001\000\014\006" +
    "\136\025\106\026\112\027\102\030\101\001\001\000\014" +
    "\006\135\025\106\026\112\027\102\030\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\160\025\106\026" +
    "\112\027\102\030\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\164\025\106\026" +
    "\112\027\102\030\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\167\025\106\026\112\027\102\030" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\174\044\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\217\025\106\026\112\027\102\030\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\003" +
    "\222\004\033\005\006\007\035\010\030\011\040\012\023" +
    "\013\026\021\062\022\032\023\003\024\046\031\024\032" +
    "\052\036\014\037\050\040\051\042\021\045\041\051\013" +
    "\052\047\054\042\055\022\057\061\060\027\061\007\063" +
    "\056\001\001\000\066\004\072\005\006\007\035\010\030" +
    "\011\040\012\023\013\026\021\062\022\032\023\003\024" +
    "\046\031\024\032\052\036\014\037\050\040\051\042\021" +
    "\045\041\051\013\052\047\054\042\055\022\057\061\060" +
    "\027\061\007\063\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\230\025\106\026\112\027\102\030" +
    "\101\053\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\233\025\106\026\112\027" +
    "\102\030\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\245\025" +
    "\106\026\112\027\102\030\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\253\025\106\026\112\027\102\030\101\033\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\256\025\106\026\112\027\102\030\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\262\001\001\000\002\001\001\000\016" +
    "\006\253\025\106\026\112\027\102\030\101\033\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\253\025\106\026\112\027" +
    "\102\030\101\033\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\046\276\047\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\302\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\304\025\106\026\112\027\102\030\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\311\056\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\003\314\004" +
    "\033\005\006\007\035\010\030\011\040\012\023\013\026" +
    "\021\062\022\032\023\003\024\046\031\024\032\052\036" +
    "\014\037\050\040\051\042\021\045\041\051\013\052\047" +
    "\054\042\055\022\057\061\060\027\061\007\063\056\001" +
    "\001\000\066\004\072\005\006\007\035\010\030\011\040" +
    "\012\023\013\026\021\062\022\032\023\003\024\046\031" +
    "\024\032\052\036\014\037\050\040\051\042\021\045\041" +
    "\051\013\052\047\054\042\055\022\057\061\060\027\061" +
    "\007\063\056\001\001\000\002\001\001\000\004\007\323" +
    "\001\001\000\002\001\001\000\070\003\321\004\033\005" +
    "\006\007\035\010\030\011\040\012\023\013\026\021\062" +
    "\022\032\023\003\024\046\031\024\032\052\036\014\037" +
    "\050\040\051\042\021\045\041\051\013\052\047\054\042" +
    "\055\022\057\061\060\027\061\007\063\056\001\001\000" +
    "\066\004\072\005\006\007\035\010\030\011\040\012\023" +
    "\013\026\021\062\022\032\023\003\024\046\031\024\032" +
    "\052\036\014\037\050\040\051\042\021\045\041\051\013" +
    "\052\047\054\042\055\022\057\061\060\027\061\007\063" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\326\025\106\026\112\027\102\030" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\311\056\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\003\344\004\033" +
    "\005\006\007\035\010\030\011\040\012\023\013\026\021" +
    "\062\022\032\023\003\024\046\031\024\032\052\036\014" +
    "\037\050\040\051\042\021\045\041\051\013\052\047\054" +
    "\042\055\022\057\061\060\027\061\007\063\056\001\001" +
    "\000\066\004\072\005\006\007\035\010\030\011\040\012" +
    "\023\013\026\021\062\022\032\023\003\024\046\031\024" +
    "\032\052\036\014\037\050\040\051\042\021\045\041\051" +
    "\013\052\047\054\042\055\022\057\061\060\027\061\007" +
    "\063\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\360\025\106\026\112\027\102\030\101\001\001" +
    "\000\014\006\357\025\106\026\112\027\102\030\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\230" +
    "\025\106\026\112\027\102\030\101\053\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\365\025\106\026\112\027\102\030\101\001\001\000\014" +
    "\006\364\025\106\026\112\027\102\030\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\370\025\106\026\112\027\102\030\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\374\025\106\026\112\027\102\030\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\377\025\106" +
    "\026\112\027\102\030\101\001\001\000\002\001\001\000" +
    "\014\006\u0101\025\106\026\112\027\102\030\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\003\u0104\004" +
    "\033\005\006\007\035\010\030\011\040\012\023\013\026" +
    "\021\062\022\032\023\003\024\046\031\024\032\052\036" +
    "\014\037\050\040\051\042\021\045\041\051\013\052\047" +
    "\054\042\055\022\057\061\060\027\061\007\063\056\001" +
    "\001\000\066\004\072\005\006\007\035\010\030\011\040" +
    "\012\023\013\026\021\062\022\032\023\003\024\046\031" +
    "\024\032\052\036\014\037\050\040\051\042\021\045\041" +
    "\051\013\052\047\054\042\055\022\057\061\060\027\061" +
    "\007\063\056\001\001\000\002\001\001\000\004\012\u0108" +
    "\001\001\000\070\003\u0109\004\033\005\006\007\035\010" +
    "\030\011\040\012\023\013\026\021\062\022\032\023\003" +
    "\024\046\031\024\032\052\036\014\037\050\040\051\042" +
    "\021\045\041\051\013\052\047\054\042\055\022\057\061" +
    "\060\027\061\007\063\056\001\001\000\002\001\001\000" +
    "\066\004\072\005\006\007\035\010\030\011\040\012\023" +
    "\013\026\021\062\022\032\023\003\024\046\031\024\032" +
    "\052\036\014\037\050\040\051\042\021\045\041\051\013" +
    "\052\047\054\042\055\022\057\061\060\027\061\007\063" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u0111\001\001\000\024\006\u0113\015\u0116\016\u0112\017\u0114" +
    "\020\u0117\025\106\026\112\027\102\030\101\001\001\000" +
    "\002\001\001\000\020\006\u0113\017\u0122\020\u0123\025\106" +
    "\026\112\027\102\030\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\003" +
    "\u011b\004\033\005\006\007\035\010\030\011\040\012\023" +
    "\013\026\021\062\022\032\023\003\024\046\031\024\032" +
    "\052\036\014\037\050\040\051\042\021\045\041\051\013" +
    "\052\047\054\042\055\022\057\061\060\027\061\007\063" +
    "\056\001\001\000\066\004\072\005\006\007\035\010\030" +
    "\011\040\012\023\013\026\021\062\022\032\023\003\024" +
    "\046\031\024\032\052\036\014\037\050\040\051\042\021" +
    "\045\041\051\013\052\047\054\042\055\022\057\061\060" +
    "\027\061\007\063\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\003\u0120\004\033\005" +
    "\006\007\035\010\030\011\040\012\023\013\026\021\062" +
    "\022\032\023\003\024\046\031\024\032\052\036\014\037" +
    "\050\040\051\042\021\045\041\051\013\052\047\054\042" +
    "\055\022\057\061\060\027\061\007\063\056\001\001\000" +
    "\066\004\072\005\006\007\035\010\030\011\040\012\023" +
    "\013\026\021\062\022\032\023\003\024\046\031\024\032" +
    "\052\036\014\037\050\040\051\042\021\045\041\051\013" +
    "\052\047\054\042\055\022\057\061\060\027\061\007\063" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u0126\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\u0128\025\106\026\112\027\102" +
    "\030\101\001\001\000\002\001\001\000\004\031\u012b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\003\u012e\004\033\005\006\007\035\010\030\011" +
    "\040\012\023\013\026\021\062\022\032\023\003\024\046" +
    "\031\024\032\052\036\014\037\050\040\051\042\021\045" +
    "\041\051\013\052\047\054\042\055\022\057\061\060\027" +
    "\061\007\063\056\001\001\000\066\004\072\005\006\007" +
    "\035\010\030\011\040\012\023\013\026\021\062\022\032" +
    "\023\003\024\046\031\024\032\052\036\014\037\050\040" +
    "\051\042\021\045\041\051\013\052\047\054\042\055\022" +
    "\057\061\060\027\061\007\063\056\001\001\000\002\001" +
    "\001\000\014\006\u0131\025\106\026\112\027\102\030\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

    //clases, objetos, variables, listas, etc.


    // salida consola
    public List<String> salidas = new ArrayList<String>();

    // errores
    public ArrayList<Excepcion> Errores = new ArrayList();

    // Método al que se llama automáticamente ante algún error sintáctico.
    public void syntax_error(Symbol s){ 
        Errores.add(new Excepcion("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left, s.right));
        } 

    // Método al que se llama automáticamente ante algún error sintáctico, en el que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sintactico irrecuperable en la Linea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }

    public ArrayList<Excepcion> getErrores(){
        return Errores;
    }

    //========================




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= declaracion_id PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= asignacion_id PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= sentencia_match 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= sentencia_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= sentencia_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= sentencia_do_while PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= inc_dec PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= imprimir 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= declaracion_vector PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= asignacion_vl PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= declaracion_listas PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= append PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= struct PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= instanciar_struct PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= asignacion_struct PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= funcion 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= metodo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= llamada PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= round 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= length 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= toString 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= start_with PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= RETURN expresion PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= RETURN PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= CONTINUE PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= BREAK PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Break(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= error PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion_id ::= mutabilidad ID DOS_PT tipo_datos IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(a,b,c,d,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_id",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_id ::= mutabilidad ID DOS_PT tipo_datos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(a,b,c,null,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_id",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // mutabilidad ::= VAR 
            {
              String RESULT =null;
		 RESULT = "var"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mutabilidad",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // mutabilidad ::= CONST 
            {
              String RESULT =null;
		 RESULT = "const"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mutabilidad",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacion_id ::= ID IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AsignacionVariables(a,b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_id",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia_if ::= IF PAR_IZQ expresion PAR_DER LLAV_IZQ instrucciones LLAV_DER ELSE sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new SentenciaIfElseIf(a,b,c,null,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_if",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia_if ::= IF PAR_IZQ expresion PAR_DER LLAV_IZQ instrucciones LLAV_DER ELSE LLAV_IZQ instrucciones LLAV_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new SentenciaIfElse(a,b,c,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_if",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia_if ::= IF PAR_IZQ expresion PAR_DER LLAV_IZQ instrucciones LLAV_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new SentenciaIf(a,b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_if",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia_match ::= MATCH expresion entornos 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_match",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // entornos ::= LLAV_IZQ cases_default LLAV_DER 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entornos",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // entornos ::= LLAV_IZQ LLAV_DER 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entornos",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cases_default ::= cases default 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases_default",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cases_default ::= cases 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases_default",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cases_default ::= default 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases_default",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cases ::= cases case 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cases ::= case 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // case ::= expresion CASE LLAV_IZQ instrucciones LLAV_DER 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("case",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // default ::= DEFAULT CASE LLAV_IZQ instrucciones LLAV_DER 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("default",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia_while ::= WHILE PAR_IZQ expresion PAR_DER LLAV_IZQ instrucciones LLAV_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new SentenciaWhile(a,b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_while",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia_for ::= FOR PAR_IZQ asignacion_id PT_COMA expresion PT_COMA inc_dec PAR_DER LLAV_IZQ instrucciones LLAV_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new For(a,b,c,d,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_for",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia_do_while ::= DO LLAV_IZQ instrucciones LLAV_DER WHILE PAR_IZQ expresion PAR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new SentenciaDoWhile(a,b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // imprimir ::= PRINTLN PAR_IZQ expresion PAR_DER PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Print(a,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= aritmeticos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= relacionales 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= logicos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= casteo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AccesoVariables(a,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(Double.parseDouble(a), new Tipo(tipoDato.DECIMAL),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // aritmeticos ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.SUMA,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // aritmeticos ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.RESTA,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // aritmeticos ::= expresion POR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.MULTIPLICACION,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // aritmeticos ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.DIVISION,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // aritmeticos ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.MODULO,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // aritmeticos ::= expresion POTENCIA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.POTENCIA,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // aritmeticos ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a   , OperadoresAritmeticos.NEGACION,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // relacionales ::= expresion IGUALIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.EQUALS,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // relacionales ::= expresion DISTINTO expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.NOT_EQUALS,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // relacionales ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.GREATER_THAN,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // relacionales ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.LESS_THAN,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // relacionales ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.GREATER_THAN_OR_EQUALS,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // relacionales ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.LESS_THAN_OR_EQUALS,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // logicos ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.OR, b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicos",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // logicos ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.AND, b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicos",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // logicos ::= expresion XOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.XOR, b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicos",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // logicos ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.NOT, null,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicos",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // casteo ::= PAR_IZQ tipo_datos PAR_DER expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Casteos(a,b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casteo",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // inc_dec ::= ID INC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new IncDec(a, b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inc_dec",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // inc_dec ::= ID DEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new IncDec(a, b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inc_dec",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tipo_datos ::= INT 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.ENTERO);   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tipo_datos ::= DOUBLE 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.DECIMAL);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tipo_datos ::= BOOL 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tipo_datos ::= STRING 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.CADENA);   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tipo_datos ::= CHAR 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // declaracion_vector ::= mutabilidad ID DOS_PT tipo_datos COR_IZQ COR_DER IGUAL COR_IZQ lista_valores COR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_vector",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // declaracion_vector ::= mutabilidad ID DOS_PT tipo_datos COR_IZQ COR_DER COR_IZQ COR_DER IGUAL COR_IZQ lista_valores2 COR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_vector",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // lista_valores ::= lista_valores COMA expresion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_valores",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // lista_valores ::= expresion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_valores",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // lista_valores2 ::= lista_valores2 COMA COR_IZQ lista_valores COR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_valores2",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lista_valores2 ::= COR_IZQ lista_valores COR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_valores2",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // acceso_vl ::= ID COR_IZQ expresion COR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("acceso_vl",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // acceso_vl ::= ID COR_IZQ expresion COR_DER COR_IZQ expresion COR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("acceso_vl",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // asignacion_vl ::= ID COR_IZQ expresion COR_DER IGUAL expresion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_vl",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // asignacion_vl ::= ID COR_IZQ expresion COR_DER COR_IZQ expresion COR_DER IGUAL expresion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_vl",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declaracion_listas ::= LIST MENOR tipo_datos MAYOR ID IGUAL NEW LIST PAR_IZQ PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_listas",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // append ::= ID PUNTO APPEND PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("append",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // remove ::= ID PUNTO REMOVE PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("remove",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // struct ::= STRUCT LLAV_IZQ lista_structs LLAV_DER ID 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("struct",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_structs ::= lista_structs campos 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_structs",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // lista_structs ::= campos 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_structs",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // campos ::= ID DOS_PT tipo_datos PT_COMA 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("campos",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // instanciar_struct ::= mutabilidad ID DOS_PT ID IGUAL LLAV_IZQ valores_struct LLAV_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciar_struct",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // valores_struct ::= valores_struct COMA valor_struc 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_struct",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // valores_struct ::= valor_struc 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valores_struct",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // valor_struc ::= ID DOS_PT expresion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("valor_struc",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // acceso_struct ::= ID PUNTO ID 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("acceso_struct",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // asignacion_struct ::= ID PUNTO ID IGUAL expresion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_struct",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // funcion ::= tipo_datos ID PAR_IZQ parametros PAR_DER LLAV_IZQ instrucciones LLAV_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametros ::= parametros COMA tipo_datos ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; var l2 = new HashMap<String, Object>(); l2.put("id",c); l2.put("tipo",b); RESULT.add(l2); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametros ::= tipo_datos ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>(); var l = new HashMap<String, Object>(); l.put("id",b); l.put("tipo",a); RESULT.add(l); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // metodo ::= VOID ID PAR_IZQ parametros PAR_DER LLAV_IZQ instrucciones LLAV_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Metodo(a,b,c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // metodo ::= VOID ID PAR_IZQ PAR_DER LLAV_IZQ instrucciones LLAV_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Metodo(a,new LinkedList<HashMap>(),b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // parametros_llamada ::= parametros_llamada COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_llamada",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametros_llamada ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametros_llamada",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // llamada ::= ID PAR_IZQ parametros_llamada PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // llamada ::= ID PAR_IZQ PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamada",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // round ::= ROUND PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("round",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // length ::= LENGTH PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("length",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // toString ::= TOSTRING PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("toString",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // find ::= ID PUNTO FIND PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("find",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // start_with ::= START_WITH ID PAR_IZQ parametros_llamada PAR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Start_W(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("start_with",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // start_with ::= START_WITH ID PAR_IZQ PAR_DER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Start_W(a,new LinkedList(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("start_with",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
