
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;
import Errores.Excepcion;
import abstracto.*;
import simbolo.*;
import instrucciones.Print;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\004\005\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\003\000\002\010\010" +
    "\000\002\010\006\000\002\033\003\000\002\033\003\000" +
    "\002\011\005\000\002\012\011\000\002\012\011\000\002" +
    "\012\007\000\002\013\005\000\002\014\005\000\002\014" +
    "\004\000\002\015\004\000\002\015\003\000\002\015\003" +
    "\000\002\016\004\000\002\016\003\000\002\017\005\000" +
    "\002\020\005\000\002\021\007\000\002\022\007\000\002" +
    "\023\007\000\002\024\004\000\002\024\003\000\002\025" +
    "\004\000\002\025\003\000\002\026\005\000\002\027\005" +
    "\000\002\027\003\000\002\030\005\000\002\031\010\000" +
    "\002\032\005\000\002\032\004\000\002\005\007\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\004\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\004\000\002\037" +
    "\006\000\002\040\004\000\002\040\004\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\056\003\033\006\041\021\016\024\036\043" +
    "\007\044\030\045\026\047\017\050\035\056\032\057\051" +
    "\060\052\061\005\062\024\065\015\066\046\067\014\070" +
    "\053\071\042\072\011\073\031\104\013\001\002\000\062" +
    "\002\ufff7\003\ufff7\006\ufff7\010\ufff7\021\ufff7\024\ufff7\043" +
    "\ufff7\044\ufff7\045\ufff7\047\ufff7\050\ufff7\056\ufff7\057\ufff7" +
    "\060\ufff7\061\ufff7\062\ufff7\065\ufff7\066\ufff7\067\ufff7\070" +
    "\ufff7\071\ufff7\072\ufff7\073\ufff7\104\ufff7\001\002\000\004" +
    "\045\uffec\001\002\000\062\002\ufff5\003\ufff5\006\ufff5\010" +
    "\ufff5\021\ufff5\024\ufff5\043\ufff5\044\ufff5\045\ufff5\047\ufff5" +
    "\050\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\065" +
    "\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5" +
    "\104\ufff5\001\002\000\060\004\uffc9\007\uffc9\011\uffc9\013" +
    "\uffc9\017\uffc9\020\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\032\uffc9\033\uffc9\034\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\045\uffc9\074\uffc9" +
    "\001\002\000\060\002\000\003\033\006\041\021\016\024" +
    "\036\043\007\044\030\045\026\047\017\050\035\056\032" +
    "\057\051\060\052\061\005\062\024\065\015\066\046\067" +
    "\014\070\053\071\042\072\011\073\031\104\013\001\002" +
    "\000\004\004\251\001\002\000\060\004\uffcb\007\uffcb\011" +
    "\uffcb\013\uffcb\017\uffcb\020\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\045\uffcb" +
    "\074\uffcb\001\002\000\004\006\245\001\002\000\004\006" +
    "\216\001\002\000\026\006\041\021\016\024\036\043\007" +
    "\044\030\045\061\047\017\050\035\056\032\057\051\001" +
    "\002\000\026\006\041\021\016\024\036\043\007\044\030" +
    "\045\061\047\017\050\035\056\032\057\051\001\002\000" +
    "\060\004\uffc4\007\uffc4\011\uffc4\013\uffc4\017\uffc4\020\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\045\uffc4\074\uffc4\001\002\000\062\002" +
    "\ufffb\003\ufffb\006\ufffb\010\ufffb\021\ufffb\024\ufffb\043\ufffb" +
    "\044\ufffb\045\ufffb\047\ufffb\050\ufffb\056\ufffb\057\ufffb\060" +
    "\ufffb\061\ufffb\062\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb" +
    "\071\ufffb\072\ufffb\073\ufffb\104\ufffb\001\002\000\004\004" +
    "\173\001\002\000\062\002\ufffa\003\ufffa\006\ufffa\010\ufffa" +
    "\021\ufffa\024\ufffa\043\ufffa\044\ufffa\045\ufffa\047\ufffa\050" +
    "\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\065\ufffa" +
    "\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\104" +
    "\ufffa\001\002\000\004\004\172\001\002\000\004\006\163" +
    "\001\002\000\062\002\ufff8\003\ufff8\006\ufff8\010\ufff8\021" +
    "\ufff8\024\ufff8\043\ufff8\044\ufff8\045\ufff8\047\ufff8\050\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\065\ufff8\066" +
    "\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\104\ufff8" +
    "\001\002\000\046\017\uffca\020\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\161\036\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\001\002\000\062\002\ufffe\003\ufffe\006\ufffe\010\ufffe" +
    "\021\ufffe\024\ufffe\043\ufffe\044\ufffe\045\ufffe\047\ufffe\050" +
    "\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\065\ufffe" +
    "\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe\104" +
    "\ufffe\001\002\000\060\004\uffc8\007\uffc8\011\uffc8\013\uffc8" +
    "\017\uffc8\020\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\045\uffc8\074\uffc8\001" +
    "\002\000\030\004\156\006\041\021\016\024\036\043\007" +
    "\044\030\045\061\047\017\050\035\056\032\057\051\001" +
    "\002\000\060\004\uffc7\007\uffc7\011\uffc7\013\uffc7\017\uffc7" +
    "\020\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\030\uffc7\032\uffc7\033\uffc7\034\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\045\uffc7\074\uffc7\001\002\000" +
    "\062\002\ufff0\003\ufff0\006\ufff0\010\ufff0\021\ufff0\024\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\047\ufff0\050\ufff0\056\ufff0\057" +
    "\ufff0\060\ufff0\061\ufff0\062\ufff0\065\ufff0\066\ufff0\067\ufff0" +
    "\070\ufff0\071\ufff0\072\ufff0\073\ufff0\104\ufff0\001\002\000" +
    "\004\004\155\001\002\000\060\004\uffc5\007\uffc5\011\uffc5" +
    "\013\uffc5\017\uffc5\020\uffc5\022\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\045\uffc5\074" +
    "\uffc5\001\002\000\026\006\041\021\016\024\036\043\007" +
    "\044\030\045\061\047\017\050\035\056\032\057\051\001" +
    "\002\000\044\017\063\020\101\022\064\023\073\024\065" +
    "\025\071\026\075\027\070\030\066\032\152\033\153\034" +
    "\100\036\077\037\076\040\067\041\074\042\062\001\002" +
    "\000\060\004\uffcc\007\uffcc\011\uffcc\013\uffcc\017\uffcc\020" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\032\uffcc\033\uffcc\034\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\045\uffcc\074\uffcc\001\002\000\040" +
    "\006\041\021\016\024\036\043\007\044\030\045\061\047" +
    "\017\050\035\051\140\052\135\053\134\054\137\055\136" +
    "\056\032\057\051\001\002\000\004\004\144\001\002\000" +
    "\004\045\132\001\002\000\060\004\uffcd\007\uffcd\011\uffcd" +
    "\013\uffcd\017\uffcd\020\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\045\uffcd\074" +
    "\uffcd\001\002\000\060\004\uffce\007\uffce\011\uffce\013\uffce" +
    "\017\uffce\020\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\032\uffce\033\uffce\034\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\045\uffce\074\uffce\001" +
    "\002\000\004\006\126\001\002\000\004\002\125\001\002" +
    "\000\062\002\ufff9\003\ufff9\006\ufff9\010\ufff9\021\ufff9\024" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\047\ufff9\050\ufff9\056\ufff9" +
    "\057\ufff9\060\ufff9\061\ufff9\062\ufff9\065\ufff9\066\ufff9\067" +
    "\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\104\ufff9\001\002" +
    "\000\060\004\uffc6\007\uffc6\011\uffc6\013\uffc6\017\uffc6\020" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\032\uffc6\033\uffc6\034\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\045\uffc6\074\uffc6\001\002\000\004" +
    "\045\uffed\001\002\000\004\011\054\001\002\000\060\003" +
    "\033\006\041\010\122\021\016\024\036\043\007\044\030" +
    "\045\026\047\017\050\035\056\032\057\051\060\052\061" +
    "\005\062\024\065\015\066\046\067\014\070\053\071\042" +
    "\072\011\073\031\104\013\001\002\000\004\066\056\001" +
    "\002\000\004\006\057\001\002\000\026\006\041\021\016" +
    "\024\036\043\007\044\030\045\061\047\017\050\035\056" +
    "\032\057\051\001\002\000\042\007\072\017\063\020\101" +
    "\022\064\023\073\024\065\025\071\026\075\027\070\030" +
    "\066\034\100\036\077\037\076\040\067\041\074\042\062" +
    "\001\002\000\060\004\uffca\007\uffca\011\uffca\013\uffca\017" +
    "\uffca\020\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\032\uffca\033\uffca\034\uffca\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\042\uffca\045\uffca\074\uffca\001\002" +
    "\000\026\006\041\021\016\024\036\043\007\044\030\045" +
    "\061\047\017\050\035\056\032\057\051\001\002\000\026" +
    "\006\041\021\016\024\036\043\007\044\030\045\061\047" +
    "\017\050\035\056\032\057\051\001\002\000\026\006\041" +
    "\021\016\024\036\043\007\044\030\045\061\047\017\050" +
    "\035\056\032\057\051\001\002\000\026\006\041\021\016" +
    "\024\036\043\007\044\030\045\061\047\017\050\035\056" +
    "\032\057\051\001\002\000\026\006\041\021\016\024\036" +
    "\043\007\044\030\045\061\047\017\050\035\056\032\057" +
    "\051\001\002\000\026\006\041\021\016\024\036\043\007" +
    "\044\030\045\061\047\017\050\035\056\032\057\051\001" +
    "\002\000\026\006\041\021\016\024\036\043\007\044\030" +
    "\045\061\047\017\050\035\056\032\057\051\001\002\000" +
    "\026\006\041\021\016\024\036\043\007\044\030\045\061" +
    "\047\017\050\035\056\032\057\051\001\002\000\062\002" +
    "\uffd2\003\uffd2\006\uffd2\010\uffd2\021\uffd2\024\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\047\uffd2\050\uffd2\056\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\062\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2" +
    "\071\uffd2\072\uffd2\073\uffd2\104\uffd2\001\002\000\026\006" +
    "\041\021\016\024\036\043\007\044\030\045\061\047\017" +
    "\050\035\056\032\057\051\001\002\000\026\006\041\021" +
    "\016\024\036\043\007\044\030\045\061\047\017\050\035" +
    "\056\032\057\051\001\002\000\026\006\041\021\016\024" +
    "\036\043\007\044\030\045\061\047\017\050\035\056\032" +
    "\057\051\001\002\000\026\006\041\021\016\024\036\043" +
    "\007\044\030\045\061\047\017\050\035\056\032\057\051" +
    "\001\002\000\026\006\041\021\016\024\036\043\007\044" +
    "\030\045\061\047\017\050\035\056\032\057\051\001\002" +
    "\000\026\006\041\021\016\024\036\043\007\044\030\045" +
    "\061\047\017\050\035\056\032\057\051\001\002\000\026" +
    "\006\041\021\016\024\036\043\007\044\030\045\061\047" +
    "\017\050\035\056\032\057\051\001\002\000\060\004\uffb5" +
    "\007\uffb5\011\uffb5\013\uffb5\017\063\020\uffb5\022\064\023" +
    "\073\024\065\025\071\026\075\027\070\030\066\032\uffb5" +
    "\033\uffb5\034\100\036\077\037\076\040\067\041\074\042" +
    "\062\045\uffb5\074\uffb5\001\002\000\060\004\uffba\007\uffba" +
    "\011\uffba\013\uffba\017\uffba\020\uffba\022\uffba\023\073\024" +
    "\065\025\071\026\075\027\070\030\066\032\uffba\033\uffba" +
    "\034\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\045" +
    "\uffba\074\uffba\001\002\000\060\004\uffbb\007\uffbb\011\uffbb" +
    "\013\uffbb\017\uffbb\020\uffbb\022\uffbb\023\073\024\065\025" +
    "\071\026\075\027\070\030\066\032\uffbb\033\uffbb\034\uffbb" +
    "\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\045\uffbb\074" +
    "\uffbb\001\002\000\060\004\uffb9\007\uffb9\011\uffb9\013\uffb9" +
    "\017\uffb9\020\uffb9\022\uffb9\023\073\024\065\025\071\026" +
    "\075\027\070\030\066\032\uffb9\033\uffb9\034\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\042\uffb9\045\uffb9\074\uffb9\001" +
    "\002\000\060\004\uffbf\007\uffbf\011\uffbf\013\uffbf\017\uffbf" +
    "\020\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027" +
    "\uffbf\030\066\032\uffbf\033\uffbf\034\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\045\uffbf\074\uffbf\001\002\000" +
    "\060\004\uffb7\007\uffb7\011\uffb7\013\uffb7\017\uffb7\020\uffb7" +
    "\022\uffb7\023\073\024\065\025\071\026\075\027\070\030" +
    "\066\032\uffb7\033\uffb7\034\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\045\uffb7\074\uffb7\001\002\000\060\004" +
    "\uffc2\007\uffc2\011\uffc2\013\uffc2\017\uffc2\020\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\071\026\075\027\070\030\066\032" +
    "\uffc2\033\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\045\uffc2\074\uffc2\001\002\000\060\004\uffc0\007" +
    "\uffc0\011\uffc0\013\uffc0\017\uffc0\020\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\066\032\uffc0\033" +
    "\uffc0\034\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\045\uffc0\074\uffc0\001\002\000\060\004\uffbe\007\uffbe\011" +
    "\uffbe\013\uffbe\017\uffbe\020\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\066\032\uffbe\033\uffbe\034" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\045\uffbe" +
    "\074\uffbe\001\002\000\060\004\uffb8\007\uffb8\011\uffb8\013" +
    "\uffb8\017\uffb8\020\uffb8\022\uffb8\023\073\024\065\025\071" +
    "\026\075\027\070\030\066\032\uffb8\033\uffb8\034\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\045\uffb8\074\uffb8" +
    "\001\002\000\060\004\uffbd\007\uffbd\011\uffbd\013\uffbd\017" +
    "\uffbd\020\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\032\uffbd\033\uffbd\034\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\045\uffbd\074\uffbd\001\002" +
    "\000\060\004\uffc1\007\uffc1\011\uffc1\013\uffc1\017\uffc1\020" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\071\026\075\027\070" +
    "\030\066\032\uffc1\033\uffc1\034\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\045\uffc1\074\uffc1\001\002\000\060" +
    "\004\uffb3\007\uffb3\011\uffb3\013\uffb3\017\uffb3\020\uffb3\022" +
    "\uffb3\023\073\024\065\025\071\026\075\027\070\030\066" +
    "\032\uffb3\033\uffb3\034\100\036\077\037\076\040\067\041" +
    "\074\042\062\045\uffb3\074\uffb3\001\002\000\060\004\uffb4" +
    "\007\uffb4\011\uffb4\013\uffb4\017\uffb4\020\uffb4\022\064\023" +
    "\073\024\065\025\071\026\075\027\070\030\066\032\uffb4" +
    "\033\uffb4\034\100\036\077\037\076\040\067\041\074\042" +
    "\062\045\uffb4\074\uffb4\001\002\000\060\004\uffb6\007\uffb6" +
    "\011\uffb6\013\uffb6\017\uffb6\020\uffb6\022\uffb6\023\073\024" +
    "\065\025\071\026\075\027\070\030\066\032\uffb6\033\uffb6" +
    "\034\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\045" +
    "\uffb6\074\uffb6\001\002\000\060\003\033\006\041\010\124" +
    "\021\016\024\036\043\007\044\030\045\026\047\017\050" +
    "\035\056\032\057\051\060\052\061\005\062\024\065\015" +
    "\066\046\067\014\070\053\071\042\072\011\073\031\104" +
    "\013\001\002\000\066\002\uffd0\003\uffd0\006\uffd0\010\uffd0" +
    "\021\uffd0\024\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0\050" +
    "\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0" +
    "\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073" +
    "\uffd0\075\uffd0\104\uffd0\001\002\000\062\002\uffff\003\uffff" +
    "\006\uffff\010\uffff\021\uffff\024\uffff\043\uffff\044\uffff\045" +
    "\uffff\047\uffff\050\uffff\056\uffff\057\uffff\060\uffff\061\uffff" +
    "\062\uffff\065\uffff\066\uffff\067\uffff\070\uffff\071\uffff\072" +
    "\uffff\073\uffff\104\uffff\001\002\000\066\002\uffd1\003\uffd1" +
    "\006\uffd1\010\uffd1\021\uffd1\024\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\047\uffd1\050\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1" +
    "\062\uffd1\063\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071" +
    "\uffd1\072\uffd1\073\uffd1\075\uffd1\104\uffd1\001\002\000\004" +
    "\002\001\001\002\000\026\006\041\021\016\024\036\043" +
    "\007\044\030\045\061\047\017\050\035\056\032\057\051" +
    "\001\002\000\042\007\130\017\063\020\101\022\064\023" +
    "\073\024\065\025\071\026\075\027\070\030\066\034\100" +
    "\036\077\037\076\040\067\041\074\042\062\001\002\000" +
    "\004\011\054\001\002\000\062\002\uffdd\003\uffdd\006\uffdd" +
    "\010\uffdd\021\uffdd\024\uffdd\043\uffdd\044\uffdd\045\uffdd\047" +
    "\uffdd\050\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd" +
    "\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073" +
    "\uffdd\104\uffdd\001\002\000\004\005\133\001\002\000\014" +
    "\051\140\052\135\053\134\054\137\055\136\001\002\000" +
    "\012\004\uffab\007\uffab\035\uffab\045\uffab\001\002\000\012" +
    "\004\uffad\007\uffad\035\uffad\045\uffad\001\002\000\012\004" +
    "\uffac\007\uffac\035\uffac\045\uffac\001\002\000\012\004\uffaa" +
    "\007\uffaa\035\uffaa\045\uffaa\001\002\000\012\004\uffae\007" +
    "\uffae\035\uffae\045\uffae\001\002\000\006\004\uffee\035\142" +
    "\001\002\000\026\006\041\021\016\024\036\043\007\044" +
    "\030\045\061\047\017\050\035\056\032\057\051\001\002" +
    "\000\042\004\uffef\017\063\020\101\022\064\023\073\024" +
    "\065\025\071\026\075\027\070\030\066\034\100\036\077" +
    "\037\076\040\067\041\074\042\062\001\002\000\062\002" +
    "\ufff1\003\ufff1\006\ufff1\010\ufff1\021\ufff1\024\ufff1\043\ufff1" +
    "\044\ufff1\045\ufff1\047\ufff1\050\ufff1\056\ufff1\057\ufff1\060" +
    "\ufff1\061\ufff1\062\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1" +
    "\071\ufff1\072\ufff1\073\ufff1\104\ufff1\001\002\000\042\007" +
    "\151\017\063\020\101\022\064\023\073\024\065\025\071" +
    "\026\075\027\070\030\066\034\100\036\077\037\076\040" +
    "\067\041\074\042\062\001\002\000\004\007\147\001\002" +
    "\000\026\006\041\021\016\024\036\043\007\044\030\045" +
    "\061\047\017\050\035\056\032\057\051\001\002\000\060" +
    "\004\uffb1\007\uffb1\011\uffb1\013\uffb1\017\063\020\101\022" +
    "\064\023\073\024\065\025\071\026\075\027\070\030\066" +
    "\032\uffb1\033\uffb1\034\100\036\077\037\076\040\067\041" +
    "\074\042\062\045\uffb1\074\uffb1\001\002\000\060\004\uffc3" +
    "\007\uffc3\011\uffc3\013\uffc3\017\uffc3\020\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\045\uffc3\074\uffc3\001\002\000\006\004\uffb0\007\uffb0" +
    "\001\002\000\006\004\uffaf\007\uffaf\001\002\000\060\004" +
    "\uffbc\007\uffbc\011\uffbc\013\uffbc\017\uffbc\020\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\045\uffbc\074\uffbc\001\002\000\062\002\ufffc\003" +
    "\ufffc\006\ufffc\010\ufffc\021\ufffc\024\ufffc\043\ufffc\044\ufffc" +
    "\045\ufffc\047\ufffc\050\ufffc\056\ufffc\057\ufffc\060\ufffc\061" +
    "\ufffc\062\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc" +
    "\072\ufffc\073\ufffc\104\ufffc\001\002\000\062\002\ufff3\003" +
    "\ufff3\006\ufff3\010\ufff3\021\ufff3\024\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\047\ufff3\050\ufff3\056\ufff3\057\ufff3\060\ufff3\061" +
    "\ufff3\062\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3" +
    "\072\ufff3\073\ufff3\104\ufff3\001\002\000\042\004\160\017" +
    "\063\020\101\022\064\023\073\024\065\025\071\026\075" +
    "\027\070\030\066\034\100\036\077\037\076\040\067\041" +
    "\074\042\062\001\002\000\062\002\ufff4\003\ufff4\006\ufff4" +
    "\010\ufff4\021\ufff4\024\ufff4\043\ufff4\044\ufff4\045\ufff4\047" +
    "\ufff4\050\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4" +
    "\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073" +
    "\ufff4\104\ufff4\001\002\000\026\006\041\021\016\024\036" +
    "\043\007\044\030\045\061\047\017\050\035\056\032\057" +
    "\051\001\002\000\042\004\uffeb\017\063\020\101\022\064" +
    "\023\073\024\065\025\071\026\075\027\070\030\066\034" +
    "\100\036\077\037\076\040\067\041\074\042\062\001\002" +
    "\000\026\006\041\021\016\024\036\043\007\044\030\045" +
    "\061\047\017\050\035\056\032\057\051\001\002\000\042" +
    "\007\165\017\063\020\101\022\064\023\073\024\065\025" +
    "\071\026\075\027\070\030\066\034\100\036\077\037\076" +
    "\040\067\041\074\042\062\001\002\000\004\011\054\001" +
    "\002\000\064\002\uffe8\003\uffe8\006\uffe8\010\uffe8\021\uffe8" +
    "\024\uffe8\043\uffe8\044\uffe8\045\uffe8\047\uffe8\050\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\167\065\uffe8" +
    "\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\104" +
    "\uffe8\001\002\000\006\011\054\062\024\001\002\000\062" +
    "\002\uffe9\003\uffe9\006\uffe9\010\uffe9\021\uffe9\024\uffe9\043" +
    "\uffe9\044\uffe9\045\uffe9\047\uffe9\050\uffe9\056\uffe9\057\uffe9" +
    "\060\uffe9\061\uffe9\062\uffe9\065\uffe9\066\uffe9\067\uffe9\070" +
    "\uffe9\071\uffe9\072\uffe9\073\uffe9\104\uffe9\001\002\000\062" +
    "\002\uffea\003\uffea\006\uffea\010\uffea\021\uffea\024\uffea\043" +
    "\uffea\044\uffea\045\uffea\047\uffea\050\uffea\056\uffea\057\uffea" +
    "\060\uffea\061\uffea\062\uffea\065\uffea\066\uffea\067\uffea\070" +
    "\uffea\071\uffea\072\uffea\073\uffea\104\uffea\001\002\000\062" +
    "\002\ufffd\003\ufffd\006\ufffd\010\ufffd\021\ufffd\024\ufffd\043" +
    "\ufffd\044\ufffd\045\ufffd\047\ufffd\050\ufffd\056\ufffd\057\ufffd" +
    "\060\ufffd\061\ufffd\062\ufffd\065\ufffd\066\ufffd\067\ufffd\070" +
    "\ufffd\071\ufffd\072\ufffd\073\ufffd\104\ufffd\001\002\000\062" +
    "\002\ufff6\003\ufff6\006\ufff6\010\ufff6\021\ufff6\024\ufff6\043" +
    "\ufff6\044\ufff6\045\ufff6\047\ufff6\050\ufff6\056\ufff6\057\ufff6" +
    "\060\ufff6\061\ufff6\062\ufff6\065\ufff6\066\ufff6\067\ufff6\070" +
    "\ufff6\071\ufff6\072\ufff6\073\ufff6\104\ufff6\001\002\000\060" +
    "\004\uffb2\007\uffb2\011\uffb2\013\uffb2\017\uffb2\020\uffb2\022" +
    "\uffb2\023\073\024\065\025\071\026\075\027\070\030\066" +
    "\032\uffb2\033\uffb2\034\100\036\077\037\076\040\067\041" +
    "\074\042\062\045\uffb2\074\uffb2\001\002\000\042\011\176" +
    "\017\063\020\101\022\064\023\073\024\065\025\071\026" +
    "\075\027\070\030\066\034\100\036\077\037\076\040\067" +
    "\041\074\042\062\001\002\000\032\006\041\010\203\021" +
    "\016\024\036\043\007\044\030\045\061\047\017\050\035" +
    "\056\032\057\051\075\206\001\002\000\062\002\uffe7\003" +
    "\uffe7\006\uffe7\010\uffe7\021\uffe7\024\uffe7\043\uffe7\044\uffe7" +
    "\045\uffe7\047\uffe7\050\uffe7\056\uffe7\057\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7" +
    "\072\uffe7\073\uffe7\104\uffe7\001\002\000\032\006\041\010" +
    "\uffe3\021\016\024\036\043\007\044\030\045\061\047\017" +
    "\050\035\056\032\057\051\075\206\001\002\000\042\017" +
    "\063\020\101\022\064\023\073\024\065\025\071\026\075" +
    "\027\070\030\066\034\100\036\077\037\076\040\067\041" +
    "\074\042\062\074\212\001\002\000\032\006\uffe0\010\uffe0" +
    "\021\uffe0\024\uffe0\043\uffe0\044\uffe0\045\uffe0\047\uffe0\050" +
    "\uffe0\056\uffe0\057\uffe0\075\uffe0\001\002\000\062\002\uffe5" +
    "\003\uffe5\006\uffe5\010\uffe5\021\uffe5\024\uffe5\043\uffe5\044" +
    "\uffe5\045\uffe5\047\uffe5\050\uffe5\056\uffe5\057\uffe5\060\uffe5" +
    "\061\uffe5\062\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071" +
    "\uffe5\072\uffe5\073\uffe5\104\uffe5\001\002\000\004\010\211" +
    "\001\002\000\004\010\uffe2\001\002\000\004\074\207\001" +
    "\002\000\004\011\054\001\002\000\004\010\uffde\001\002" +
    "\000\062\002\uffe6\003\uffe6\006\uffe6\010\uffe6\021\uffe6\024" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\047\uffe6\050\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\065\uffe6\066\uffe6\067" +
    "\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6\104\uffe6\001\002" +
    "\000\004\011\054\001\002\000\032\006\uffdf\010\uffdf\021" +
    "\uffdf\024\uffdf\043\uffdf\044\uffdf\045\uffdf\047\uffdf\050\uffdf" +
    "\056\uffdf\057\uffdf\075\uffdf\001\002\000\032\006\uffe1\010" +
    "\uffe1\021\uffe1\024\uffe1\043\uffe1\044\uffe1\045\uffe1\047\uffe1" +
    "\050\uffe1\056\uffe1\057\uffe1\075\uffe1\001\002\000\004\010" +
    "\uffe4\001\002\000\016\045\222\051\140\052\135\053\134" +
    "\054\137\055\136\001\002\000\004\045\237\001\002\000" +
    "\006\004\uffd9\013\235\001\002\000\004\007\233\001\002" +
    "\000\004\035\231\001\002\000\006\004\uffd4\013\uffd4\001" +
    "\002\000\004\004\225\001\002\000\026\006\041\021\016" +
    "\024\036\043\007\044\030\045\061\047\017\050\035\056" +
    "\032\057\051\001\002\000\042\004\227\017\063\020\101" +
    "\022\064\023\073\024\065\025\071\026\075\027\070\030" +
    "\066\034\100\036\077\037\076\040\067\041\074\042\062" +
    "\001\002\000\026\006\041\021\016\024\036\043\007\044" +
    "\030\045\061\047\017\050\035\056\032\057\051\001\002" +
    "\000\004\007\uffdb\001\002\000\026\006\041\021\016\024" +
    "\036\043\007\044\030\045\061\047\017\050\035\056\032" +
    "\057\051\001\002\000\044\004\uffd3\013\uffd3\017\063\020" +
    "\101\022\064\023\073\024\065\025\071\026\075\027\070" +
    "\030\066\034\100\036\077\037\076\040\067\041\074\042" +
    "\062\001\002\000\004\011\054\001\002\000\062\002\uffdc" +
    "\003\uffdc\006\uffdc\010\uffdc\021\uffdc\024\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\047\uffdc\050\uffdc\056\uffdc\057\uffdc\060\uffdc" +
    "\061\uffdc\062\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071" +
    "\uffdc\072\uffdc\073\uffdc\104\uffdc\001\002\000\004\045\222" +
    "\001\002\000\006\004\uffd5\013\uffd5\001\002\000\004\035" +
    "\243\001\002\000\006\004\uffd7\045\uffd7\001\002\000\006" +
    "\004\uffda\045\237\001\002\000\006\004\uffd8\045\uffd8\001" +
    "\002\000\026\006\041\021\016\024\036\043\007\044\030" +
    "\045\061\047\017\050\035\056\032\057\051\001\002\000" +
    "\044\004\uffd6\017\063\020\101\022\064\023\073\024\065" +
    "\025\071\026\075\027\070\030\066\034\100\036\077\037" +
    "\076\040\067\041\074\042\062\045\uffd6\001\002\000\026" +
    "\006\041\021\016\024\036\043\007\044\030\045\061\047" +
    "\017\050\035\056\032\057\051\001\002\000\042\007\247" +
    "\017\063\020\101\022\064\023\073\024\065\025\071\026" +
    "\075\027\070\030\066\034\100\036\077\037\076\040\067" +
    "\041\074\042\062\001\002\000\004\004\250\001\002\000" +
    "\062\002\uffcf\003\uffcf\006\uffcf\010\uffcf\021\uffcf\024\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf\056\uffcf\057" +
    "\uffcf\060\uffcf\061\uffcf\062\uffcf\065\uffcf\066\uffcf\067\uffcf" +
    "\070\uffcf\071\uffcf\072\uffcf\073\uffcf\104\uffcf\001\002\000" +
    "\062\002\ufff2\003\ufff2\006\ufff2\010\ufff2\021\ufff2\024\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\047\ufff2\050\ufff2\056\ufff2\057" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\065\ufff2\066\ufff2\067\ufff2" +
    "\070\ufff2\071\ufff2\072\ufff2\073\ufff2\104\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\247\000\046\002\046\003\007\004\026\005\005\006" +
    "\036\010\022\011\033\012\017\013\021\021\047\022\024" +
    "\031\003\033\042\034\044\035\043\036\037\037\011\040" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\122\005\005\006" +
    "\036\010\022\011\033\012\017\013\021\021\047\022\024" +
    "\031\003\033\042\034\044\035\043\036\037\037\011\040" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\174\034\044\035" +
    "\043\036\037\037\011\001\001\000\014\006\173\034\044" +
    "\035\043\036\037\037\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\156" +
    "\034\044\035\043\036\037\037\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\006\153\034\044\035\043\036\037\037\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\144" +
    "\007\145\034\044\035\043\036\037\037\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\054" +
    "\001\001\000\044\003\120\004\026\005\005\006\036\010" +
    "\022\011\033\012\017\013\021\021\047\022\024\031\003" +
    "\033\042\034\044\035\043\036\037\037\011\040\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\057" +
    "\034\044\035\043\036\037\037\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\117\034\044\035\043" +
    "\036\037\037\011\001\001\000\014\006\116\034\044\035" +
    "\043\036\037\037\011\001\001\000\014\006\115\034\044" +
    "\035\043\036\037\037\011\001\001\000\014\006\114\034" +
    "\044\035\043\036\037\037\011\001\001\000\014\006\113" +
    "\034\044\035\043\036\037\037\011\001\001\000\014\006" +
    "\112\034\044\035\043\036\037\037\011\001\001\000\014" +
    "\006\111\034\044\035\043\036\037\037\011\001\001\000" +
    "\014\006\110\034\044\035\043\036\037\037\011\001\001" +
    "\000\002\001\001\000\014\006\107\034\044\035\043\036" +
    "\037\037\011\001\001\000\014\006\106\034\044\035\043" +
    "\036\037\037\011\001\001\000\014\006\105\034\044\035" +
    "\043\036\037\037\011\001\001\000\014\006\104\034\044" +
    "\035\043\036\037\037\011\001\001\000\014\006\103\034" +
    "\044\035\043\036\037\037\011\001\001\000\014\006\102" +
    "\034\044\035\043\036\037\037\011\001\001\000\014\006" +
    "\101\034\044\035\043\036\037\037\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\122\005\005\006" +
    "\036\010\022\011\033\012\017\013\021\021\047\022\024" +
    "\031\003\033\042\034\044\035\043\036\037\037\011\040" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\126\034\044\035" +
    "\043\036\037\037\011\001\001\000\002\001\001\000\004" +
    "\032\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\142\034\044\035\043\036\037" +
    "\037\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\147\034\044" +
    "\035\043\036\037\037\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\161\034\044\035\043" +
    "\036\037\037\011\001\001\000\002\001\001\000\014\006" +
    "\163\034\044\035\043\036\037\037\011\001\001\000\002" +
    "\001\001\000\004\032\165\001\001\000\002\001\001\000" +
    "\006\012\170\032\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\176\001\001\000\024\006\200\015\203" +
    "\016\177\017\201\020\204\034\044\035\043\036\037\037" +
    "\011\001\001\000\002\001\001\000\020\006\200\017\213" +
    "\020\214\034\044\035\043\036\037\037\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\216\023\220\024\223\027\217" +
    "\030\222\001\001\000\006\025\240\026\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\225\034\044\035" +
    "\043\036\037\037\011\001\001\000\002\001\001\000\016" +
    "\006\036\034\044\035\043\036\037\037\011\040\227\001" +
    "\001\000\002\001\001\000\014\006\231\034\044\035\043" +
    "\036\037\037\011\001\001\000\002\001\001\000\004\032" +
    "\233\001\001\000\002\001\001\000\004\030\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\241\001\001\000\002\001\001\000\014\006\243" +
    "\034\044\035\043\036\037\037\011\001\001\000\002\001" +
    "\001\000\014\006\245\034\044\035\043\036\037\037\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

    //clases, objetos, variables, listas, etc.


    // salida consola
    public List<String> salidas = new ArrayList<String>();

    // errores
    public ArrayList<Excepcion> Errores = new ArrayList();

    // Método al que se llama automáticamente ante algún error sintáctico.
    public void syntax_error(Symbol s){ 
        Errores.add(new Excepcion("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left, s.right));
        } 

    // Método al que se llama automáticamente ante algún error sintáctico, en el que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sintactico irrecuperable en la Linea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }

    public ArrayList<Excepcion> getErrores(){
        return Errores;
    }

    //========================





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= declaracion_id PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= asignacion_id PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= sentencia_if 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= sentencia_match 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= sentencia_while 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= sentencia_for 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= sentencia_do_while 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= inc_dec PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= imprimir 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= RETURN expresion PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= RETURN PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= CONTINUE PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= BREAK PT_COMA 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion_id ::= mutabilidad ID DOS_PT tipo_datos IGUAL expresion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_id",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion_id ::= mutabilidad ID DOS_PT tipo_datos 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion_id",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // mutabilidad ::= VAR 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mutabilidad",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // mutabilidad ::= CONST 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mutabilidad",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion_id ::= ID IGUAL expresion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_id",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia_if ::= IF PAR_IZQ expresion PAR_DER entorno ELSE sentencia_if 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_if",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia_if ::= IF PAR_IZQ expresion PAR_DER entorno ELSE entorno 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_if",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia_if ::= IF PAR_IZQ expresion PAR_DER entorno 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_if",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia_match ::= MATCH expresion entornos 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_match",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // entornos ::= LLAV_IZQ cases_default LLAV_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entornos",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // entornos ::= LLAV_IZQ LLAV_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entornos",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cases_default ::= cases default 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases_default",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cases_default ::= cases 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases_default",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cases_default ::= default 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases_default",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cases ::= cases case 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cases ::= case 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // case ::= expresion CASE entorno 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("case",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // default ::= DEFAULT CASE entorno 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("default",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia_while ::= WHILE PAR_IZQ expresion PAR_DER entorno 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_while",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia_for ::= FOR PAR_IZQ argumentos_for PAR_DER entorno 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_for",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // argumentos_for ::= inicializar_for PT_COMA expresion PT_COMA inc_dec 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("argumentos_for",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // inicializar_for ::= tipo_datos iniciar_ids_for 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicializar_for",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // inicializar_for ::= reasignaciones 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicializar_for",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // iniciar_ids_for ::= iniciar_ids_for iniciar_id_for 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciar_ids_for",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // iniciar_ids_for ::= iniciar_id_for 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciar_ids_for",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // iniciar_id_for ::= ID IGUAL expresion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciar_id_for",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // reasignaciones ::= reasignaciones COMA reasignacion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reasignaciones",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // reasignaciones ::= reasignacion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reasignaciones",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // reasignacion ::= ID IGUAL expresion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("reasignacion",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia_do_while ::= DO entorno WHILE PAR_IZQ expresion PAR_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia_do_while",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // entorno ::= LLAV_IZQ instrucciones LLAV_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entorno",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // entorno ::= LLAV_IZQ LLAV_DER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entorno",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // imprimir ::= PRINTLN PAR_IZQ expresion PAR_DER PT_COMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Print(a,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= aritmeticos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= relacionales 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= logicos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= casteo 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= ID 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(Double.parseDouble(a), new Tipo(tipoDato.DECIMAL),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER),aleft, aright  ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // aritmeticos ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.SUMA,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // aritmeticos ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.RESTA,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // aritmeticos ::= expresion POR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.MULTIPLICACION,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // aritmeticos ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.DIVISION,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // aritmeticos ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.MODULO,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // aritmeticos ::= expresion POTENCIA expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.POTENCIA,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // aritmeticos ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmeticas(a   , OperadoresAritmeticos.NEGACION,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // relacionales ::= expresion IGUALIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.EQUALS,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // relacionales ::= expresion DISTINTO expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.NOT_EQUALS,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // relacionales ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.GREATER_THAN,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // relacionales ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.LESS_THAN,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // relacionales ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.GREATER_THAN_OR_EQUALS,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // relacionales ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacionales(a,b , OperadoresRelacionales.LESS_THAN_OR_EQUALS,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("relacionales",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // logicos ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.OR, b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicos",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // logicos ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.AND, b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicos",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // logicos ::= expresion XOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.XOR, b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicos",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // logicos ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicos",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // casteo ::= PAR_IZQ tipo_datos PAR_DER expresion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casteo",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // inc_dec ::= expresion INC 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inc_dec",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // inc_dec ::= expresion DEC 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inc_dec",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipo_datos ::= INT 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipo_datos ::= DOUBLE 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipo_datos ::= BOOL 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tipo_datos ::= STRING 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tipo_datos ::= CHAR 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_datos",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
