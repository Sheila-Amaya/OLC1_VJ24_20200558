/* The following code was generated by JFlex 1.7.0 */

//lexico
/*1. paquete de importaciones*/
package Analizadores;
import java_cup.runtime.Symbol;
import Errores.Excepcion;
import java.util.ArrayList; //para errores
import Token.TokenInfo;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Analizadores/Scanner.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 18, 54, 54, 19,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    33, 22,  6,  0,  0,  0, 20,  0, 45, 46, 17, 52, 49, 53,  3, 16, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 44, 43, 26, 24, 25,  0, 
     0, 12, 38, 28, 37, 10, 11, 42, 35, 32,  5, 40, 13, 34, 30, 29, 
    41,  5,  8, 15,  7,  9, 27, 36,  5,  5,  5, 50,  0, 51, 23,  4, 
     0, 12, 38, 28, 37, 10, 11, 42, 35, 32,  5, 40, 13, 34, 30, 29, 
    41,  5,  8, 15,  7,  9, 27, 36,  5,  5,  5, 48, 21, 47,  0,  0, 
     0,  0,  0,  0,  0, 54,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\6\5\1\1\1\5\1\1\1\6\2\1\1\7\1\10"+
    "\1\11\1\12\1\13\3\5\1\1\6\5\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\2\1"+
    "\1\3\2\0\1\25\6\5\1\0\3\5\1\0\1\5"+
    "\1\0\1\5\1\2\1\0\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\4\5\2\34\2\5\1\35\2\5\1\36"+
    "\1\37\1\0\4\5\1\0\2\5\1\40\1\0\3\5"+
    "\1\0\1\5\2\0\2\5\1\2\1\0\1\41\1\0"+
    "\2\5\1\42\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\4\5\2\43\1\0\2\44\2\5\2\45\2\0\2\5"+
    "\2\46\1\5\1\0\2\5\1\0\2\5\1\0\1\5"+
    "\1\0\3\5\1\47\1\0\1\50\2\5\2\0\2\5"+
    "\1\0\1\5\2\51\1\52\2\53\2\54\1\0\1\5"+
    "\1\0\1\5\1\55\1\56\1\0\1\57\1\60\1\61"+
    "\1\0\1\61\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\62\1\0\1\5\1\0\1\5\2\63\2\64"+
    "\1\0\1\5\2\65\1\0\1\5\2\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\67\0\u03a7\0\u03de\0\u0415\0\67\0\u044c\0\u0483"+
    "\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b"+
    "\0\u0672\0\u06a9\0\u06e0\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\u0717\0\u074e\0\334\0\u0113"+
    "\0\u0181\0\67\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898"+
    "\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50"+
    "\0\u0a87\0\u0abe\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\67\0\u014a\0\u0bd1\0\u0c08"+
    "\0\u014a\0\u0c3f\0\u0c76\0\67\0\67\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u014a\0\u0e65\0\u0e9c"+
    "\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054"+
    "\0\67\0\u108b\0\u014a\0\u10c2\0\u10f9\0\u1130\0\u014a\0\u1167"+
    "\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f"+
    "\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\67\0\u014a\0\u1469"+
    "\0\u14a0\0\67\0\u014a\0\u14d7\0\u150e\0\u1545\0\u157c\0\67"+
    "\0\u014a\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd"+
    "\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u014a\0\u187e"+
    "\0\67\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff"+
    "\0\u1a36\0\67\0\u014a\0\u014a\0\67\0\u014a\0\67\0\u014a"+
    "\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u014a\0\u014a\0\u1b49\0\u014a"+
    "\0\u014a\0\67\0\u1b80\0\u014a\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c"+
    "\0\u1c93\0\u1cca\0\u1d01\0\67\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd"+
    "\0\67\0\u014a\0\67\0\u014a\0\u1e14\0\u1e4b\0\67\0\u014a"+
    "\0\u1e82\0\u1eb9\0\67\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\7\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\2\1\22\1\3\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\7\1\34\1\35"+
    "\1\36\1\3\1\37\1\7\1\40\1\41\1\42\1\2"+
    "\1\7\1\43\1\7\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\71\0\1\3"+
    "\21\0\1\3\15\0\1\3\27\0\1\4\1\57\65\0"+
    "\1\57\70\0\1\60\1\7\1\0\7\7\1\0\1\7"+
    "\13\0\4\7\1\0\1\7\1\0\5\7\1\0\3\7"+
    "\16\0\1\7\1\0\2\7\1\0\7\7\1\0\1\7"+
    "\13\0\4\7\1\0\1\7\1\0\5\7\1\0\3\7"+
    "\14\0\6\61\1\62\60\61\2\0\1\7\1\0\2\7"+
    "\1\0\7\7\1\0\1\7\13\0\2\7\1\63\1\7"+
    "\1\0\1\7\1\0\5\7\1\0\3\7\16\0\1\7"+
    "\1\0\2\7\1\0\3\7\1\64\3\7\1\0\1\7"+
    "\13\0\2\7\1\65\1\7\1\0\1\7\1\0\5\7"+
    "\1\0\3\7\16\0\1\7\1\0\2\7\1\0\6\7"+
    "\1\66\1\0\1\7\13\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\0\3\7\16\0\1\7\1\0\2\7\1\0"+
    "\5\7\1\67\1\7\1\0\1\7\13\0\2\7\1\70"+
    "\1\7\1\71\1\72\1\0\5\7\1\0\3\7\16\0"+
    "\1\7\1\0\2\7\1\0\7\7\1\0\1\7\13\0"+
    "\4\7\1\0\1\7\1\0\5\7\1\0\1\7\1\73"+
    "\1\7\16\0\1\7\1\0\2\7\1\0\3\7\1\74"+
    "\3\7\1\0\1\7\13\0\4\7\1\75\1\76\1\0"+
    "\5\7\1\0\3\7\23\0\1\77\61\0\1\7\1\0"+
    "\2\7\1\0\1\100\6\7\1\0\1\7\13\0\4\7"+
    "\1\0\1\7\1\0\5\7\1\0\3\7\34\0\1\101"+
    "\1\102\71\0\1\103\67\0\1\104\71\0\1\105\66\0"+
    "\1\106\66\0\1\107\66\0\1\110\40\0\1\7\1\0"+
    "\2\7\1\0\5\7\1\111\1\7\1\0\1\7\13\0"+
    "\2\7\1\112\1\7\1\0\1\7\1\0\5\7\1\0"+
    "\3\7\16\0\1\7\1\0\2\7\1\0\7\7\1\0"+
    "\1\7\13\0\2\7\1\113\1\7\1\0\1\7\1\0"+
    "\5\7\1\0\3\7\16\0\1\7\1\0\2\7\1\0"+
    "\3\7\1\114\3\7\1\0\1\7\13\0\4\7\1\0"+
    "\1\7\1\0\5\7\1\0\3\7\27\0\1\115\55\0"+
    "\1\7\1\0\2\7\1\0\4\7\1\116\2\7\1\0"+
    "\1\7\13\0\4\7\1\0\1\7\1\0\5\7\1\0"+
    "\3\7\16\0\1\7\1\0\2\7\1\0\5\7\1\117"+
    "\1\7\1\0\1\7\13\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\0\3\7\16\0\1\7\1\0\2\7\1\0"+
    "\7\7\1\0\1\7\13\0\4\7\1\0\1\7\1\0"+
    "\1\7\1\120\3\7\1\0\3\7\16\0\1\7\1\0"+
    "\2\7\1\0\7\7\1\0\1\7\13\0\2\7\1\121"+
    "\1\7\1\0\1\7\1\0\5\7\1\0\3\7\16\0"+
    "\1\7\1\0\2\7\1\0\1\7\1\122\5\7\1\0"+
    "\1\7\13\0\4\7\1\0\1\7\1\0\5\7\1\0"+
    "\3\7\16\0\1\7\1\0\2\7\1\0\1\7\1\123"+
    "\5\7\1\0\1\7\13\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\0\3\7\100\0\1\124\67\0\1\125\3\0"+
    "\1\7\1\0\2\7\1\0\7\7\1\126\1\127\13\0"+
    "\4\7\1\0\1\7\1\0\5\7\1\0\3\7\16\0"+
    "\1\7\1\0\2\7\1\0\1\130\6\7\1\0\1\7"+
    "\13\0\4\7\1\0\1\7\1\0\1\131\4\7\1\0"+
    "\3\7\16\0\1\7\1\0\2\7\1\0\2\7\1\132"+
    "\4\7\1\0\1\7\13\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\0\3\7\16\0\1\7\1\0\2\7\1\0"+
    "\7\7\1\133\1\134\13\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\0\3\7\16\0\1\7\1\0\2\7\1\0"+
    "\6\7\1\135\1\0\1\7\13\0\4\7\1\0\1\7"+
    "\1\0\5\7\1\0\3\7\16\0\1\7\1\0\2\7"+
    "\1\0\1\7\1\136\5\7\1\0\1\7\13\0\4\7"+
    "\1\0\1\7\1\0\5\7\1\0\3\7\52\0\1\137"+
    "\32\0\1\7\1\0\2\7\1\0\7\7\1\0\1\7"+
    "\13\0\3\7\1\140\1\0\1\7\1\0\5\7\1\0"+
    "\3\7\16\0\1\7\1\0\2\7\1\0\7\7\1\0"+
    "\1\7\13\0\4\7\1\0\1\7\1\0\5\7\1\0"+
    "\1\7\1\141\1\7\16\0\1\7\1\0\2\7\1\0"+
    "\7\7\1\0\1\7\13\0\3\7\1\142\1\0\1\7"+
    "\1\0\5\7\1\0\3\7\32\0\2\143\51\0\1\7"+
    "\1\0\2\7\1\0\7\7\1\143\1\144\13\0\4\7"+
    "\1\0\1\7\1\0\5\7\1\0\3\7\24\0\1\145"+
    "\3\0\1\146\54\0\1\7\1\0\2\7\1\0\1\7"+
    "\1\147\3\7\1\150\1\7\1\0\1\7\13\0\4\7"+
    "\1\0\1\7\1\0\5\7\1\0\3\7\14\0\22\101"+
    "\2\151\43\101\21\102\1\152\45\102\2\0\1\7\1\0"+
    "\2\7\1\0\1\7\1\153\5\7\1\0\1\7\13\0"+
    "\4\7\1\0\1\7\1\0\5\7\1\0\3\7\16\0"+
    "\1\7\1\0\2\7\1\0\7\7\1\0\1\7\13\0"+
    "\4\7\1\154\1\155\1\0\5\7\1\0\3\7\16\0"+
    "\1\7\1\0\2\7\1\0\7\7\1\0\1\7\13\0"+
    "\3\7\1\156\1\0\1\7\1\0\5\7\1\0\3\7"+
    "\16\0\1\7\1\0\2\7\1\0\7\7\1\0\1\7"+
    "\13\0\4\7\1\0\1\7\1\0\2\7\1\157\2\7"+
    "\1\0\3\7\16\0\1\7\1\0\2\7\1\0\1\160"+
    "\6\7\1\0\1\7\13\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\0\3\7\16\0\1\7\1\0\2\7\1\0"+
    "\7\7\1\0\1\7\13\0\4\7\1\161\1\162\1\0"+
    "\5\7\1\0\3\7\16\0\1\7\1\0\2\7\1\0"+
    "\3\7\1\163\3\7\1\0\1\7\13\0\4\7\1\0"+
    "\1\7\1\0\5\7\1\0\3\7\16\0\1\7\1\0"+
    "\2\7\1\0\7\7\1\0\1\7\13\0\4\7\1\164"+
    "\1\165\1\0\5\7\1\0\3\7\23\0\1\166\61\0"+
    "\1\7\1\0\2\7\1\0\1\167\6\7\1\0\1\7"+
    "\13\0\4\7\1\0\1\7\1\0\5\7\1\0\3\7"+
    "\16\0\1\7\1\0\2\7\1\0\2\7\1\170\4\7"+
    "\1\0\1\7\13\0\4\7\1\0\1\7\1\0\5\7"+
    "\1\0\3\7\16\0\1\7\1\0\2\7\1\0\7\7"+
    "\1\0\1\7\13\0\2\7\1\171\1\7\1\0\1\7"+
    "\1\0\5\7\1\0\3\7\16\0\1\7\1\0\2\7"+
    "\1\0\7\7\1\0\1\7\13\0\3\7\1\172\1\0"+
    "\1\7\1\0\5\7\1\0\3\7\26\0\1\173\56\0"+
    "\1\7\1\0\2\7\1\0\3\7\1\174\3\7\1\0"+
    "\1\7\13\0\4\7\1\0\1\7\1\0\5\7\1\0"+
    "\3\7\16\0\1\7\1\0\2\7\1\0\7\7\1\175"+
    "\1\7\13\0\4\7\1\0\1\7\1\0\5\7\1\0"+
    "\3\7\61\0\1\176\23\0\1\7\1\0\2\7\1\0"+
    "\7\7\1\0\1\7\13\0\4\7\1\0\1\7\1\0"+
    "\3\7\1\177\1\7\1\0\3\7\16\0\1\7\1\0"+
    "\2\7\1\0\3\7\1\200\3\7\1\0\1\7\13\0"+
    "\4\7\1\0\1\7\1\0\5\7\1\0\3\7\16\0"+
    "\1\7\1\0\2\7\1\0\7\7\1\0\1\7\13\0"+
    "\4\7\1\0\1\7\1\0\5\7\1\0\2\7\1\201"+
    "\23\0\1\202\61\0\1\7\1\0\2\7\1\0\1\203"+
    "\6\7\1\0\1\7\13\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\0\3\7\25\0\1\204\65\0\1\205\60\0"+
    "\1\7\1\0\2\7\1\0\2\7\1\206\4\7\1\0"+
    "\1\7\13\0\4\7\1\0\1\7\1\0\5\7\1\0"+
    "\3\7\16\0\1\7\1\0\2\7\1\0\1\7\1\207"+
    "\5\7\1\0\1\7\13\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\0\3\7\14\0\20\102\1\151\1\152\45\102"+
    "\45\0\1\210\23\0\1\7\1\0\2\7\1\0\7\7"+
    "\1\0\1\7\13\0\4\7\1\0\1\7\1\0\3\7"+
    "\1\211\1\7\1\0\3\7\16\0\1\7\1\0\2\7"+
    "\1\0\1\212\6\7\1\213\1\214\13\0\4\7\1\0"+
    "\1\7\1\0\5\7\1\0\3\7\16\0\1\7\1\0"+
    "\2\7\1\0\7\7\1\0\1\7\13\0\1\7\1\215"+
    "\2\7\1\0\1\7\1\0\5\7\1\0\3\7\31\0"+
    "\1\216\53\0\1\7\1\0\2\7\1\0\6\7\1\217"+
    "\1\0\1\7\13\0\4\7\1\0\1\7\1\0\5\7"+
    "\1\0\3\7\16\0\1\7\1\0\2\7\1\0\5\7"+
    "\1\220\1\7\1\0\1\7\13\0\4\7\1\0\1\7"+
    "\1\0\5\7\1\0\3\7\52\0\1\221\32\0\1\7"+
    "\1\0\2\7\1\0\7\7\1\0\1\7\13\0\3\7"+
    "\1\222\1\0\1\7\1\0\5\7\1\0\3\7\24\0"+
    "\1\223\60\0\1\7\1\0\2\7\1\0\1\7\1\224"+
    "\5\7\1\0\1\7\13\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\0\3\7\16\0\1\7\1\0\2\7\1\0"+
    "\1\7\1\225\5\7\1\0\1\7\13\0\4\7\1\0"+
    "\1\7\1\0\5\7\1\0\3\7\16\0\1\7\1\0"+
    "\2\7\1\0\7\7\1\0\1\7\13\0\1\226\3\7"+
    "\1\0\1\7\1\0\5\7\1\0\3\7\16\0\1\7"+
    "\1\0\2\7\1\0\7\7\1\0\1\7\13\0\4\7"+
    "\1\0\1\7\1\0\3\7\1\227\1\7\1\0\3\7"+
    "\55\0\1\230\27\0\1\7\1\0\2\7\1\0\7\7"+
    "\1\0\1\7\13\0\4\7\1\0\1\7\1\230\5\7"+
    "\1\0\3\7\26\0\1\231\56\0\1\7\1\0\2\7"+
    "\1\0\7\7\1\0\1\7\13\0\3\7\1\232\1\0"+
    "\1\7\1\0\5\7\1\0\3\7\16\0\1\7\1\0"+
    "\2\7\1\0\1\233\6\7\1\0\1\7\13\0\4\7"+
    "\1\0\1\7\1\0\5\7\1\0\3\7\50\0\1\234"+
    "\41\0\1\235\61\0\1\7\1\0\2\7\1\0\7\7"+
    "\1\0\1\7\13\0\1\7\1\236\2\7\1\0\1\7"+
    "\1\0\5\7\1\0\3\7\16\0\1\7\1\0\2\7"+
    "\1\0\1\237\6\7\1\0\1\7\13\0\4\7\1\0"+
    "\1\7\1\0\5\7\1\0\3\7\16\0\1\7\1\0"+
    "\2\7\1\0\7\7\1\0\1\7\13\0\4\7\1\240"+
    "\1\241\1\0\5\7\1\0\3\7\23\0\1\242\61\0"+
    "\1\7\1\0\2\7\1\0\1\243\6\7\1\0\1\7"+
    "\13\0\4\7\1\0\1\7\1\0\5\7\1\0\3\7"+
    "\16\0\1\7\1\0\2\7\1\0\7\7\1\0\1\7"+
    "\13\0\4\7\1\0\1\7\1\0\1\7\1\244\3\7"+
    "\1\0\3\7\26\0\1\245\56\0\1\7\1\0\2\7"+
    "\1\0\3\7\1\246\3\7\1\0\1\7\13\0\4\7"+
    "\1\0\1\7\1\0\5\7\1\0\3\7\16\0\1\7"+
    "\1\0\2\7\1\0\7\7\1\0\1\7\13\0\4\7"+
    "\1\0\1\7\1\0\5\7\1\247\1\250\2\7\23\0"+
    "\1\251\61\0\1\7\1\0\2\7\1\0\1\252\6\7"+
    "\1\0\1\7\13\0\4\7\1\0\1\7\1\0\5\7"+
    "\1\0\3\7\53\0\2\253\30\0\1\7\1\0\2\7"+
    "\1\0\7\7\1\0\1\7\13\0\4\7\1\253\1\254"+
    "\1\0\5\7\1\0\3\7\16\0\1\7\1\0\2\7"+
    "\1\0\7\7\1\0\1\7\13\0\3\7\1\255\1\0"+
    "\1\7\1\0\5\7\1\0\3\7\16\0\1\7\1\0"+
    "\2\7\1\0\3\7\1\256\3\7\1\0\1\7\13\0"+
    "\4\7\1\0\1\7\1\0\5\7\1\0\3\7\53\0"+
    "\2\257\30\0\1\7\1\0\2\7\1\0\7\7\1\0"+
    "\1\7\13\0\4\7\1\0\1\7\1\0\3\7\1\260"+
    "\1\7\1\0\3\7\16\0\1\7\1\0\2\7\1\0"+
    "\7\7\1\0\1\7\13\0\4\7\1\0\1\7\1\0"+
    "\1\7\1\261\3\7\1\0\3\7\23\0\1\262\63\0"+
    "\1\263\64\0\1\7\1\0\2\7\1\0\1\264\6\7"+
    "\1\0\1\7\13\0\4\7\1\0\1\7\1\0\5\7"+
    "\1\0\3\7\16\0\1\7\1\0\1\265\1\7\1\0"+
    "\7\7\1\0\1\7\13\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\0\3\7\52\0\1\266\32\0\1\7\1\0"+
    "\2\7\1\0\7\7\1\0\1\7\13\0\3\7\1\267"+
    "\1\0\1\7\1\0\5\7\1\0\3\7\31\0\1\270"+
    "\53\0\1\7\1\0\2\7\1\0\6\7\1\271\1\0"+
    "\1\7\13\0\4\7\1\0\1\7\1\0\5\7\1\0"+
    "\3\7\52\0\1\272\32\0\1\7\1\0\2\7\1\0"+
    "\7\7\1\0\1\7\13\0\3\7\1\273\1\0\1\7"+
    "\1\0\5\7\1\0\3\7\27\0\1\274\117\0\1\275"+
    "\24\0\1\7\1\0\2\7\1\0\7\7\1\0\1\7"+
    "\13\0\4\7\1\0\1\7\1\0\2\7\1\276\2\7"+
    "\1\0\3\7\25\0\1\277\57\0\1\7\1\0\2\7"+
    "\1\0\2\7\1\300\4\7\1\0\1\7\13\0\4\7"+
    "\1\0\1\7\1\0\5\7\1\0\3\7\52\0\1\301"+
    "\32\0\1\7\1\0\2\7\1\0\7\7\1\0\1\7"+
    "\13\0\3\7\1\302\1\0\1\7\1\0\5\7\1\0"+
    "\3\7\66\0\1\303\16\0\1\7\1\0\2\7\1\0"+
    "\7\7\1\0\1\7\13\0\4\7\1\0\1\7\1\0"+
    "\5\7\1\0\2\7\1\304\53\0\2\305\30\0\1\7"+
    "\1\0\2\7\1\0\7\7\1\0\1\7\13\0\4\7"+
    "\1\305\1\306\1\0\5\7\1\0\3\7\26\0\1\307"+
    "\56\0\1\7\1\0\2\7\1\0\3\7\1\310\3\7"+
    "\1\0\1\7\13\0\4\7\1\0\1\7\1\0\5\7"+
    "\1\0\3\7\23\0\1\311\61\0\1\7\1\0\2\7"+
    "\1\0\1\312\6\7\1\0\1\7\13\0\4\7\1\0"+
    "\1\7\1\0\5\7\1\0\3\7\57\0\1\313\25\0"+
    "\1\7\1\0\2\7\1\0\7\7\1\0\1\7\13\0"+
    "\4\7\1\0\1\7\1\0\1\7\1\314\3\7\1\0"+
    "\3\7\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\17\1\1\11\3\1\1\11\15\1\11\11"+
    "\3\1\2\0\1\11\6\1\1\0\3\1\1\0\1\1"+
    "\1\0\2\1\1\0\6\11\4\1\1\11\6\1\2\11"+
    "\1\0\4\1\1\0\3\1\1\0\3\1\1\0\1\1"+
    "\2\0\2\1\1\11\1\0\1\1\1\0\4\1\1\0"+
    "\2\1\1\0\1\1\1\0\6\1\1\0\1\11\3\1"+
    "\1\11\1\1\2\0\2\1\1\11\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\0\4\1\1\0\1\11"+
    "\2\1\2\0\2\1\1\0\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\2\1\1\11\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //codigo de usuario, clases , variables objetos, arreglos
    public ArrayList<Excepcion> Errores = new ArrayList();

    // Lista para almacenar los tokens
    private ArrayList<TokenInfo> tokens = new ArrayList<>();

    // Método para obtener la lista de tokens
    public ArrayList<TokenInfo> getTokens() {
        return tokens;
    }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
      yyline = 1;
    yychar = 1;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //guarda los errores lexicos
    Errores.add(new Excepcion("Lexico","Caracter no valido: "+ yytext(), yyline+"", yychar+""));
            } 
            // fall through
          case 55: break;
          case 2: 
            { 
            } 
            // fall through
          case 56: break;
          case 3: 
            { TokenInfo token = new TokenInfo(yytext(), "NUMERO", yyline, yychar); tokens.add(token);return new Symbol(sym.NUMERO,yyline,yychar,yytext());
            } 
            // fall through
          case 57: break;
          case 4: 
            { TokenInfo token = new TokenInfo(yytext(), "PUNTO", yyline, yychar);  tokens.add(token); return new Symbol(sym.PUNTO,yyline,yychar, yytext());
            } 
            // fall through
          case 58: break;
          case 5: 
            { TokenInfo token = new TokenInfo(yytext(), "ID", yyline, yychar); tokens.add(token); return new Symbol(sym.ID,yyline,yychar,yytext());
            } 
            // fall through
          case 59: break;
          case 6: 
            { yychar=1;
            } 
            // fall through
          case 60: break;
          case 7: 
            { TokenInfo token = new TokenInfo(yytext(), "NOT", yyline, yychar);  tokens.add(token); return new Symbol(sym.NOT, yyline, yychar, yytext());
            } 
            // fall through
          case 61: break;
          case 8: 
            { TokenInfo token = new TokenInfo(yytext(), "XOR", yyline, yychar);  tokens.add(token); return new Symbol(sym.XOR, yyline, yychar, yytext());
            } 
            // fall through
          case 62: break;
          case 9: 
            { TokenInfo token = new TokenInfo(yytext(), "ASIGNACION", yyline, yychar);  tokens.add(token); return new Symbol(sym.ASIGNACION,yyline,yychar, yytext());
            } 
            // fall through
          case 63: break;
          case 10: 
            { TokenInfo token = new TokenInfo(yytext(), "MAYOR", yyline, yychar);  tokens.add(token); return new Symbol(sym.MAYOR, yyline, yychar, yytext());
            } 
            // fall through
          case 64: break;
          case 11: 
            { TokenInfo token = new TokenInfo(yytext(), "MENOR", yyline, yychar);  tokens.add(token); return new Symbol(sym.MENOR, yyline, yychar, yytext());
            } 
            // fall through
          case 65: break;
          case 12: 
            { TokenInfo token = new TokenInfo(yytext(), "PT_COMA", yyline, yychar); tokens.add(token); return new Symbol(sym.PTCOMA,yyline,yychar, yytext());
            } 
            // fall through
          case 66: break;
          case 13: 
            { TokenInfo token = new TokenInfo(yytext(), "DOS_PT", yyline, yychar);  tokens.add(token); return new Symbol(sym.DOS_PT,yyline,yychar, yytext());
            } 
            // fall through
          case 67: break;
          case 14: 
            { TokenInfo token = new TokenInfo(yytext(), "PAR_IZQ", yyline, yychar);  tokens.add(token); return new Symbol(sym.PAR_IZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 68: break;
          case 15: 
            { TokenInfo token = new TokenInfo(yytext(), "PAR_DER", yyline, yychar);  tokens.add(token); return new Symbol(sym.PAR_DER,yyline,yychar, yytext());
            } 
            // fall through
          case 69: break;
          case 16: 
            { TokenInfo token = new TokenInfo(yytext(), "LLAV_DER", yyline, yychar);  tokens.add(token); return new Symbol(sym.LLAV_DER,yyline,yychar, yytext());
            } 
            // fall through
          case 70: break;
          case 17: 
            { TokenInfo token = new TokenInfo(yytext(), "LLAV_IZQ", yyline, yychar);  tokens.add(token); return new Symbol(sym.LLAV_IZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 71: break;
          case 18: 
            { TokenInfo token = new TokenInfo(yytext(), "COMA", yyline, yychar);  tokens.add(token); return new Symbol(sym.COMA,yyline,yychar, yytext());
            } 
            // fall through
          case 72: break;
          case 19: 
            { TokenInfo token = new TokenInfo(yytext(), "COR_IZQ", yyline, yychar);  tokens.add(token); return new Symbol(sym.COR_IZQ,yyline,yychar, yytext());
            } 
            // fall through
          case 73: break;
          case 20: 
            { TokenInfo token = new TokenInfo(yytext(), "COR_DER", yyline, yychar);  tokens.add(token); return new Symbol(sym.COR_DER,yyline,yychar, yytext());
            } 
            // fall through
          case 74: break;
          case 21: 
            { TokenInfo token = new TokenInfo(yytext(), "CADENA", yyline, yychar); tokens.add(token); return new Symbol(sym.CADENA, yyline, yychar, yytext());
            } 
            // fall through
          case 75: break;
          case 22: 
            { TokenInfo token = new TokenInfo(yytext(), "AND", yyline, yychar);  tokens.add(token); return new Symbol(sym.AND, yyline, yychar, yytext());
            } 
            // fall through
          case 76: break;
          case 23: 
            { TokenInfo token = new TokenInfo(yytext(), "OR", yyline, yychar);  tokens.add(token); return new Symbol(sym.OR, yyline, yychar, yytext());
            } 
            // fall through
          case 77: break;
          case 24: 
            { TokenInfo token = new TokenInfo(yytext(), "DISTINTO", yyline, yychar);  tokens.add(token); return new Symbol(sym.DISTINTO, yyline, yychar, yytext());
            } 
            // fall through
          case 78: break;
          case 25: 
            { TokenInfo token = new TokenInfo(yytext(), "IGUAL", yyline, yychar);  tokens.add(token); return new Symbol(sym.IGUAL, yyline, yychar, yytext());
            } 
            // fall through
          case 79: break;
          case 26: 
            { TokenInfo token = new TokenInfo(yytext(), "MAYORIGUAL", yyline, yychar);  tokens.add(token); return new Symbol(sym.MAYORIGUAL, yyline, yychar, yytext());
            } 
            // fall through
          case 80: break;
          case 27: 
            { TokenInfo token = new TokenInfo(yytext(), "MENORIGUAL", yyline, yychar);  tokens.add(token); return new Symbol(sym.MENORIGUAL, yyline, yychar, yytext());
            } 
            // fall through
          case 81: break;
          case 28: 
            { TokenInfo token = new TokenInfo(yytext(), "IF", yyline, yychar); tokens.add(token); return new Symbol(sym.IF,yyline,yychar,yytext());
            } 
            // fall through
          case 82: break;
          case 29: 
            { TokenInfo token = new TokenInfo(yytext(), "DO", yyline, yychar);  tokens.add(token); return new Symbol(sym.DO,yyline,yychar,yytext());
            } 
            // fall through
          case 83: break;
          case 30: 
            { TokenInfo token = new TokenInfo(yytext(), "INCREMENTO", yyline, yychar); tokens.add(token); return new Symbol(sym.INCREMENTO, yyline, yychar, yytext());
            } 
            // fall through
          case 84: break;
          case 31: 
            { TokenInfo token = new TokenInfo(yytext(), "DECREMENTO", yyline, yychar); tokens.add(token); return new Symbol(sym.DECREMENTO, yyline, yychar, yytext());
            } 
            // fall through
          case 85: break;
          case 32: 
            { TokenInfo token = new TokenInfo(yytext(), "FOR", yyline, yychar);  tokens.add(token); return new Symbol(sym.FOR,yyline,yychar,yytext());
            } 
            // fall through
          case 86: break;
          case 33: 
            { TokenInfo token = new TokenInfo(yytext(), "VAR", yyline, yychar);  tokens.add(token); return new Symbol(sym.VAR,yyline,yychar,yytext());
            } 
            // fall through
          case 87: break;
          case 34: 
            { TokenInfo token = new TokenInfo(yytext(), "NEW", yyline, yychar);  tokens.add(token); return new Symbol(sym.NEW,yyline,yychar,yytext());
            } 
            // fall through
          case 88: break;
          case 35: 
            { TokenInfo token = new TokenInfo(yytext(), "ELSE", yyline, yychar);  tokens.add(token); return new Symbol(sym.ELSE,yyline,yychar,yytext());
            } 
            // fall through
          case 89: break;
          case 36: 
            { TokenInfo token = new TokenInfo(yytext(), "FIND", yyline, yychar);  tokens.add(token); return new Symbol(sym.FIND,yyline,yychar,yytext());
            } 
            // fall through
          case 90: break;
          case 37: 
            { TokenInfo token = new TokenInfo(yytext(), "LIST", yyline, yychar);  tokens.add(token); return new Symbol(sym.LIST,yyline,yychar,yytext());
            } 
            // fall through
          case 91: break;
          case 38: 
            { TokenInfo token = new TokenInfo(yytext(), "VOID", yyline, yychar);  tokens.add(token); return new Symbol(sym.VOID,yyline,yychar,yytext());
            } 
            // fall through
          case 92: break;
          case 39: 
            { TokenInfo token = new TokenInfo(yytext(), "ROUND", yyline, yychar);  tokens.add(token); return new Symbol(sym.ROUND,yyline,yychar,yytext());
            } 
            // fall through
          case 93: break;
          case 40: 
            { TokenInfo token = new TokenInfo(yytext(), "BOOLEANO", yyline, yychar); tokens.add(token); return new Symbol(sym.BOOLEANO,yyline,yychar,yytext());
            } 
            // fall through
          case 94: break;
          case 41: 
            { TokenInfo token = new TokenInfo(yytext(), "CONST", yyline, yychar);  tokens.add(token); return new Symbol(sym.CONST,yyline,yychar,yytext());
            } 
            // fall through
          case 95: break;
          case 42: 
            { TokenInfo token = new TokenInfo(yytext(), "MATCH", yyline, yychar);  tokens.add(token); return new Symbol(sym.MATCH,yyline,yychar,yytext());
            } 
            // fall through
          case 96: break;
          case 43: 
            { TokenInfo token = new TokenInfo(yytext(), "WHILE", yyline, yychar);  tokens.add(token); return new Symbol(sym.WHILE,yyline,yychar,yytext());
            } 
            // fall through
          case 97: break;
          case 44: 
            { TokenInfo token = new TokenInfo(yytext(), "BREAK", yyline, yychar);  tokens.add(token); return new Symbol(sym.BREAK,yyline,yychar,yytext());
            } 
            // fall through
          case 98: break;
          case 45: 
            { TokenInfo token = new TokenInfo(yytext(), "RETURN", yyline, yychar);  tokens.add(token); return new Symbol(sym.RETURN,yyline,yychar,yytext());
            } 
            // fall through
          case 99: break;
          case 46: 
            { TokenInfo token = new TokenInfo(yytext(), "REMOVE", yyline, yychar);  tokens.add(token); return new Symbol(sym.REMOVE,yyline,yychar,yytext());
            } 
            // fall through
          case 100: break;
          case 47: 
            { TokenInfo token = new TokenInfo(yytext(), "APPEND", yyline, yychar);  tokens.add(token); return new Symbol(sym.APPEND,yyline,yychar,yytext());
            } 
            // fall through
          case 101: break;
          case 48: 
            { TokenInfo token = new TokenInfo(yytext(), "LENGTH", yyline, yychar);  tokens.add(token); return new Symbol(sym.LENGTH,yyline,yychar,yytext());
            } 
            // fall through
          case 102: break;
          case 49: 
            { TokenInfo token = new TokenInfo(yytext(), "STRUCT", yyline, yychar);  tokens.add(token); return new Symbol(sym.STRUCT,yyline,yychar,yytext());
            } 
            // fall through
          case 103: break;
          case 50: 
            { TokenInfo token = new TokenInfo(yytext(), "ELSEIF", yyline, yychar);   tokens.add(token); return new Symbol(sym.ELSEIF,yyline,yychar,yytext());
            } 
            // fall through
          case 104: break;
          case 51: 
            { TokenInfo token = new TokenInfo(yytext(), "PRINTLN", yyline, yychar);  tokens.add(token); return new Symbol(sym.PRINTLN,yyline,yychar,yytext());
            } 
            // fall through
          case 105: break;
          case 52: 
            { TokenInfo token = new TokenInfo(yytext(), "TOSTRING", yyline, yychar);  tokens.add(token); return new Symbol(sym.TOSTRING,yyline,yychar,yytext());
            } 
            // fall through
          case 106: break;
          case 53: 
            { TokenInfo token = new TokenInfo(yytext(), "CONTINUE", yyline, yychar);  tokens.add(token); return new Symbol(sym.CONTINUE,yyline,yychar,yytext());
            } 
            // fall through
          case 107: break;
          case 54: 
            { TokenInfo token = new TokenInfo(yytext(), "START_WITH", yyline, yychar);  tokens.add(token); return new Symbol(sym.START_WITH,yyline,yychar,yytext());
            } 
            // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
