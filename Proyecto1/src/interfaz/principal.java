/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz;
import Analizadores.Sintactico;
import Analizadores.scanner;
import Errores.Excepcion;
import java.awt.Desktop;
import Token.TokenInfo;
import proyecto1.GeneradorL;
import proyecto1.GeneradorS;

import TablaSimbolos.TablaInfo;


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;



/**
 *
 * @author amaya
 */
public class principal extends javax.swing.JFrame {

    /**
     * Creates new form principal
     */

    private String archivoActual;

    public principal() {
        initComponents();
        
        // Llamada a GeneradorS
        GeneradorS.main(new String[]{});

        // Llamada a GeneradorL
        GeneradorL.main(new String[]{});

    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenuItem5.setText("jMenuItem5");

        jMenuItem8.setText("jMenuItem8");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JavaCraft");
        setMaximumSize(new java.awt.Dimension(2147483647, 2147483547));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Consola");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Entrada");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea2.setColumns(20);
        jTextArea2.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jMenuBar2.setFont(new java.awt.Font("Segoe UI Symbol", 0, 12)); // NOI18N

        jMenu3.setText("Archivo");

        jMenuItem1.setText("Abrir Archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("Guardar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem3.setText("Guardar Como");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuBar2.add(jMenu3);

        jMenu5.setText("Herramientas");

        jMenuItem10.setText("Ejecutar");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem10);

        jMenuBar2.add(jMenu5);

        jMenu6.setText("Reporte");

        jMenuItem7.setText("Errores");
        jMenuItem7.setActionCommand("Errores ");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem7);

        jMenuItem4.setText("Generar AST");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem4);

        jMenuItem9.setText("Tabla Simbolos");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem9);

        jMenuItem6.setText("Tokens");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem6);

        jMenuBar2.add(jMenu6);

        jMenu8.setText("Salir");
        jMenu8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu8MouseClicked(evt);
            }
        });
        jMenu8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu8ActionPerformed(evt);
            }
        });
        jMenuBar2.add(jMenu8);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 892, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleName("DataForge");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        //ABRIR ARCHIVO

    JFileChooser fileChooser = new JFileChooser();

    int choice = fileChooser.showOpenDialog(this);

    if (choice == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();

        // Guarda la ruta del archivo actualmente abierto
        archivoActual = selectedFile.getAbsolutePath();

        // Lee el contenido del archivo y muestra en jTextArea1
        try (BufferedReader reader = new BufferedReader(new FileReader(selectedFile))) {
            StringBuilder fileContents = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                fileContents.append(line).append("\n");
            }
            jTextArea1.setText(fileContents.toString());
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al leer el archivo seleccionado.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
            try {
        // Especifica la ruta completa al archivo HTML de la tabla de errores
        String path = "C:/Users/eliza/OneDrive/Documentos/GitHub/OLC1_VJ24_20200558/Reportes/ReporteTokens.html";

        // Verifica si el archivo existe antes de intentar abrirlo
        File file = new File(path);
        if (file.exists()) {
            Desktop desktop = Desktop.getDesktop();
            desktop.open(file);
        } else {
            JOptionPane.showMessageDialog(this, "El archivo de la tabla de errores no existe.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (IOException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al abrir el archivo de la tabla de errores.", "Error", JOptionPane.ERROR_MESSAGE);
    }
 
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
    try {
        // Especifica la ruta completa al archivo HTML de la tabla de errores
        String path = "C:/Users/eliza/OneDrive/Documentos/GitHub/OLC1_VJ24_20200558/Reportes/ReporteErrores.html";

        // Verifica si el archivo existe antes de intentar abrirlo
        File file = new File(path);
        if (file.exists()) {
            Desktop desktop = Desktop.getDesktop();
            desktop.open(file);
        } else {
            JOptionPane.showMessageDialog(this, "El archivo de la tabla de errores no existe.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (IOException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al abrir el archivo de la tabla de errores.", "Error", JOptionPane.ERROR_MESSAGE);
    }
     
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        //GUARDAR
    if (archivoActual != null) {
        try (FileWriter writer = new FileWriter(archivoActual);
            BufferedWriter bw = new BufferedWriter(writer)) {
            // Escribe el contenido del jTextArea1 en el archivo
            bw.write(jTextArea1.getText());
            JOptionPane.showMessageDialog(this, "Contenido guardado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al guardar el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        // Si no hay archivo abierto, muestra un mensaje de error
        JOptionPane.showMessageDialog(this, "No hay archivo abierto para guardar.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        //GUARDAR COMO
         JFileChooser fileChooser = new JFileChooser();
    
        int choice = fileChooser.showSaveDialog(this);

        if (choice == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            try (FileWriter writer = new FileWriter(selectedFile);
                 BufferedWriter bw = new BufferedWriter(writer)) {
                // Escribe el contenido del jTextArea1 en el archivo
                bw.write(jTextArea1.getText());
                JOptionPane.showMessageDialog(this, "Contenido guardado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al guardar el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenu8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu8ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jMenu8ActionPerformed

    private void jMenu8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu8MouseClicked
        // TODO add your handling code here:
        //SALIR
        System.exit(0);
    }//GEN-LAST:event_jMenu8MouseClicked

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        //boton tabla de simbolos
        try {
            // Especifica la ruta completa al archivo HTML de la tabla de errores
            String path = "C:/Users/eliza/OneDrive/Documentos/GitHub/OLC1_VJ24_20200558/Reportes/ReporteTabla.html";
    
            // Verifica si el archivo existe antes de intentar abrirlo
            File file = new File(path);
            if (file.exists()) {
                Desktop desktop = Desktop.getDesktop();
                desktop.open(file);
            } else {
                JOptionPane.showMessageDialog(this, "El archivo de la tabla de simbolos no existe.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al abrir el archivo de la tabla de simbolos.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        //------EJECUTAR------
        Analizadores.scanner scanner; //.java
        Analizadores.Sintactico parse;
        ArrayList<Excepcion> errores = new ArrayList(); //agregar errores
        ArrayList<TokenInfo> tokens = new ArrayList();
        ArrayList<TablaInfo> tabla = new ArrayList();
        
        try {

            scanner = new scanner(new BufferedReader(new StringReader(jTextArea1.getText())));
            parse = new Sintactico(scanner);
            parse.parse(); 
            
            errores.addAll(scanner.Errores); //errores lexicos
            errores.addAll(parse.getErrores()); //errores sintacticos
            generarReporteHTML(errores);   //generar reporte de errores lexicos y sintacticos
            tokens.addAll(scanner.getTokens()); 
            generarReporteTokensHTML(tokens); //generar reporte de tokens

            tabla = parse.getTabla();
            generarTablaSimbolos(tabla,tokens);  //generar tabla de simbolos

            String result = "";
            for (int i = 0; i < parse.salidas.size(); i++) {
                result += parse.salidas.get(i) + '\n';
            }
            this.jTextArea2.setText(result);

        } catch (Exception ex) {
            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error fatal en compilación de entrada: " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed



public static void generarTablaSimbolos(ArrayList<TablaInfo> tabla, ArrayList<TokenInfo> tokens) { 
    Set<String> addedSymbols = new HashSet<>();
    for (TokenInfo token : tokens) {
        for (TablaInfo tablaInfo : tabla) {
            if (!addedSymbols.contains(tablaInfo.getNombre()) && tablaInfo.getNombre().equals(token.getLexema())) {
                tablaInfo.setLinea(token.getLinea());
                tablaInfo.setColumna(token.getColumna());
                
                // Imprimir los datos de tablaInfo en la consola
                //System.out.println( tablaInfo.getNombre() +tablaInfo.getTipo() + tablaInfo.getValor() + ", Linea: " + tablaInfo.getLinea() + ", Columna: " + tablaInfo.getColumna());
                
                addedSymbols.add(tablaInfo.getNombre());
                break;
            }
        }
    }
    FileWriter fichero = null; //escribir el archivo
    PrintWriter pw = null; //escribir texto dentro del archivo
    
    try {
        
        String path = "C:/Users/eliza/OneDrive/Documentos/GitHub/OLC1_VJ24_20200558/Reportes/ReporteTabla.html";
        fichero = new FileWriter(path);
        pw = new PrintWriter(fichero);
        
        //Comenzamos a escribir el html
        pw.println("<html>");
        pw.println("<head>");
        pw.println("<title>TABLA DE SIMBOLOS</title>");
        pw.println("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN\" crossorigin=\"anonymous\">");
        pw.println("</head>");
        pw.println("<body>");
        pw.println("<div class=\"container\">"); // Agregamos una clase container de Bootstrap
        pw.println("<h1 class=\"mt-5\">Tabla de Simbolos</h1>"); // Agregamos clases de margen superior (mt-5) de Bootstrap
        pw.println("<br></br>");

         // Agregamos la tabla con clases de Bootstrap
        pw.println("<table class=\"table\">");
        pw.println("<thead class=\"thead-dark\">"); // Aplicamos la clase thead-dark para el encabezado oscuro
        pw.println("<tr>");
        pw.println("<th scope=\"col\">#</th>"); // New column for numbering
        pw.println("<th scope=\"col\">NOMBRE</th>");
        pw.println("<th scope=\"col\">TIPO</th>");
        pw.println("<th scope=\"col\">VALOR</th>");
        pw.println("<th scope=\"col\">FILA</th>");
        pw.println("<th scope=\"col\">COLUMNA</th>");
        pw.println("</tr>");
        pw.println("</thead>");
        pw.println("<tbody>");

        // Iteramos sobre la lista de tabla de simbolos y los agregamos a la tabla
        int count = 1; // Initialize counter
        for (TablaInfo tablaInfo : tabla) {
            pw.println("<tr>");
            pw.println("<td>" + count + "</td>"); // Print counter value
            pw.println("<td>" + tablaInfo.getNombre() + "</td>");
            pw.println("<td>" + tablaInfo.getTipo() + "</td>");
            pw.println("<td>" + tablaInfo.getValor() + "</td>");
            pw.println("<td>" + tablaInfo.getLinea() + "</td>");
            pw.println("<td>" + tablaInfo.getColumna() + "</td>");
            pw.println("</tr>");
            count++; // Increment counter
        }

            pw.println("</tbody>");
            pw.println("</table>");

            // Continuamos con el resto del contenido HTML
            pw.println("</div>");
            pw.println("</body>");
            pw.println("</html>");
            //Desktop.getDesktop().open(new File(path));  //abrir archivo despues de generalo
            

        } catch (Exception e) {
        } finally {
            try {
                if (fichero != null) {
                    fichero.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

}


    public static void generarReporteHTML(ArrayList<Excepcion> errores) throws IOException {
        FileWriter fichero = null; //escribir el archivo
        PrintWriter pw = null; //escribir texto dentro del archivo

        try {
            
            String path = "C:/Users/eliza/OneDrive/Documentos/GitHub/OLC1_VJ24_20200558/Reportes/ReporteErrores.html";
            fichero = new FileWriter(path);
            pw = new PrintWriter(fichero);
            
            //Comenzamos a escribir el html
            pw.println("<html>");
            pw.println("<head>");
            pw.println("<title>REPORTE DE ERRORES</title>");
            pw.println("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN\" crossorigin=\"anonymous\">");
            pw.println("</head>");
            pw.println("<body>");
            pw.println("<div class=\"container\">"); // Agregamos una clase container de Bootstrap
            pw.println("<h1 class=\"mt-5\">Reporte de Errores</h1>"); // Agregamos clases de margen superior (mt-5) de Bootstrap
            pw.println("<br></br>");

            // Agregamos la tabla con clases de Bootstrap
            pw.println("<table class=\"table\">");
            pw.println("<thead class=\"thead-dark\">"); // Aplicamos la clase thead-dark para el encabezado oscuro
            pw.println("<tr>");
            pw.println("<th scope=\"col\">#</th>"); // New column for numbering
            pw.println("<th scope=\"col\">ERROR</th>");
            pw.println("<th scope=\"col\">DESCRIPCION</th>");
            pw.println("<th scope=\"col\">FILA</th>");
            pw.println("<th scope=\"col\">COLUMNA</th>");
            pw.println("</tr>");
            pw.println("</thead>");
            pw.println("<tbody>");

            // Iteramos sobre la lista de errores y los agregamos a la tabla
            int count = 1; // Initialize counter
            for (Excepcion err : errores) {
                pw.println("<tr>");
                pw.println("<td>" + count + "</td>"); // Print counter value
                pw.println("<td>" + err.tipo + "</td>");
                pw.println("<td>" + err.descripcion + "</td>");
                pw.println("<td>" + err.linea + "</td>");
                pw.println("<td>" + err.columna + "</td>");
                pw.println("</tr>");
                count++; // Increment counter
            }

            pw.println("</tbody>");
            pw.println("</table>");

            // Continuamos con el resto del contenido HTML
            pw.println("</div>");
            pw.println("</body>");
            pw.println("</html>");
            //Desktop.getDesktop().open(new File(path));  //abrir archivo despues de generalo
            
            
        } catch (Exception e) {
        } finally {
            if (fichero != null) {
                fichero.close();
            }
        }
        try {

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    

    public void generarReporteTokensHTML(ArrayList<TokenInfo> tokens) throws IOException {
    FileWriter fichero = null;
    PrintWriter pw = null;

    try {
        String path = "C:/Users/eliza/OneDrive/Documentos/GitHub/OLC1_VJ24_20200558/Reportes/ReporteTokens.html";
        fichero = new FileWriter(path);
        pw = new PrintWriter(fichero);

        pw.println("<html>");
        pw.println("<head>");
        pw.println("<title>REPORTE DE TOKENS</title>");
        pw.println("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN\" crossorigin=\"anonymous\">");
        pw.println("</head>");
        pw.println("<body>");
        pw.println("<div class=\"container\">"); // Agregamos una clase container de Bootstrap
        pw.println("<h1 class=\"mt-5\">Reporte de Tokens</h1>"); // Agregamos clases de margen superior (mt-5) de Bootstrap
        pw.println("<br></br>");

        // Agregamos la tabla con clases de Bootstrap
        pw.println("<table class=\"table\">");
        pw.println("<thead class=\"thead-dark\">"); // Aplicamos la clase thead-dark para el encabezado oscuro
        pw.println("<tr>");
        pw.println("<th scope=\"col\">#</th>"); // Agregamos la columna de numeración
        pw.println("<th scope=\"col\">LEXEMA</th>");
        pw.println("<th scope=\"col\">TOKEN</th>");
        pw.println("<th scope=\"col\">LÍNEA</th>");
        pw.println("<th scope=\"col\">COLUMNA</th>");
        pw.println("</tr>");
        pw.println("</thead>");
        pw.println("<tbody>");

        // Iteramos sobre la lista de tokens y los agregamos a la tabla
        for (int i = 0; i < tokens.size(); i++) {
            TokenInfo token = tokens.get(i);
            pw.println("<tr>");
            pw.println("<td>" + (i + 1) + "</td>"); // Imprimimos el número de la fila
            pw.println("<td>" + token.getLexema() + "</td>");
            pw.println("<td>" + token.getToken() + "</td>");
            pw.println("<td>" + token.getLinea() + "</td>");
            pw.println("<td>" + token.getColumna() + "</td>");
            pw.println("</tr>");
        }

        pw.println("</tbody>");
        pw.println("</table>");

        // Continuamos con el resto del contenido HTML
        pw.println("</div>");
        pw.println("</body>");
        pw.println("</html>");
        //Desktop.getDesktop().open(new File(path));

    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (fichero != null) {
            fichero.close();
        }

}
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
