/* SINTACTICO */

/* 1. package o importaciones */
package Analizadores;
import java_cup.runtime.*;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.List;
import Errores.Excepcion;

import Instruccion.Aritmetica;
import Instruccion.Variable;
import Instruccion.Imprimir;  


import TablaSimbolos.TablaInfo;


/* 2. código para el parser, variables, métodos */

// PARSER
parser code
{:   

    //clases, objetos, variables, listas, etc.
    Variable vari = new Variable();
    Aritmetica Ari = new Aritmetica();
    Imprimir imp = new Imprimir();


    // salida consola
    public List<String> salidas = new ArrayList<String>();

    public ArrayList<TablaInfo> tabla = new ArrayList<TablaInfo>();
    // errores
    public ArrayList<Excepcion> Errores = new ArrayList();

    // Método al que se llama automáticamente ante algún error sintáctico.
    public void syntax_error(Symbol s){ 
        Errores.add(new Excepcion("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left + "", s.right + ""));
    } 

    // Método al que se llama automáticamente ante algún error sintáctico, en el que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sintactico irrecuperable en la Linea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }

    public ArrayList<Excepcion> getErrores(){
        return Errores;
    }

    public ArrayList<TablaInfo> getTabla(){
        return tabla;
    }


:}

/* 3. terminales */
terminal String PTCOMA, DOS_PT, PAR_IZQ, PAR_DER, LLAV_DER, LLAV_IZQ, PUNTO, COMA, COR_IZQ, COR_DER, ASIGNACION;
terminal String AND, OR, NOT, XOR;
terminal String INCREMENTO, DECREMENTO;
terminal String DISTINTO, IGUAL, MAYOR, MENOR, MAYORIGUAL, MENORIGUAL;
terminal String NUMERO, ID,  BOOLEANO;
terminal String CADENA;

terminal String VAR;
terminal String CONST;

terminal String IF;
terminal String ELSE;
terminal String ELSEIF;

terminal String MATCH;
terminal String WHILE;
terminal String FOR;
terminal String DO;
terminal String BREAK;
terminal String CONTINUE;
terminal String RETURN;

terminal String LIST;
terminal String NEW;
terminal String APPEND;
terminal String REMOVE;

terminal String STRUCT;

terminal String VOID;
terminal String PRINTLN;

terminal String ROUND;
terminal String LENGTH;
terminal String TOSTRING;
terminal String FIND;

terminal String START_WITH;

/* 4. No terminales */
non terminal String ini;
non terminal String instrucciones;
non terminal String instruccion;
non terminal String imprimir;
non terminal String expresion;


/* 5. precedencias operadores */


/* 6. Reglas de producción para expresiones */
start with ini;

ini ::= instrucciones
;

instrucciones ::= instrucciones instruccion
            | instruccion
            | error PTCOMA  {::}
;

instruccion ::= imprimir
; 

imprimir ::=  PRINTLN PAR_IZQ expresion PAR_DER PTCOMA
;

expresion ::= CADENA
;

