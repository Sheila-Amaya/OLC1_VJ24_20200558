/* SINTACTICO */

/* 1. package o importaciones */
package Analizadores;
import java_cup.runtime.*;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.List;
import java.util.LinkedList;
import Errores.Excepcion;
import java.util.HashMap;

import abstracto.*;
import simbolo.*;

//=========INSTRUCCIONES=========
import instrucciones.*;

//=========EXPRESIONES=========
import expresiones.*;



/* 2. código para el parser, variables, métodos */
// PARSER
parser code
{:   

    //clases, objetos, variables, listas, etc.


    // salida consola
    public List<String> salidas = new ArrayList<String>();

    // errores
    public ArrayList<Excepcion> Errores = new ArrayList();

    // Método al que se llama automáticamente ante algún error sintáctico.
    public void syntax_error(Symbol s){ 
        Errores.add(new Excepcion("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left, s.right));
        } 

    // Método al que se llama automáticamente ante algún error sintáctico, en el que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sintactico irrecuperable en la Linea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }

    public ArrayList<Excepcion> getErrores(){
        return Errores;
    }

    //========================


:}

/* 3. terminales */
terminal String PT_COMA, DOS_PT, PAR_IZQ, PAR_DER, LLAV_DER, LLAV_IZQ, PUNTO, COMA, COR_IZQ, COR_DER;
terminal String AND, OR, NOT, XOR;
terminal String MAS, MENOS, POR, DIV, MOD, POTENCIA, UMENOS, INC, DEC;
terminal String DISTINTO, IGUAL, IGUALIGUAL, MAYOR, MENOR, MAYORIGUAL, MENORIGUAL;
terminal String ENTERO, DECIMAL, ID;
terminal String CARACTER, CADENA;

terminal String INT;
terminal String DOUBLE;
terminal String STRING;
terminal String CHAR;
terminal String BOOL;
terminal String TRUE, FALSE;

terminal String VAR;
terminal String CONST;

terminal String IF;
terminal String ELSE;

terminal String MATCH;
terminal String WHILE;
terminal String FOR;
terminal String DO;
terminal String BREAK;
terminal String CONTINUE;
terminal String RETURN;

terminal String CASE;
terminal String DEFAULT;

terminal String LIST;
terminal String NEW;
terminal String APPEND;
terminal String REMOVE;

terminal String STRUCT;

terminal String VOID;
terminal String PRINTLN;

terminal String ROUND;
terminal String LENGTH;
terminal String TOSTRING;
terminal String FIND;

terminal String START_WITH;

/* 4. No terminales */
non terminal LinkedList<Instruccion> ini, instrucciones;
non terminal Instruccion instruccion;
non terminal Instruccion imprimir;
non terminal Instruccion expresion;
non terminal Tipo tipo_datos;
non terminal Instruccion declaracion_id;
non terminal Instruccion asignacion_id;
non terminal Instruccion sentencia_if;

non terminal Instruccion sentencia_match;
non terminal Instruccion entornos;
non terminal Instruccion cases_default;
non terminal Instruccion cases;
non terminal Instruccion case;
non terminal Instruccion default;

non terminal Instruccion sentencia_while;
non terminal Instruccion sentencia_for;
non terminal Instruccion sentencia_do_while;
non terminal String mutabilidad;
non terminal Instruccion aritmeticos;
non terminal Instruccion relacionales;
non terminal Instruccion logicos;
non terminal Instruccion casteo;
non terminal Instruccion inc_dec;

non terminal String declaracion_vector;
non terminal String lista_valores;
non terminal String lista_valores2;
non terminal String acceso_vl;
non terminal String asignacion_vl;
non terminal String declaracion_listas;
non terminal String append;
non terminal String remove;
non terminal String struct;
non terminal String lista_structs;
non terminal String campos;
non terminal String instanciar_struct;
non terminal String valores_struct;
non terminal String valor_struc;
non terminal String acceso_struct;
non terminal String asignacion_struct;
non terminal String funcion;
non terminal LinkedList<Instruccion> parametros_llamada;
non terminal Instruccion metodo;
non terminal Instruccion llamada;
non terminal LinkedList<HashMap> parametros ;
non terminal Instruccion round;
non terminal Instruccion length;
non terminal Instruccion toString;
non terminal String find;
non terminal Instruccion start_with;


/* 5. precedencias operadores */
precedence left OR;
precedence left AND;
precedence left XOR;
precedence left NOT;
precedence left IGUALIGUAL, DISTINTO, MENOR, MENORIGUAL, MAYOR, MAYORIGUAL;
precedence left MAS, MENOS;
precedence left POR, DIV, MOD;
precedence left POTENCIA;
precedence left UMENOS;


/* 6. Reglas de producción para expresiones */
start with ini;

ini ::= instrucciones:a                             {: RESULT = a; :}
;

instrucciones ::= instrucciones:a instruccion:b     {: RESULT = a; RESULT.add(b); :}
            | instruccion:a                         {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

instruccion ::= declaracion_id:a PT_COMA            {: RESULT = a; :}
                | asignacion_id:a PT_COMA           {: RESULT = a; :}         
                | sentencia_if:a                    {: RESULT = a; :}
                | sentencia_match:a                 {: RESULT = a; :}
                | sentencia_while:a                 {: RESULT = a; :}
                | sentencia_for:a                   {: RESULT = a; :} 
                | sentencia_do_while:a PT_COMA      {: RESULT = a; :}
                | inc_dec:a PT_COMA                 {: RESULT = a; :}
                | imprimir:a                        {: RESULT = a; :}
                | declaracion_vector PT_COMA
                | asignacion_vl PT_COMA
                | declaracion_listas PT_COMA 
                | append PT_COMA
                | struct PT_COMA
                | instanciar_struct PT_COMA
                | asignacion_struct PT_COMA
                | funcion 
                | metodo:a                          {: RESULT = a; :}
                | llamada:a PT_COMA                 {: RESULT = a; :}               
                | start_with:a PT_COMA              {: RESULT = a; :}
                | RETURN expresion PT_COMA          
                | RETURN PT_COMA
                | CONTINUE:a PT_COMA                {: RESULT = new Continue(aleft, aright); :} 
                | BREAK:a PT_COMA                   {: RESULT = new Break(aleft, aright); :}
                | error PT_COMA
;

// ===== DECLARACION =====
declaracion_id ::= mutabilidad:a ID:b DOS_PT tipo_datos:c IGUAL expresion:d  {: RESULT = new Declaracion(a,b,c,d,aleft, aright); :}
                | mutabilidad:a ID:b DOS_PT tipo_datos:c                     {: RESULT = new Declaracion(a,b,c,null,aleft, aright); :}
;

mutabilidad ::= VAR                 {: RESULT = "var"; :}
                | CONST             {: RESULT = "const"; :}
;

// ===== ASIGNACION =====
asignacion_id ::= ID:a IGUAL expresion:b        {: RESULT = new AsignacionVariables(a,b,aleft, aright); :}
;

// ===== SENTENCIAS DE CONTROL =====
// ===== SENTENCIA IF =====
sentencia_if ::=  IF PAR_IZQ expresion:a PAR_DER LLAV_IZQ instrucciones:b LLAV_DER ELSE sentencia_if:c                               {: RESULT = new SentenciaIfElseIf(a,b,c,null,aleft, aright); :}
                | IF PAR_IZQ expresion:a PAR_DER LLAV_IZQ instrucciones:b LLAV_DER ELSE LLAV_IZQ instrucciones:c LLAV_DER            {: RESULT = new SentenciaIfElse(a,b,c,aleft, aright); :}
                | IF PAR_IZQ expresion:a PAR_DER LLAV_IZQ instrucciones:b LLAV_DER                                                   {: RESULT = new SentenciaIf(a,b,aleft, aright); :}
;

// ===== SENTENCIA MATCH =====
sentencia_match ::= MATCH expresion entornos ;

entornos ::= LLAV_IZQ cases_default LLAV_DER
            | LLAV_IZQ LLAV_DER
;

cases_default ::= cases default
                | cases
                | default
;

cases ::= cases case
        | case
;

case ::= expresion CASE LLAV_IZQ instrucciones LLAV_DER
;

default ::= DEFAULT CASE LLAV_IZQ instrucciones LLAV_DER
;


// ===== SENTENCIAS CICLICAS =====
// ===== SENTENCIA WHILE =====
sentencia_while ::= WHILE PAR_IZQ expresion:a PAR_DER LLAV_IZQ instrucciones:b LLAV_DER {: RESULT = new SentenciaWhile(a,b,aleft, aright); :}
; 


// ===== SENTENCIA FOR =====
sentencia_for ::= FOR PAR_IZQ asignacion_id:a PT_COMA expresion:b PT_COMA inc_dec:c PAR_DER LLAV_IZQ instrucciones:d LLAV_DER {: RESULT = new For(a,b,c,d,aleft,aright); :}
;


// ===== SENTENCIA DO WHILE =====
sentencia_do_while ::= DO LLAV_IZQ instrucciones:a LLAV_DER WHILE PAR_IZQ expresion:b PAR_DER {: RESULT = new SentenciaDoWhile(a,b,aleft, aright); :}
;

// ===== PRINT =====
imprimir ::=  PRINTLN PAR_IZQ expresion:a PAR_DER PT_COMA     {: RESULT = new Print(a,aleft, aright); :}
;

// ===== EXPRESIONES =====
expresion ::= aritmeticos:a                {: RESULT = a; :}        
            | relacionales:a               {: RESULT = a; :}
            | logicos   :a                 {: RESULT = a; :}
            | casteo    :a                 {: RESULT = a; :}
            | ID        :a                 {: RESULT = new AccesoVariables(a,aleft, aright); :}
            | ENTERO    :a                 {: RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO),aleft, aright  ); :}
            | DECIMAL   :a                 {: RESULT = new Nativo(Double.parseDouble(a), new Tipo(tipoDato.DECIMAL),aleft, aright  ); :}
            | TRUE      :a                 {: RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO),aleft, aright  ); :}
            | FALSE     :a                 {: RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO),aleft, aright  ); :}    
            | CADENA    :a                 {: RESULT = new Nativo(a, new Tipo(tipoDato.CADENA),aleft, aright  ); :}
            | CARACTER  :a                 {: RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER),aleft, aright  ); :}
            | PAR_IZQ expresion:a PAR_DER  {: RESULT = a; :}
            | llamada:a PT_COMA            {: RESULT = a; :}
            | acceso_vl
            | remove 
            | acceso_struct 
            | find
            | round:a                      {: RESULT = a; :}
            | length:a                     {: RESULT = a; :}
            | toString:a                   {: RESULT = a; :}
;

aritmeticos ::=   expresion:a MAS expresion:b         {: RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.SUMA,aleft, aright); :}
                | expresion:a MENOS expresion:b       {: RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.RESTA,aleft, aright); :}
                | expresion:a POR expresion:b         {: RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.MULTIPLICACION,aleft, aright); :}
                | expresion:a DIV expresion:b         {: RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.DIVISION,aleft, aright); :}
                | expresion:a MOD expresion:b         {: RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.MODULO,aleft, aright); :}
                | expresion:a POTENCIA expresion:b    {: RESULT = new Aritmeticas(a,b , OperadoresAritmeticos.POTENCIA,aleft, aright); :}
                | MENOS expresion:a                   {: RESULT = new Aritmeticas(a   , OperadoresAritmeticos.NEGACION,aleft, aright); :}   %prec UMENOS 
;

relacionales ::= expresion:a IGUALIGUAL expresion:b   {: RESULT = new Relacionales(a,b , OperadoresRelacionales.EQUALS,aleft, aright); :}    %prec IGUALIGUAL
                | expresion:a DISTINTO expresion:b    {: RESULT = new Relacionales(a,b , OperadoresRelacionales.NOT_EQUALS,aleft, aright); :}
                | expresion:a MAYOR expresion:b       {: RESULT = new Relacionales(a,b , OperadoresRelacionales.GREATER_THAN,aleft, aright); :}
                | expresion:a MENOR expresion:b       {: RESULT = new Relacionales(a,b , OperadoresRelacionales.LESS_THAN,aleft, aright); :}
                | expresion:a MAYORIGUAL expresion:b  {: RESULT = new Relacionales(a,b , OperadoresRelacionales.GREATER_THAN_OR_EQUALS,aleft, aright); :}
                | expresion:a MENORIGUAL expresion:b  {: RESULT = new Relacionales(a,b , OperadoresRelacionales.LESS_THAN_OR_EQUALS,aleft, aright); :}
;

logicos ::= expresion:a OR expresion:b                 {: RESULT = new Logicos(a, OperadoresLogicos.OR, b,aleft, aright); :}
            | expresion:a AND expresion:b              {: RESULT = new Logicos(a, OperadoresLogicos.AND, b,aleft, aright); :}
            | expresion:a XOR expresion:b              {: RESULT = new Logicos(a, OperadoresLogicos.XOR, b,aleft, aright); :}
            | NOT expresion:a                          {: RESULT = new Logicos(a, OperadoresLogicos.NOT, null,aleft, aright); :}                     
;

// ===== CASTEOS =====
casteo ::= PAR_IZQ tipo_datos:a PAR_DER expresion:b     {: RESULT = new Casteos(a,b,aleft, aright); :}
;

// ===== INCREMENTO/DECREMENTO =====
inc_dec ::=   ID :a INC :b   {: RESULT = new IncDec(a, b, aleft, aright); :}
            | ID :a DEC :b   {: RESULT = new IncDec(a, b, aleft, aright); :}
;

// ===== TIPOS DE DATOS =====
tipo_datos ::= INT   :a     {: RESULT = new Tipo(tipoDato.ENTERO);   :}
            | DOUBLE :a     {: RESULT = new Tipo(tipoDato.DECIMAL);  :}
            | BOOL   :a     {: RESULT = new Tipo(tipoDato.BOOLEANO); :}
            | STRING :a     {: RESULT = new Tipo(tipoDato.CADENA);   :}
            | CHAR   :a     {: RESULT = new Tipo(tipoDato.CARACTER); :}
;

// ===== VECTORES ===== 
// ===== declaracion de vectores =====
declaracion_vector ::= mutabilidad ID DOS_PT tipo_datos COR_IZQ COR_DER IGUAL COR_IZQ lista_valores COR_DER 
                    |  mutabilidad ID DOS_PT tipo_datos COR_IZQ COR_DER COR_IZQ COR_DER IGUAL COR_IZQ lista_valores2 COR_DER
;

lista_valores ::= lista_valores COMA expresion
                | expresion
;

lista_valores2 ::= lista_valores2 COMA COR_IZQ lista_valores COR_DER
                | COR_IZQ lista_valores COR_DER
;

//======= acceso vectores, listas =======
acceso_vl ::= ID COR_IZQ expresion COR_DER 
                | ID COR_IZQ expresion COR_DER COR_IZQ expresion COR_DER
;

//======= asignacion vectores, listas =======
asignacion_vl ::= ID COR_IZQ expresion COR_DER IGUAL expresion
                    |   ID COR_IZQ expresion COR_DER COR_IZQ expresion COR_DER IGUAL expresion
;

// ===== LISTAS DINAMICAS=====
// ===== declaracion de listas =====
declaracion_listas ::= LIST MENOR tipo_datos:a MAYOR ID:b IGUAL NEW LIST PAR_IZQ PAR_DER 
;

append ::= ID PUNTO APPEND PAR_IZQ expresion PAR_DER
;

remove ::= ID PUNTO REMOVE PAR_IZQ expresion PAR_DER
;

// ===== STRUCT =====
struct ::= STRUCT LLAV_IZQ lista_structs LLAV_DER ID 
;

lista_structs ::= lista_structs campos
                | campos
;

campos ::= ID DOS_PT tipo_datos PT_COMA
;

// ===== instancia de struct =====
instanciar_struct ::= mutabilidad ID DOS_PT ID IGUAL LLAV_IZQ valores_struct LLAV_DER
;

valores_struct ::= valores_struct COMA valor_struc
                | valor_struc
;

valor_struc ::= ID DOS_PT expresion
;

// ===== acceso a strucs =====
acceso_struct ::= ID PUNTO ID
;

// ===== asignacion a strucs =====
asignacion_struct ::= ID PUNTO ID IGUAL expresion
;

// ===== FUNCIONES =====
funcion ::= tipo_datos ID PAR_IZQ parametros PAR_DER LLAV_IZQ instrucciones LLAV_DER
;

parametros ::= parametros:a COMA tipo_datos:b ID:c              {: RESULT = a; var l2 = new HashMap<String, Object>(); l2.put("id",c); l2.put("tipo",b); RESULT.add(l2); :}
                | tipo_datos:a ID:b                             {: RESULT = new LinkedList<HashMap>(); var l = new HashMap<String, Object>(); l.put("id",b); l.put("tipo",a); RESULT.add(l); :}
;

// ===== METODOS  =====
metodo ::= VOID ID:a PAR_IZQ parametros:b PAR_DER LLAV_IZQ instrucciones:c LLAV_DER    {: RESULT = new Metodo(a,b,c,aleft,aright); :}
        |  VOID ID:a PAR_IZQ PAR_DER LLAV_IZQ instrucciones:b LLAV_DER                 {: RESULT = new Metodo(a,new LinkedList<HashMap>(),b,aleft,aright); :}
;

parametros_llamada ::= parametros_llamada:a COMA expresion:b                           {: RESULT = a; RESULT.add(b); :}
                    | expresion:a                                                      {: RESULT = new LinkedList(); RESULT.add(a); :}
;

// ===== llamadas a metodos ===== 
llamada ::= ID:a PAR_IZQ parametros_llamada:b PAR_DER       {: RESULT = new Llamada(a,b,aleft,aright); :}
        | ID:a PAR_IZQ PAR_DER                              {: RESULT = new Llamada(a,new LinkedList(),aleft,aright); :}
;
// ===== funcion round =====
round ::= ROUND PAR_IZQ expresion:a PAR_DER                 {: RESULT = new Round(a,aleft,aright); :}
;

// ===== funcion length =====
length ::= LENGTH PAR_IZQ expresion:a PAR_DER               {: RESULT = new Length(a,aleft,aright); :}
;

// ===== funcion toString =====
toString ::= TOSTRING PAR_IZQ expresion:a PAR_DER           {: RESULT = new ToString(a,aleft,aright); :}
;

// ===== funcion find =====
find ::= ID PUNTO FIND PAR_IZQ expresion PAR_DER
;

// ===== funcion startWith =====
start_with ::= START_WITH ID:a PAR_IZQ parametros_llamada:b PAR_DER            {: RESULT = new Start_W(a,b,aleft,aright); :}
            |  START_WITH ID:a PAR_IZQ PAR_DER                                 {: RESULT = new Start_W(a,new LinkedList(),aleft,aright); :}
;